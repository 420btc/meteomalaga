{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { fetchCurrentTemperatureData, fetchCurrentRainData } from \"./weatherService\";\nconst ALERTS_STORAGE_KEY = 'user_weather_alerts';\nexport const createAlert = async alert => {\n  try {\n    const id = Date.now().toString();\n    const newAlert = Object.assign({}, alert, {\n      id,\n      createdAt: new Date().toISOString()\n    });\n    const existingAlerts = await getAlerts();\n    const updatedAlerts = [...existingAlerts, newAlert];\n    await AsyncStorage.setItem(ALERTS_STORAGE_KEY, JSON.stringify(updatedAlerts));\n    return newAlert;\n  } catch (error) {\n    console.error('Error creating alert:', error);\n    throw new Error('Failed to create alert');\n  }\n};\nexport const getAlerts = async () => {\n  try {\n    const alertsJson = await AsyncStorage.getItem(ALERTS_STORAGE_KEY);\n    if (!alertsJson) {\n      return [];\n    }\n    return JSON.parse(alertsJson);\n  } catch (error) {\n    console.error('Error getting alerts:', error);\n    return [];\n  }\n};\nexport const updateAlert = async updatedAlert => {\n  try {\n    const alerts = await getAlerts();\n    const updatedAlerts = alerts.map(alert => alert.id === updatedAlert.id ? updatedAlert : alert);\n    await AsyncStorage.setItem(ALERTS_STORAGE_KEY, JSON.stringify(updatedAlerts));\n    return updatedAlert;\n  } catch (error) {\n    console.error('Error updating alert:', error);\n    throw new Error('Failed to update alert');\n  }\n};\nexport const deleteAlert = async alertId => {\n  try {\n    const alerts = await getAlerts();\n    const filteredAlerts = alerts.filter(alert => alert.id !== alertId);\n    await AsyncStorage.setItem(ALERTS_STORAGE_KEY, JSON.stringify(filteredAlerts));\n  } catch (error) {\n    console.error('Error deleting alert:', error);\n    throw new Error('Failed to delete alert');\n  }\n};\nexport const toggleAlertActive = async alertId => {\n  try {\n    const alerts = await getAlerts();\n    const alert = alerts.find(a => a.id === alertId);\n    if (!alert) {\n      throw new Error('Alert not found');\n    }\n    const updatedAlert = Object.assign({}, alert, {\n      active: !alert.active\n    });\n    return await updateAlert(updatedAlert);\n  } catch (error) {\n    console.error('Error toggling alert:', error);\n    throw new Error('Failed to toggle alert');\n  }\n};\nexport const checkAlerts = async () => {\n  try {\n    const alerts = await getAlerts();\n    const activeAlerts = alerts.filter(alert => alert.active);\n    if (activeAlerts.length === 0) {\n      return [];\n    }\n    const temperatureData = await fetchCurrentTemperatureData();\n    const rainData = await fetchCurrentRainData();\n    const results = [];\n    for (const alert of activeAlerts) {\n      let triggered = false;\n      let currentValue = 0;\n      if (alert.type === 'temperature') {\n        currentValue = temperatureData.current;\n        if (alert.condition === 'above' && currentValue > alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'below' && currentValue < alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'equals' && Math.abs(currentValue - alert.threshold) < 0.5) {\n          triggered = true;\n        }\n      } else if (alert.type === 'rain') {\n        currentValue = rainData;\n        if (alert.condition === 'above' && currentValue > alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'below' && currentValue < alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'equals' && Math.abs(currentValue - alert.threshold) < 0.5) {\n          triggered = true;\n        }\n      }\n      results.push({\n        triggered,\n        alert,\n        currentValue\n      });\n    }\n    return results;\n  } catch (error) {\n    console.error('Error checking alerts:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["AsyncStorage","fetchCurrentTemperatureData","fetchCurrentRainData","ALERTS_STORAGE_KEY","createAlert","alert","id","Date","now","toString","newAlert","Object","assign","createdAt","toISOString","existingAlerts","getAlerts","updatedAlerts","setItem","JSON","stringify","error","console","Error","alertsJson","getItem","parse","updateAlert","updatedAlert","alerts","map","deleteAlert","alertId","filteredAlerts","filter","toggleAlertActive","find","a","active","checkAlerts","activeAlerts","length","temperatureData","rainData","results","triggered","currentValue","type","current","condition","threshold","Math","abs","push"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/alertService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { UserAlert, AlertCheckResult } from '../types/alerts';\nimport { fetchCurrentTemperatureData, fetchCurrentRainData } from './weatherService';\n\nconst ALERTS_STORAGE_KEY = 'user_weather_alerts';\n\n// Create a new alert\nexport const createAlert = async (alert: Omit<UserAlert, 'id' | 'createdAt'>): Promise<UserAlert> => {\n  try {\n    // Generate a unique ID\n    const id = Date.now().toString();\n    \n    // Create the complete alert object\n    const newAlert: UserAlert = {\n      ...alert,\n      id,\n      createdAt: new Date().toISOString(),\n    };\n    \n    // Get existing alerts\n    const existingAlerts = await getAlerts();\n    \n    // Add the new alert\n    const updatedAlerts = [...existingAlerts, newAlert];\n    \n    // Save to storage\n    await AsyncStorage.setItem(ALERTS_STORAGE_KEY, JSON.stringify(updatedAlerts));\n    \n    return newAlert;\n  } catch (error) {\n    console.error('Error creating alert:', error);\n    throw new Error('Failed to create alert');\n  }\n};\n\n// Get all alerts\nexport const getAlerts = async (): Promise<UserAlert[]> => {\n  try {\n    const alertsJson = await AsyncStorage.getItem(ALERTS_STORAGE_KEY);\n    \n    if (!alertsJson) {\n      return [];\n    }\n    \n    return JSON.parse(alertsJson);\n  } catch (error) {\n    console.error('Error getting alerts:', error);\n    return [];\n  }\n};\n\n// Update an alert\nexport const updateAlert = async (updatedAlert: UserAlert): Promise<UserAlert> => {\n  try {\n    const alerts = await getAlerts();\n    \n    const updatedAlerts = alerts.map(alert => \n      alert.id === updatedAlert.id ? updatedAlert : alert\n    );\n    \n    await AsyncStorage.setItem(ALERTS_STORAGE_KEY, JSON.stringify(updatedAlerts));\n    \n    return updatedAlert;\n  } catch (error) {\n    console.error('Error updating alert:', error);\n    throw new Error('Failed to update alert');\n  }\n};\n\n// Delete an alert\nexport const deleteAlert = async (alertId: string): Promise<void> => {\n  try {\n    const alerts = await getAlerts();\n    \n    const filteredAlerts = alerts.filter(alert => alert.id !== alertId);\n    \n    await AsyncStorage.setItem(ALERTS_STORAGE_KEY, JSON.stringify(filteredAlerts));\n  } catch (error) {\n    console.error('Error deleting alert:', error);\n    throw new Error('Failed to delete alert');\n  }\n};\n\n// Toggle alert active status\nexport const toggleAlertActive = async (alertId: string): Promise<UserAlert> => {\n  try {\n    const alerts = await getAlerts();\n    \n    const alert = alerts.find(a => a.id === alertId);\n    \n    if (!alert) {\n      throw new Error('Alert not found');\n    }\n    \n    const updatedAlert = {\n      ...alert,\n      active: !alert.active\n    };\n    \n    return await updateAlert(updatedAlert);\n  } catch (error) {\n    console.error('Error toggling alert:', error);\n    throw new Error('Failed to toggle alert');\n  }\n};\n\n// Check if any alerts are triggered based on current weather data\nexport const checkAlerts = async (): Promise<AlertCheckResult[]> => {\n  try {\n    const alerts = await getAlerts();\n    const activeAlerts = alerts.filter(alert => alert.active);\n    \n    if (activeAlerts.length === 0) {\n      return [];\n    }\n    \n    // Fetch current weather data\n    const temperatureData = await fetchCurrentTemperatureData();\n    const rainData = await fetchCurrentRainData();\n    \n    // Check each alert\n    const results: AlertCheckResult[] = [];\n    \n    for (const alert of activeAlerts) {\n      let triggered = false;\n      let currentValue = 0;\n      \n      if (alert.type === 'temperature') {\n        currentValue = temperatureData.current;\n        \n        if (alert.condition === 'above' && currentValue > alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'below' && currentValue < alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'equals' && Math.abs(currentValue - alert.threshold) < 0.5) {\n          triggered = true;\n        }\n      } else if (alert.type === 'rain') {\n        currentValue = rainData;\n        \n        if (alert.condition === 'above' && currentValue > alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'below' && currentValue < alert.threshold) {\n          triggered = true;\n        } else if (alert.condition === 'equals' && Math.abs(currentValue - alert.threshold) < 0.5) {\n          triggered = true;\n        }\n      }\n      \n      results.push({\n        triggered,\n        alert,\n        currentValue\n      });\n    }\n    \n    return results;\n  } catch (error) {\n    console.error('Error checking alerts:', error);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}