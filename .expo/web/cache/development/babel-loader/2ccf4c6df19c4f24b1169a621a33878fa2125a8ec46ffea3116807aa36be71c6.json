{"ast":null,"code":"var _jsxFileName = \"/Users/atemjohnatem/Downloads/meteo-malaga/src/context/AppContext.tsx\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { fetchWeatherData, fetchCurrentRainData, fetchCurrentTemperatureData } from \"../services/weatherService\";\nimport { getLocalBets, startBackgroundVerification, cleanupOldBets, getRemainingTemperatureBets as getLocalRemainingTemperatureBets, showBetResolutionNotification, getAndClearRecentlyResolvedBets } from \"../services/localBetService\";\nimport { loginUser, registerUser, getCurrentUser, isLoggedIn, logoutUser, updateUserCoins, updateUserBetStats, updateUserWaterDrops, updateUserAvatar, updateUserDailyReward } from \"../services/enhancedAuthService\";\nimport { resolveBets } from \"../utils/resolveBets\";\nimport { addBet, getRemainingTemperatureBets } from \"../services/localSupabaseService\";\nimport { updateLastActivity } from \"../services/plantService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = createContext(undefined);\nexport const AppProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [coins, setCoins] = useState(100);\n  const [waterDrops, setWaterDrops] = useState(0);\n  const [bets, setBets] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [remainingTempBets, setRemainingTempBets] = useState(2);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [language, setLanguage] = useState('es');\n  const [isOnline, setIsOnline] = useState(true);\n  const trackActivity = async () => {\n    await updateLastActivity();\n  };\n  useEffect(() => {\n    const initializeApp = async () => {\n      setIsLoading(true);\n      try {\n        await trackActivity();\n        const savedLanguage = await AsyncStorage.getItem('app_language');\n        if (savedLanguage) {\n          setLanguage(savedLanguage);\n        }\n        const authenticated = await isLoggedIn();\n        setIsAuthenticated(authenticated);\n        if (authenticated) {\n          const currentUser = await getCurrentUser();\n          if (currentUser) {\n            const userProfile = {\n              id: currentUser.userId,\n              username: currentUser.username,\n              coins: currentUser.coins || 100,\n              waterDrops: currentUser.waterDrops || 0,\n              totalBets: currentUser.totalBets || 0,\n              wonBets: currentUser.wonBets || 0,\n              avatar: currentUser.avatar,\n              lastDailyReward: currentUser.lastDailyReward,\n              dailyRewardStreak: currentUser.dailyRewardStreak || 0\n            };\n            setUser(userProfile);\n            setCoins(userProfile.coins);\n            setWaterDrops(userProfile.waterDrops || 0);\n          }\n        }\n        const localBets = await getLocalBets();\n        setBets(localBets);\n        await refreshRemainingTempBets();\n        await cleanupOldBets();\n        await checkForResolvedBets();\n      } catch (error) {\n        console.error('Error initializing app:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeApp();\n    const stopVerification = startBackgroundVerification((resolvedBets, coinsWon) => {\n      if (resolvedBets.length > 0) {\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        if (coinsWon > 0) {\n          addCoins(coinsWon);\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n        }\n        showBetResolutionNotification(resolvedBets, coinsWon);\n      }\n    });\n    return () => {\n      stopVerification();\n    };\n  }, []);\n  const addCoins = async amount => {\n    const newTotal = coins + amount;\n    setCoins(newTotal);\n    if (user) {\n      const updatedUser = Object.assign({}, user, {\n        coins: newTotal\n      });\n      setUser(updatedUser);\n      await updateUserCoins(user.id, newTotal);\n    }\n    await trackActivity();\n  };\n  const addWaterDrops = async amount => {\n    const newTotal = waterDrops + amount;\n    setWaterDrops(newTotal);\n    if (user) {\n      const updatedUser = Object.assign({}, user, {\n        waterDrops: newTotal\n      });\n      setUser(updatedUser);\n      await updateUserWaterDrops(user.id, amount);\n    }\n    await trackActivity();\n  };\n  const updateAvatar = async avatarUrl => {\n    if (user) {\n      const updatedUser = Object.assign({}, user, {\n        avatar: avatarUrl\n      });\n      setUser(updatedUser);\n      await updateUserAvatar(user.id, avatarUrl);\n      await trackActivity();\n    }\n  };\n  const getDailyRewards = day => {\n    const rewards = [{\n      day: 1,\n      coins: 5,\n      waterDrops: 5\n    }, {\n      day: 2,\n      coins: 10,\n      waterDrops: 0\n    }, {\n      day: 3,\n      coins: 0,\n      waterDrops: 10\n    }, {\n      day: 4,\n      coins: 50,\n      waterDrops: 0\n    }, {\n      day: 5,\n      coins: 50,\n      waterDrops: 1\n    }];\n    return rewards[day - 1] || rewards[0];\n  };\n  const getNextDailyRewardTime = async () => {\n    if (!user || !user.lastDailyReward) {\n      return null;\n    }\n    const lastRewardDate = new Date(user.lastDailyReward);\n    const nextRewardDate = new Date(lastRewardDate);\n    nextRewardDate.setDate(nextRewardDate.getDate() + 1);\n    return nextRewardDate;\n  };\n  const getDailyRewardStreak = async () => {\n    if (!user) {\n      return 0;\n    }\n    return user.dailyRewardStreak || 0;\n  };\n  const claimDailyReward = async () => {\n    if (!user) {\n      return null;\n    }\n    const now = new Date();\n    let streak = user.dailyRewardStreak || 0;\n    let canClaim = true;\n    if (user.lastDailyReward) {\n      const lastRewardDate = new Date(user.lastDailyReward);\n      const timeDiff = now.getTime() - lastRewardDate.getTime();\n      const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n      if (daysDiff < 1) {\n        canClaim = false;\n      } else if (daysDiff > 1) {\n        streak = 0;\n      }\n    }\n    if (!canClaim) {\n      return null;\n    }\n    streak = streak % 5 + 1;\n    const reward = getDailyRewards(streak);\n    if (reward.coins > 0) {\n      await addCoins(reward.coins);\n    }\n    if (reward.waterDrops > 0) {\n      await addWaterDrops(reward.waterDrops);\n    }\n    await updateUserDailyReward(user.id, now.toISOString(), streak);\n    setUser(Object.assign({}, user, {\n      lastDailyReward: now.toISOString(),\n      dailyRewardStreak: streak\n    }));\n    return reward;\n  };\n  const addBetHandler = async bet => {\n    try {\n      await trackActivity();\n      await addCoins(-bet.coins);\n      const betWithUser = Object.assign({}, bet, {\n        user_id: user?.id || 'anonymous'\n      });\n      const savedBet = await addBet(betWithUser);\n      if (!savedBet) {\n        throw new Error('Error al guardar la apuesta');\n      }\n      setBets(prevBets => [savedBet, ...prevBets]);\n      if (bet.option === 'temp_min' || bet.option === 'temp_max') {\n        await refreshRemainingTempBets();\n      }\n      if (user) {\n        await updateUserBetStats(user.id, false);\n      }\n    } catch (error) {\n      await addCoins(bet.coins);\n      throw error;\n    }\n  };\n  const getWeatherForDate = async date => {\n    await trackActivity();\n    return await fetchWeatherData(date);\n  };\n  const getCurrentRainAmount = async () => {\n    await trackActivity();\n    return await fetchCurrentRainData();\n  };\n  const getCurrentTemperature = async () => {\n    await trackActivity();\n    return await fetchCurrentTemperatureData();\n  };\n  const refreshRemainingTempBets = async () => {\n    try {\n      await trackActivity();\n      const remaining = user ? await getRemainingTemperatureBets(user.id) : await getLocalRemainingTemperatureBets();\n      setRemainingTempBets(remaining);\n    } catch (error) {\n      console.error('Error refreshing remaining temperature bets:', error);\n    }\n  };\n  const evaluateBets = async () => {\n    try {\n      await trackActivity();\n      const {\n        resolvedBets,\n        totalCoinsWon\n      } = await resolveBets();\n      if (resolvedBets.length > 0) {\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        if (totalCoinsWon > 0) {\n          addCoins(totalCoinsWon);\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n          showBetResolutionNotification(resolvedBets, totalCoinsWon);\n        }\n      }\n    } catch (error) {\n      console.error('Error evaluating bets:', error);\n    }\n  };\n  const checkForResolvedBets = async () => {\n    try {\n      await trackActivity();\n      const recentlyResolvedBets = await getAndClearRecentlyResolvedBets();\n      if (recentlyResolvedBets.length > 0) {\n        const totalCoinsWon = recentlyResolvedBets.filter(bet => bet.won).reduce((total, bet) => total + bet.coins * bet.leverage, 0);\n        if (totalCoinsWon > 0) {\n          showBetResolutionNotification(recentlyResolvedBets, totalCoinsWon);\n        }\n      }\n      await evaluateBets();\n    } catch (error) {\n      console.error('Error checking for resolved bets:', error);\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      await trackActivity();\n      const response = await loginUser(username, password);\n      if (response.success && response.userId && response.username) {\n        const currentUser = await getCurrentUser();\n        if (currentUser) {\n          const userProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          await refreshRemainingTempBets();\n        }\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in login:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al iniciar sesión. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n  const register = async (username, password) => {\n    try {\n      await trackActivity();\n      const response = await registerUser(username, password);\n      if (response.success && response.userId && response.username) {\n        const currentUser = await getCurrentUser();\n        if (currentUser) {\n          const userProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n        }\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in register:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al registrarse. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await trackActivity();\n      await logoutUser();\n      setUser(null);\n      setCoins(0);\n      setWaterDrops(0);\n      setIsAuthenticated(false);\n      setBets([]);\n    } catch (error) {\n      console.error('Error in logout:', error);\n    }\n  };\n  const refreshAuthState = async () => {\n    try {\n      await trackActivity();\n      const authenticated = await isLoggedIn();\n      setIsAuthenticated(authenticated);\n      if (authenticated) {\n        const currentUser = await getCurrentUser();\n        if (currentUser) {\n          const userProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          await refreshRemainingTempBets();\n        }\n      }\n    } catch (error) {\n      console.error('Error refreshing auth state:', error);\n    }\n  };\n  const changeLanguage = async lang => {\n    await trackActivity();\n    setLanguage(lang);\n    await AsyncStorage.setItem('app_language', lang);\n  };\n  return _jsxDEV(AppContext.Provider, {\n    value: {\n      user,\n      setUser,\n      coins,\n      addCoins,\n      waterDrops,\n      addWaterDrops,\n      bets,\n      addBet: addBetHandler,\n      getWeatherForDate,\n      isLoading,\n      remainingTempBets,\n      refreshRemainingTempBets,\n      login,\n      register,\n      logout,\n      refreshAuthState,\n      isAuthenticated,\n      getCurrentRainAmount,\n      getCurrentTemperature,\n      language,\n      setLanguage: changeLanguage,\n      evaluateBets,\n      isOnline,\n      checkForResolvedBets,\n      trackActivity,\n      updateAvatar,\n      claimDailyReward,\n      getNextDailyRewardTime,\n      getDailyRewardStreak\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 618,\n    columnNumber: 5\n  }, this);\n};\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","fetchWeatherData","fetchCurrentRainData","fetchCurrentTemperatureData","getLocalBets","startBackgroundVerification","cleanupOldBets","getRemainingTemperatureBets","getLocalRemainingTemperatureBets","showBetResolutionNotification","getAndClearRecentlyResolvedBets","loginUser","registerUser","getCurrentUser","isLoggedIn","logoutUser","updateUserCoins","updateUserBetStats","updateUserWaterDrops","updateUserAvatar","updateUserDailyReward","resolveBets","addBet","updateLastActivity","jsxDEV","_jsxDEV","AppContext","undefined","AppProvider","children","user","setUser","coins","setCoins","waterDrops","setWaterDrops","bets","setBets","isLoading","setIsLoading","remainingTempBets","setRemainingTempBets","isAuthenticated","setIsAuthenticated","language","setLanguage","isOnline","setIsOnline","trackActivity","initializeApp","savedLanguage","getItem","authenticated","currentUser","userProfile","id","userId","username","totalBets","wonBets","avatar","lastDailyReward","dailyRewardStreak","localBets","refreshRemainingTempBets","checkForResolvedBets","error","console","stopVerification","resolvedBets","coinsWon","length","prevBets","updatedBets","forEach","resolvedBet","index","findIndex","bet","timestamp","addCoins","filter","won","amount","newTotal","updatedUser","Object","assign","addWaterDrops","updateAvatar","avatarUrl","getDailyRewards","day","rewards","getNextDailyRewardTime","lastRewardDate","Date","nextRewardDate","setDate","getDate","getDailyRewardStreak","claimDailyReward","now","streak","canClaim","timeDiff","getTime","daysDiff","Math","floor","reward","toISOString","addBetHandler","betWithUser","user_id","savedBet","Error","option","getWeatherForDate","date","getCurrentRainAmount","getCurrentTemperature","remaining","evaluateBets","totalCoinsWon","recentlyResolvedBets","reduce","total","leverage","login","password","response","success","userBets","message","register","logout","refreshAuthState","changeLanguage","lang","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","useApp","context"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Bet, WeatherData, UserProfile, DailyReward } from '../types/weather';\nimport { fetchWeatherData, fetchCurrentRainData, fetchCurrentTemperatureData } from '../services/weatherService';\nimport { \n  getLocalBets, \n  startBackgroundVerification,\n  cleanupOldBets,\n  getRemainingTemperatureBets as getLocalRemainingTemperatureBets,\n  showBetResolutionNotification,\n  getAndClearRecentlyResolvedBets\n} from '../services/localBetService';\nimport { \n  loginUser, \n  registerUser, \n  getCurrentUser, \n  isLoggedIn, \n  logoutUser, \n  LoginResponse,\n  updateUserCoins,\n  updateUserBetStats,\n  updateUserWaterDrops,\n  updateUserAvatar,\n  updateUserDailyReward\n} from '../services/enhancedAuthService';\nimport { resolveBets } from '../utils/resolveBets';\nimport { addBet, getRemainingTemperatureBets } from '../services/localSupabaseService';\nimport { updateLastActivity } from '../services/plantService';\n\ninterface AppContextType {\n  user: UserProfile | null;\n  setUser: (user: UserProfile | null) => void;\n  coins: number;\n  addCoins: (amount: number) => void;\n  waterDrops: number;\n  addWaterDrops: (amount: number) => void;\n  bets: Bet[];\n  addBet: (bet: Bet) => Promise<void>;\n  getWeatherForDate: (date: string) => Promise<WeatherData>;\n  isLoading: boolean;\n  remainingTempBets: number;\n  refreshRemainingTempBets: () => Promise<void>;\n  login: (username: string, password: string) => Promise<LoginResponse>;\n  register: (username: string, password: string) => Promise<LoginResponse>;\n  logout: () => Promise<void>;\n  refreshAuthState: () => Promise<void>;\n  isAuthenticated: boolean;\n  getCurrentRainAmount: () => Promise<number>;\n  getCurrentTemperature: () => Promise<{min: number; max: number; current: number}>;\n  language: string;\n  setLanguage: (lang: string) => void;\n  evaluateBets: () => Promise<void>;\n  isOnline: boolean;\n  checkForResolvedBets: () => Promise<void>;\n  trackActivity: () => Promise<void>;\n  updateAvatar: (avatarUrl: string) => Promise<void>;\n  claimDailyReward: () => Promise<DailyReward | null>;\n  getNextDailyRewardTime: () => Promise<Date | null>;\n  getDailyRewardStreak: () => Promise<number>;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [coins, setCoins] = useState<number>(100);\n  const [waterDrops, setWaterDrops] = useState<number>(0);\n  const [bets, setBets] = useState<Bet[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [remainingTempBets, setRemainingTempBets] = useState<number>(2);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [language, setLanguage] = useState<string>('es');\n  const [isOnline, setIsOnline] = useState<boolean>(true);\n\n  // Track user activity\n  const trackActivity = async (): Promise<void> => {\n    await updateLastActivity();\n  };\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      setIsLoading(true);\n      try {\n        // Track initial activity\n        await trackActivity();\n\n        // Load language preference\n        const savedLanguage = await AsyncStorage.getItem('app_language');\n        if (savedLanguage) {\n          setLanguage(savedLanguage);\n        }\n\n        // Check if user is logged in\n        const authenticated = await isLoggedIn();\n        setIsAuthenticated(authenticated);\n        \n        if (authenticated) {\n          // Get current user\n          const currentUser = await getCurrentUser();\n          if (currentUser) {\n            // Convert auth user to UserProfile\n            const userProfile: UserProfile = {\n              id: currentUser.userId,\n              username: currentUser.username,\n              coins: currentUser.coins || 100,\n              waterDrops: currentUser.waterDrops || 0,\n              totalBets: currentUser.totalBets || 0,\n              wonBets: currentUser.wonBets || 0,\n              avatar: currentUser.avatar,\n              lastDailyReward: currentUser.lastDailyReward,\n              dailyRewardStreak: currentUser.dailyRewardStreak || 0\n            };\n            \n            setUser(userProfile);\n            setCoins(userProfile.coins);\n            setWaterDrops(userProfile.waterDrops || 0);\n          }\n        }\n\n        // Load bets\n        const localBets = await getLocalBets();\n        setBets(localBets);\n\n        // Check remaining temperature bets\n        await refreshRemainingTempBets();\n\n        // Clean up old bets\n        await cleanupOldBets();\n        \n        // Check for resolved bets when app initializes\n        await checkForResolvedBets();\n      } catch (error) {\n        console.error('Error initializing app:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeApp();\n\n    // Start background verification of bets\n    const stopVerification = startBackgroundVerification((resolvedBets, coinsWon) => {\n      if (resolvedBets.length > 0) {\n        // Update bets state with resolved bets\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        \n        // Add coins if any bets were won\n        if (coinsWon > 0) {\n          addCoins(coinsWon);\n          \n          // Update user bet stats\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n        }\n        \n        // Show notification about resolved bets\n        showBetResolutionNotification(resolvedBets, coinsWon);\n      }\n    });\n\n    return () => {\n      // Clean up verification process\n      stopVerification();\n    };\n  }, []);\n\n  const addCoins = async (amount: number) => {\n    const newTotal = coins + amount;\n    setCoins(newTotal);\n    \n    // Update user data\n    if (user) {\n      const updatedUser = { ...user, coins: newTotal };\n      setUser(updatedUser);\n      \n      // Update user coins in storage\n      await updateUserCoins(user.id, newTotal);\n    }\n    \n    // Track activity when adding coins\n    await trackActivity();\n  };\n\n  const addWaterDrops = async (amount: number) => {\n    const newTotal = waterDrops + amount;\n    setWaterDrops(newTotal);\n    \n    // Update user data\n    if (user) {\n      const updatedUser = { ...user, waterDrops: newTotal };\n      setUser(updatedUser);\n      \n      // Update user water drops in storage\n      await updateUserWaterDrops(user.id, amount);\n    }\n    \n    // Track activity when adding water drops\n    await trackActivity();\n  };\n\n  const updateAvatar = async (avatarUrl: string) => {\n    if (user) {\n      const updatedUser = { ...user, avatar: avatarUrl };\n      setUser(updatedUser);\n      \n      // Update user avatar in storage\n      await updateUserAvatar(user.id, avatarUrl);\n      \n      // Track activity when updating avatar\n      await trackActivity();\n    }\n  };\n\n  const getDailyRewards = (day: number): DailyReward => {\n    const rewards: DailyReward[] = [\n      { day: 1, coins: 5, waterDrops: 5 },\n      { day: 2, coins: 10, waterDrops: 0 },\n      { day: 3, coins: 0, waterDrops: 10 },\n      { day: 4, coins: 50, waterDrops: 0 },\n      { day: 5, coins: 50, waterDrops: 1 }\n    ];\n    \n    // Get reward for the current day, or default to day 1 if out of range\n    return rewards[day - 1] || rewards[0];\n  };\n\n  const getNextDailyRewardTime = async (): Promise<Date | null> => {\n    if (!user || !user.lastDailyReward) {\n      return null;\n    }\n    \n    const lastRewardDate = new Date(user.lastDailyReward);\n    const nextRewardDate = new Date(lastRewardDate);\n    nextRewardDate.setDate(nextRewardDate.getDate() + 1);\n    \n    return nextRewardDate;\n  };\n\n  const getDailyRewardStreak = async (): Promise<number> => {\n    if (!user) {\n      return 0;\n    }\n    \n    return user.dailyRewardStreak || 0;\n  };\n\n  const claimDailyReward = async (): Promise<DailyReward | null> => {\n    if (!user) {\n      return null;\n    }\n    \n    const now = new Date();\n    let streak = user.dailyRewardStreak || 0;\n    let canClaim = true;\n    \n    // Check if user has claimed a reward before\n    if (user.lastDailyReward) {\n      const lastRewardDate = new Date(user.lastDailyReward);\n      const timeDiff = now.getTime() - lastRewardDate.getTime();\n      const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n      \n      // If less than 24 hours have passed, can't claim\n      if (daysDiff < 1) {\n        canClaim = false;\n      } \n      // If more than 48 hours have passed, reset streak\n      else if (daysDiff > 1) {\n        streak = 0;\n      }\n    }\n    \n    if (!canClaim) {\n      return null;\n    }\n    \n    // Increment streak (max 5)\n    streak = (streak % 5) + 1;\n    \n    // Get reward for current streak day\n    const reward = getDailyRewards(streak);\n    \n    // Add rewards\n    if (reward.coins > 0) {\n      await addCoins(reward.coins);\n    }\n    \n    if (reward.waterDrops > 0) {\n      await addWaterDrops(reward.waterDrops);\n    }\n    \n    // Update user's last reward date and streak\n    await updateUserDailyReward(user.id, now.toISOString(), streak);\n    \n    // Update local user state\n    setUser({\n      ...user,\n      lastDailyReward: now.toISOString(),\n      dailyRewardStreak: streak\n    });\n    \n    return reward;\n  };\n\n  const addBetHandler = async (bet: Bet) => {\n    try {\n      // Track activity when placing a bet\n      await trackActivity();\n      \n      // Deduct coins for the bet\n      await addCoins(-bet.coins);\n      \n      // Add user_id to bet if authenticated\n      const betWithUser = {\n        ...bet,\n        user_id: user?.id || 'anonymous'\n      };\n      \n      // Save bet using the local service\n      const savedBet = await addBet(betWithUser);\n      \n      if (!savedBet) {\n        throw new Error('Error al guardar la apuesta');\n      }\n      \n      // Update bets state\n      setBets(prevBets => [savedBet, ...prevBets]);\n      \n      // Refresh remaining temperature bets if it's a temperature bet\n      if (bet.option === 'temp_min' || bet.option === 'temp_max') {\n        await refreshRemainingTempBets();\n      }\n      \n      // Update user bet stats\n      if (user) {\n        await updateUserBetStats(user.id, false);\n      }\n    } catch (error) {\n      // If there's an error, refund the coins\n      await addCoins(bet.coins);\n      throw error;\n    }\n  };\n\n  const getWeatherForDate = async (date: string): Promise<WeatherData> => {\n    // Track activity when getting weather data\n    await trackActivity();\n    return await fetchWeatherData(date);\n  };\n\n  const getCurrentRainAmount = async (): Promise<number> => {\n    // Track activity when getting current rain data\n    await trackActivity();\n    return await fetchCurrentRainData();\n  };\n\n  const getCurrentTemperature = async (): Promise<{min: number; max: number; current: number}> => {\n    // Track activity when getting current temperature data\n    await trackActivity();\n    return await fetchCurrentTemperatureData();\n  };\n\n  const refreshRemainingTempBets = async (): Promise<void> => {\n    try {\n      // Track activity when refreshing temperature bets\n      await trackActivity();\n      \n      // Use the local service to get remaining temperature bets\n      const remaining = user ? \n        await getRemainingTemperatureBets(user.id) : \n        await getLocalRemainingTemperatureBets();\n      \n      setRemainingTempBets(remaining);\n    } catch (error) {\n      console.error('Error refreshing remaining temperature bets:', error);\n    }\n  };\n\n  const evaluateBets = async (): Promise<void> => {\n    try {\n      // Track activity when evaluating bets\n      await trackActivity();\n      \n      const { resolvedBets, totalCoinsWon } = await resolveBets();\n      \n      // Update bets state with resolved bets\n      if (resolvedBets.length > 0) {\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        \n        // Add coins if any bets were won\n        if (totalCoinsWon > 0) {\n          addCoins(totalCoinsWon);\n          \n          // Update user bet stats\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n          \n          // Show notification about resolved bets\n          showBetResolutionNotification(resolvedBets, totalCoinsWon);\n        }\n      }\n    } catch (error) {\n      console.error('Error evaluating bets:', error);\n    }\n  };\n  \n  const checkForResolvedBets = async (): Promise<void> => {\n    try {\n      // Track activity when checking for resolved bets\n      await trackActivity();\n      \n      // First, check if there are any recently resolved bets\n      const recentlyResolvedBets = await getAndClearRecentlyResolvedBets();\n      \n      if (recentlyResolvedBets.length > 0) {\n        // Calculate total coins won\n        const totalCoinsWon = recentlyResolvedBets\n          .filter(bet => bet.won)\n          .reduce((total, bet) => total + (bet.coins * bet.leverage), 0);\n        \n        // Show notification about resolved bets\n        if (totalCoinsWon > 0) {\n          showBetResolutionNotification(recentlyResolvedBets, totalCoinsWon);\n        }\n      }\n      \n      // Then, evaluate any pending bets\n      await evaluateBets();\n    } catch (error) {\n      console.error('Error checking for resolved bets:', error);\n    }\n  };\n\n  const login = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      // Track activity when logging in\n      await trackActivity();\n      \n      const response = await loginUser(username, password);\n      \n      if (response.success && response.userId && response.username) {\n        // Get current user with all data\n        const currentUser = await getCurrentUser();\n        \n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          // Update state\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n          \n          // Load user's bets\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          \n          // Refresh remaining temperature bets\n          await refreshRemainingTempBets();\n        }\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in login:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al iniciar sesión. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n\n  const register = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      // Track activity when registering\n      await trackActivity();\n      \n      const response = await registerUser(username, password);\n      \n      if (response.success && response.userId && response.username) {\n        // Get current user with all data\n        const currentUser = await getCurrentUser();\n        \n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          // Update state\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n        }\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in register:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al registrarse. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      // Track activity when logging out\n      await trackActivity();\n      \n      await logoutUser();\n      setUser(null);\n      setCoins(0);\n      setWaterDrops(0);\n      setIsAuthenticated(false);\n      setBets([]);\n    } catch (error) {\n      console.error('Error in logout:', error);\n    }\n  };\n\n  const refreshAuthState = async (): Promise<void> => {\n    try {\n      // Track activity when refreshing auth state\n      await trackActivity();\n      \n      const authenticated = await isLoggedIn();\n      setIsAuthenticated(authenticated);\n      \n      if (authenticated) {\n        const currentUser = await getCurrentUser();\n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          \n          // Load user's bets\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          \n          // Refresh remaining temperature bets\n          await refreshRemainingTempBets();\n        }\n      }\n    } catch (error) {\n      console.error('Error refreshing auth state:', error);\n    }\n  };\n\n  const changeLanguage = async (lang: string) => {\n    // Track activity when changing language\n    await trackActivity();\n    \n    setLanguage(lang);\n    await AsyncStorage.setItem('app_language', lang);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        user,\n        setUser,\n        coins,\n        addCoins,\n        waterDrops,\n        addWaterDrops,\n        bets,\n        addBet: addBetHandler,\n        getWeatherForDate,\n        isLoading,\n        remainingTempBets,\n        refreshRemainingTempBets,\n        login,\n        register,\n        logout,\n        refreshAuthState,\n        isAuthenticated,\n        getCurrentRainAmount,\n        getCurrentTemperature,\n        language,\n        setLanguage: changeLanguage,\n        evaluateBets,\n        isOnline,\n        checkForResolvedBets,\n        trackActivity,\n        updateAvatar,\n        claimDailyReward,\n        getNextDailyRewardTime,\n        getDailyRewardStreak\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useApp = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}