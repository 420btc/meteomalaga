{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nconst RAIN_DATA_CACHE_KEY = 'rain_data_cache';\nconst TEMP_DATA_CACHE_KEY = 'temp_data_cache';\nconst WIND_DATA_CACHE_KEY = 'wind_data_cache';\nconst HISTORICAL_DATA_CACHE_KEY = 'historical_data_cache';\nconst CACHE_EXPIRY_KEY = 'weather_cache_expiry';\nconst CACHE_DURATION = 5 * 60 * 1000;\nconst OPENWEATHER_API_KEY = '5ae0c9a3137234e18e032e3d6024629e';\nconst MALAGA_LAT = 36.7213;\nconst MALAGA_LON = -4.4213;\nexport const isWithinBettingWindow = () => {\n  return true;\n};\nexport const getTimeUntilNextBettingWindow = () => {\n  try {\n    const now = new Date();\n    const currentHour = now.getHours();\n    const currentMinute = now.getMinutes();\n    const currentSecond = now.getSeconds();\n    if (currentHour === 23 || currentHour === 0) {\n      if (currentHour === 23) {\n        const minutesLeft = 59 - currentMinute;\n        const secondsLeft = 59 - currentSecond;\n        return {\n          hours: 0,\n          minutes: minutesLeft,\n          seconds: secondsLeft\n        };\n      } else {\n        const minutesLeft = 59 - currentMinute;\n        const secondsLeft = 59 - currentSecond;\n        return {\n          hours: 0,\n          minutes: minutesLeft,\n          seconds: secondsLeft\n        };\n      }\n    } else {\n      let hoursLeft;\n      if (currentHour < 23) {\n        hoursLeft = 23 - currentHour - 1;\n      } else {\n        hoursLeft = 23 + (24 - currentHour) - 1;\n      }\n      const minutesLeft = 59 - currentMinute;\n      const secondsLeft = 59 - currentSecond;\n      return {\n        hours: hoursLeft,\n        minutes: minutesLeft,\n        seconds: secondsLeft\n      };\n    }\n  } catch (error) {\n    console.error('Error calculating time until next betting window:', error);\n    return {\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n  }\n};\nexport const isWithinBettingWindowSync = () => {\n  return isWithinBettingWindow();\n};\nexport const getTimeUntilNextBettingWindowSync = () => {\n  try {\n    return getTimeUntilNextBettingWindow();\n  } catch (error) {\n    console.error('Error in getTimeUntilNextBettingWindowSync:', error);\n    return {\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n  }\n};\nexport const getCurrentSpainHour = () => {\n  try {\n    const now = new Date();\n    return now.getHours();\n  } catch (error) {\n    console.error('Error getting current Spain hour:', error);\n    return 0;\n  }\n};\nexport const isDaylightSavingTime = () => {\n  try {\n    const now = new Date();\n    const jan = new Date(now.getFullYear(), 0, 1);\n    const jul = new Date(now.getFullYear(), 6, 1);\n    return jan.getTimezoneOffset() !== jul.getTimezoneOffset();\n  } catch (error) {\n    console.error('Error checking daylight saving time:', error);\n    return false;\n  }\n};\nexport const getWeatherForDate = async date => {\n  try {\n    const cachedData = await getCachedWeatherData();\n    if (cachedData) {\n      return cachedData;\n    }\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Error fetching weather data');\n    }\n    const data = await response.json();\n    const weatherData = {\n      temperature: data.main.temp,\n      tempMin: data.main.temp_min,\n      tempMax: data.main.temp_max,\n      humidity: data.main.humidity,\n      windSpeed: data.wind.speed * 3.6,\n      windDirection: data.wind.deg,\n      description: data.weather[0].description,\n      icon: data.weather[0].icon,\n      rainAmount: data.rain && data.rain['1h'] ? data.rain['1h'] : 0,\n      date: date,\n      timestamp: new Date().toISOString()\n    };\n    await cacheWeatherData(weatherData);\n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    const expiredCache = await getCachedWeatherData(true);\n    if (expiredCache) {\n      return expiredCache;\n    }\n    return getSimulatedWeatherData(date);\n  }\n};\nexport const fetchWeatherData = getWeatherForDate;\nexport const fetchCurrentRainData = async () => {\n  try {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Error fetching rain data');\n    }\n    const data = await response.json();\n    let rainAmount = 0;\n    if (data.rain && data.rain['1h']) {\n      rainAmount = data.rain['1h'];\n    }\n    const rainData = {\n      amount: rainAmount,\n      timestamp: new Date().toISOString()\n    };\n    await AsyncStorage.setItem(RAIN_DATA_CACHE_KEY, JSON.stringify(rainData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    return rainAmount;\n  } catch (error) {\n    console.error('Error fetching rain data:', error);\n    const cachedData = await AsyncStorage.getItem(RAIN_DATA_CACHE_KEY);\n    if (cachedData) {\n      const rainData = JSON.parse(cachedData);\n      return rainData.amount;\n    }\n    return Math.random() > 0.7 ? Math.random() * 5 : 0;\n  }\n};\nexport const fetchCurrentTemperatureData = async () => {\n  try {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Error fetching temperature data');\n    }\n    const data = await response.json();\n    const tempData = {\n      current: data.main.temp,\n      min: data.main.temp_min,\n      max: data.main.temp_max,\n      timestamp: new Date().toISOString()\n    };\n    await AsyncStorage.setItem(TEMP_DATA_CACHE_KEY, JSON.stringify(tempData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    return tempData;\n  } catch (error) {\n    console.error('Error fetching temperature data:', error);\n    const cachedData = await AsyncStorage.getItem(TEMP_DATA_CACHE_KEY);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n    const currentTemp = 15 + Math.random() * 15;\n    return {\n      current: currentTemp,\n      min: currentTemp - (2 + Math.random() * 3),\n      max: currentTemp + (2 + Math.random() * 3),\n      timestamp: new Date().toISOString()\n    };\n  }\n};\nexport const fetchCurrentWindData = async () => {\n  try {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Error fetching wind data');\n    }\n    const data = await response.json();\n    const windSpeedMps = data.wind.speed;\n    const windSpeedKmh = windSpeedMps * 3.6;\n    const maxWindSpeedKmh = windSpeedKmh * (1 + Math.random() * 0.3);\n    const windData = {\n      current: Math.round(windSpeedKmh * 10) / 10,\n      max: Math.round(maxWindSpeedKmh * 10) / 10,\n      direction: data.wind.deg,\n      timestamp: new Date().toISOString()\n    };\n    await AsyncStorage.setItem(WIND_DATA_CACHE_KEY, JSON.stringify(windData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    return windData;\n  } catch (error) {\n    console.error('Error fetching wind data:', error);\n    const cachedData = await AsyncStorage.getItem(WIND_DATA_CACHE_KEY);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n    const currentWind = 5 + Math.random() * 20;\n    return {\n      current: Math.round(currentWind * 10) / 10,\n      max: Math.round(currentWind * (1 + Math.random() * 0.3) * 10) / 10,\n      direction: Math.floor(Math.random() * 360),\n      timestamp: new Date().toISOString()\n    };\n  }\n};\nexport const fetchForecastData = async () => {\n  try {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Error fetching forecast data');\n    }\n    const data = await response.json();\n    return data.list.map(item => ({\n      date: new Date(item.dt * 1000).toISOString(),\n      temperature: item.main.temp,\n      tempMin: item.main.temp_min,\n      tempMax: item.main.temp_max,\n      humidity: item.main.humidity,\n      windSpeed: item.wind.speed * 3.6,\n      windDirection: item.wind.deg,\n      description: item.weather[0].description,\n      icon: item.weather[0].icon,\n      rainAmount: item.rain && item.rain['3h'] ? item.rain['3h'] : 0\n    }));\n  } catch (error) {\n    console.error('Error fetching forecast data:', error);\n    return [];\n  }\n};\nexport const fetchHourlyHistoricalData = async (hours = 24) => {\n  try {\n    const cachedData = await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);\n    const cacheExpiry = await AsyncStorage.getItem(CACHE_EXPIRY_KEY);\n    if (cachedData && cacheExpiry && new Date().getTime() < parseInt(cacheExpiry)) {\n      const parsedData = JSON.parse(cachedData);\n      if (parsedData.rainData.length >= hours && parsedData.tempData.length >= hours && parsedData.windData.length >= hours && parsedData.labels.length >= hours) {\n        return {\n          rainData: parsedData.rainData.slice(0, hours),\n          tempData: parsedData.tempData.slice(0, hours),\n          windData: parsedData.windData.slice(0, hours),\n          labels: parsedData.labels.slice(0, hours)\n        };\n      }\n    }\n    const currentResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n    if (!currentResponse.ok) {\n      throw new Error('Error fetching current weather data');\n    }\n    const currentData = await currentResponse.json();\n    const forecastResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n    if (!forecastResponse.ok) {\n      throw new Error('Error fetching forecast data');\n    }\n    const forecastData = await forecastResponse.json();\n    const rainData = [];\n    const tempData = [];\n    const windData = [];\n    const labels = [];\n    const timestamps = [];\n    const now = new Date();\n    rainData.push(currentData.rain && currentData.rain['1h'] ? currentData.rain['1h'] : 0);\n    tempData.push(currentData.main.temp);\n    windData.push(currentData.wind.speed * 3.6);\n    labels.push(now.getHours().toString() + 'h');\n    timestamps.push(now.getTime());\n    const forecastList = forecastData.list;\n    forecastList.sort((a, b) => b.dt - a.dt);\n    for (const item of forecastList) {\n      const itemDate = new Date(item.dt * 1000);\n      const hoursDiff = (now.getTime() - itemDate.getTime()) / (1000 * 60 * 60);\n      if (hoursDiff > 0 && hoursDiff <= hours) {\n        const itemHour = itemDate.getHours();\n        if (!labels.includes(itemHour.toString() + 'h')) {\n          rainData.push(item.rain && item.rain['3h'] ? item.rain['3h'] / 3 : 0);\n          tempData.push(item.main.temp);\n          windData.push(item.wind.speed * 3.6);\n          labels.push(itemHour.toString() + 'h');\n          timestamps.push(itemDate.getTime());\n        }\n      }\n    }\n    if (rainData.length < hours) {\n      try {\n        const airPollutionResponse = await fetch(`https://api.openweathermap.org/data/2.5/air_pollution/history?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&start=${Math.floor(now.getTime() / 1000 - hours * 3600)}&end=${Math.floor(now.getTime() / 1000)}&appid=${OPENWEATHER_API_KEY}`);\n        if (airPollutionResponse.ok) {\n          const airPollutionData = await airPollutionResponse.json();\n          airPollutionData.list.sort((a, b) => b.dt - a.dt);\n          for (const item of airPollutionData.list) {\n            const itemDate = new Date(item.dt * 1000);\n            const itemHour = itemDate.getHours();\n            if (!labels.includes(itemHour.toString() + 'h')) {\n              let tempVariation = 0;\n              if (itemHour >= 0 && itemHour < 6) {\n                tempVariation = -2;\n              } else if (itemHour >= 6 && itemHour < 12) {\n                tempVariation = 0;\n              } else if (itemHour >= 12 && itemHour < 18) {\n                tempVariation = 2;\n              } else {\n                tempVariation = 0;\n              }\n              rainData.push(0);\n              tempData.push(currentData.main.temp + tempVariation);\n              windData.push(currentData.wind.speed * 3.6 * (0.7 + Math.random() * 0.6));\n              labels.push(itemHour.toString() + 'h');\n              timestamps.push(itemDate.getTime());\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching air pollution data:', error);\n      }\n    }\n    while (rainData.length < hours) {\n      const missingHour = (now.getHours() - rainData.length + 24) % 24;\n      let tempVariation = 0;\n      if (missingHour >= 0 && missingHour < 6) {\n        tempVariation = -2 - Math.random();\n      } else if (missingHour >= 6 && missingHour < 12) {\n        tempVariation = -1 + missingHour * 0.2;\n      } else if (missingHour >= 12 && missingHour < 18) {\n        tempVariation = 2 - (missingHour - 12) * 0.2;\n      } else {\n        tempVariation = 0 - (missingHour - 18) * 0.3;\n      }\n      let windVariation = 1.0;\n      if (missingHour >= 10 && missingHour < 16) {\n        windVariation = 1.2 + Math.random() * 0.3;\n      } else if (missingHour >= 16 && missingHour < 22) {\n        windVariation = 1.0 + Math.random() * 0.2;\n      } else {\n        windVariation = 0.7 + Math.random() * 0.3;\n      }\n      let rainAmount = 0;\n      if (currentData.rain && currentData.rain['1h']) {\n        if (missingHour >= 6 && missingHour < 10 || missingHour >= 16 && missingHour < 20) {\n          rainAmount = currentData.rain['1h'] * (0.5 + Math.random());\n        } else {\n          rainAmount = currentData.rain['1h'] * (0.2 + Math.random() * 0.5);\n        }\n      }\n      rainData.push(Math.round(rainAmount * 10) / 10);\n      tempData.push(Math.round((currentData.main.temp + tempVariation) * 10) / 10);\n      windData.push(Math.round(currentData.wind.speed * 3.6 * windVariation * 10) / 10);\n      labels.push(missingHour.toString() + 'h');\n      const missingDate = new Date(now);\n      missingDate.setHours(missingHour);\n      timestamps.push(missingDate.getTime());\n    }\n    const sortedIndices = timestamps.map((timestamp, index) => ({\n      timestamp,\n      index\n    })).sort((a, b) => a.timestamp - b.timestamp).map(item => item.index);\n    const sortedRainData = sortedIndices.map(index => rainData[index]);\n    const sortedTempData = sortedIndices.map(index => tempData[index]);\n    const sortedWindData = sortedIndices.map(index => windData[index]);\n    const sortedLabels = sortedIndices.map(index => labels[index]);\n    const result = {\n      rainData: sortedRainData.slice(-hours),\n      tempData: sortedTempData.slice(-hours),\n      windData: sortedWindData.slice(-hours),\n      labels: sortedLabels.slice(-hours)\n    };\n    await AsyncStorage.setItem(HISTORICAL_DATA_CACHE_KEY, JSON.stringify(result));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    return result;\n  } catch (error) {\n    console.error('Error fetching hourly historical data:', error);\n    const cachedData = await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);\n    if (cachedData) {\n      const parsedData = JSON.parse(cachedData);\n      return {\n        rainData: parsedData.rainData.slice(0, hours),\n        tempData: parsedData.tempData.slice(0, hours),\n        windData: parsedData.windData.slice(0, hours),\n        labels: parsedData.labels.slice(0, hours)\n      };\n    }\n    const rainData = [];\n    const tempData = [];\n    const windData = [];\n    const labels = [];\n    const now = new Date();\n    const currentHour = now.getHours();\n    let currentTemp = 20;\n    let currentWind = 10;\n    let isRaining = false;\n    try {\n      const currentResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);\n      if (currentResponse.ok) {\n        const currentData = await currentResponse.json();\n        currentTemp = currentData.main.temp;\n        currentWind = currentData.wind.speed * 3.6;\n        isRaining = currentData.rain && currentData.rain['1h'] > 0;\n      }\n    } catch (e) {}\n    for (let i = hours - 1; i >= 0; i--) {\n      const hourOfDay = (currentHour - i + 24) % 24;\n      let tempVariation = 0;\n      if (hourOfDay >= 0 && hourOfDay < 6) {\n        tempVariation = -2 - Math.random();\n      } else if (hourOfDay >= 6 && hourOfDay < 12) {\n        tempVariation = -1 + hourOfDay * 0.2;\n      } else if (hourOfDay >= 12 && hourOfDay < 18) {\n        tempVariation = 2 - (hourOfDay - 12) * 0.2;\n      } else {\n        tempVariation = 0 - (hourOfDay - 18) * 0.3;\n      }\n      let windVariation = 1.0;\n      if (hourOfDay >= 10 && hourOfDay < 16) {\n        windVariation = 1.2 + Math.random() * 0.3;\n      } else if (hourOfDay >= 16 && hourOfDay < 22) {\n        windVariation = 1.0 + Math.random() * 0.2;\n      } else {\n        windVariation = 0.7 + Math.random() * 0.3;\n      }\n      let rainAmount = 0;\n      if (isRaining) {\n        if (hourOfDay >= 6 && hourOfDay < 10 || hourOfDay >= 16 && hourOfDay < 20) {\n          rainAmount = 1 + Math.random() * 2;\n        } else {\n          rainAmount = Math.random() * 1.5;\n        }\n      } else if (Math.random() > 0.8) {\n        rainAmount = Math.random() * 0.5;\n      }\n      tempData.push(Math.round((currentTemp + tempVariation) * 10) / 10);\n      windData.push(Math.round(currentWind * windVariation * 10) / 10);\n      rainData.push(Math.round(rainAmount * 10) / 10);\n      labels.push(hourOfDay.toString() + 'h');\n    }\n    return {\n      rainData,\n      tempData,\n      windData,\n      labels\n    };\n  }\n};\nconst cacheWeatherData = async data => {\n  try {\n    await AsyncStorage.setItem('weather_data_cache', JSON.stringify(data));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n  } catch (error) {\n    console.error('Error caching weather data:', error);\n  }\n};\nconst getCachedWeatherData = async (ignoreExpiry = false) => {\n  try {\n    const cachedData = await AsyncStorage.getItem('weather_data_cache');\n    const cacheExpiry = await AsyncStorage.getItem(CACHE_EXPIRY_KEY);\n    if (!cachedData) {\n      return null;\n    }\n    if (!ignoreExpiry && cacheExpiry && new Date().getTime() > parseInt(cacheExpiry)) {\n      return null;\n    }\n    return JSON.parse(cachedData);\n  } catch (error) {\n    console.error('Error getting cached weather data:', error);\n    return null;\n  }\n};\nconst getSimulatedWeatherData = date => {\n  const dateObj = new Date(date);\n  const month = dateObj.getMonth();\n  let baseTemp = 15;\n  if (month >= 5 && month <= 8) {\n    baseTemp = 25;\n  } else if (month >= 9 || month <= 2) {\n    baseTemp = 12;\n  }\n  const temp = baseTemp + (Math.random() * 10 - 5);\n  const tempMin = temp - (2 + Math.random() * 3);\n  const tempMax = temp + (2 + Math.random() * 3);\n  let rainProbability = 0.2;\n  if (month >= 9 && month <= 11) {\n    rainProbability = 0.4;\n  } else if (month >= 0 && month <= 2) {\n    rainProbability = 0.5;\n  } else if (month >= 3 && month <= 5) {\n    rainProbability = 0.3;\n  }\n  const isRaining = Math.random() < rainProbability;\n  const rainAmount = isRaining ? Math.random() * 10 : 0;\n  const windSpeed = 5 + Math.random() * 20;\n  return {\n    temperature: Math.round(temp * 10) / 10,\n    tempMin: Math.round(tempMin * 10) / 10,\n    tempMax: Math.round(tempMax * 10) / 10,\n    humidity: Math.floor(40 + Math.random() * 40),\n    windSpeed: Math.round(windSpeed * 10) / 10,\n    windDirection: Math.floor(Math.random() * 360),\n    description: isRaining ? 'lluvia' : Math.random() > 0.7 ? 'parcialmente nublado' : 'despejado',\n    icon: isRaining ? '10d' : Math.random() > 0.7 ? '03d' : '01d',\n    rainAmount: Math.round(rainAmount * 100) / 100,\n    date: date,\n    timestamp: new Date().toISOString(),\n    simulated: true\n  };\n};\nexport const clearWeatherCache = async () => {\n  try {\n    await AsyncStorage.removeItem('weather_data_cache');\n    await AsyncStorage.removeItem(RAIN_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(TEMP_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(WIND_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(HISTORICAL_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(CACHE_EXPIRY_KEY);\n  } catch (error) {\n    console.error('Error clearing weather cache:', error);\n  }\n};\nexport const fetchRainViewerData = async () => {\n  try {\n    const response = await fetch('https://api.rainviewer.com/public/weather-maps.json');\n    if (!response.ok) {\n      throw new Error('Error fetching RainViewer data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching RainViewer data:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["AsyncStorage","RAIN_DATA_CACHE_KEY","TEMP_DATA_CACHE_KEY","WIND_DATA_CACHE_KEY","HISTORICAL_DATA_CACHE_KEY","CACHE_EXPIRY_KEY","CACHE_DURATION","OPENWEATHER_API_KEY","MALAGA_LAT","MALAGA_LON","isWithinBettingWindow","getTimeUntilNextBettingWindow","now","Date","currentHour","getHours","currentMinute","getMinutes","currentSecond","getSeconds","minutesLeft","secondsLeft","hours","minutes","seconds","hoursLeft","error","console","isWithinBettingWindowSync","getTimeUntilNextBettingWindowSync","getCurrentSpainHour","isDaylightSavingTime","jan","getFullYear","jul","getTimezoneOffset","getWeatherForDate","date","cachedData","getCachedWeatherData","response","fetch","ok","Error","data","json","weatherData","temperature","main","temp","tempMin","temp_min","tempMax","temp_max","humidity","windSpeed","wind","speed","windDirection","deg","description","weather","icon","rainAmount","rain","timestamp","toISOString","cacheWeatherData","expiredCache","getSimulatedWeatherData","fetchWeatherData","fetchCurrentRainData","rainData","amount","setItem","JSON","stringify","getTime","toString","getItem","parse","Math","random","fetchCurrentTemperatureData","tempData","current","min","max","currentTemp","fetchCurrentWindData","windSpeedMps","windSpeedKmh","maxWindSpeedKmh","windData","round","direction","currentWind","floor","fetchForecastData","list","map","item","dt","fetchHourlyHistoricalData","cacheExpiry","parseInt","parsedData","length","labels","slice","currentResponse","currentData","forecastResponse","forecastData","timestamps","push","forecastList","sort","a","b","itemDate","hoursDiff","itemHour","includes","airPollutionResponse","airPollutionData","tempVariation","missingHour","windVariation","missingDate","setHours","sortedIndices","index","sortedRainData","sortedTempData","sortedWindData","sortedLabels","result","isRaining","e","i","hourOfDay","ignoreExpiry","dateObj","month","getMonth","baseTemp","rainProbability","simulated","clearWeatherCache","removeItem","fetchRainViewerData"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/weatherService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Claves para almacenamiento en caché\nconst RAIN_DATA_CACHE_KEY = 'rain_data_cache';\nconst TEMP_DATA_CACHE_KEY = 'temp_data_cache';\nconst WIND_DATA_CACHE_KEY = 'wind_data_cache';\nconst HISTORICAL_DATA_CACHE_KEY = 'historical_data_cache';\nconst CACHE_EXPIRY_KEY = 'weather_cache_expiry';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutos en milisegundos (reducido de 30 minutos)\n\n// API key para OpenWeatherMap\nconst OPENWEATHER_API_KEY = '5ae0c9a3137234e18e032e3d6024629e';\n\n// Coordenadas de Málaga\nconst MALAGA_LAT = 36.7213;\nconst MALAGA_LON = -4.4213;\n\n// Función para verificar si estamos dentro de la ventana de apuestas (23:00-00:00 CET/CEST)\nexport const isWithinBettingWindow = (): boolean => {\n  // Permitir apuestas en cualquier momento\n  return true;\n};\n\n// Función para calcular el tiempo hasta la próxima ventana de apuestas o hasta que se cierre la ventana actual\nexport const getTimeUntilNextBettingWindow = (): { hours: number; minutes: number; seconds: number } => {\n  try {\n    const now = new Date();\n    const currentHour = now.getHours();\n    const currentMinute = now.getMinutes();\n    const currentSecond = now.getSeconds();\n    \n    // Si estamos dentro de la ventana de apuestas (23:00-00:00)\n    if (currentHour === 23 || currentHour === 0) {\n      // Si estamos a las 23, calcular tiempo hasta las 00:00\n      if (currentHour === 23) {\n        const minutesLeft = 59 - currentMinute;\n        const secondsLeft = 59 - currentSecond;\n        \n        return {\n          hours: 0,\n          minutes: minutesLeft,\n          seconds: secondsLeft\n        };\n      } \n      // Si estamos a las 00, calcular tiempo hasta las 01:00 (fin de la ventana)\n      else {\n        const minutesLeft = 59 - currentMinute;\n        const secondsLeft = 59 - currentSecond;\n        \n        return {\n          hours: 0,\n          minutes: minutesLeft,\n          seconds: secondsLeft\n        };\n      }\n    } else {\n      // Calcular tiempo hasta las 23:00 (apertura de la ventana)\n      let hoursLeft;\n      if (currentHour < 23) {\n        // Hoy, antes de las 23:00\n        hoursLeft = 23 - currentHour - 1; // -1 porque contamos minutos restantes\n      } else {\n        // Después de medianoche, esperar hasta las 23:00 del día siguiente\n        hoursLeft = 23 + (24 - currentHour) - 1; // -1 porque contamos minutos restantes\n      }\n      \n      const minutesLeft = 59 - currentMinute;\n      const secondsLeft = 59 - currentSecond;\n      \n      return {\n        hours: hoursLeft,\n        minutes: minutesLeft,\n        seconds: secondsLeft\n      };\n    }\n  } catch (error) {\n    console.error('Error calculating time until next betting window:', error);\n    return { hours: 0, minutes: 0, seconds: 0 };\n  }\n};\n\n// Versión sincrónica para componentes de UI (mantenida por compatibilidad)\nexport const isWithinBettingWindowSync = (): boolean => {\n  return isWithinBettingWindow();\n};\n\n// Versión sincrónica para componentes de UI\nexport const getTimeUntilNextBettingWindowSync = (): { hours?: number; minutes?: number; seconds?: number } => {\n  try {\n    return getTimeUntilNextBettingWindow();\n  } catch (error) {\n    console.error('Error in getTimeUntilNextBettingWindowSync:', error);\n    return { hours: 0, minutes: 0, seconds: 0 };\n  }\n};\n\n// Función para obtener la hora actual en España (CET/CEST)\nexport const getCurrentSpainHour = (): number => {\n  try {\n    const now = new Date();\n    return now.getHours();\n  } catch (error) {\n    console.error('Error getting current Spain hour:', error);\n    return 0;\n  }\n};\n\n// Función para verificar si estamos en horario de verano\nexport const isDaylightSavingTime = (): boolean => {\n  try {\n    const now = new Date();\n    const jan = new Date(now.getFullYear(), 0, 1);\n    const jul = new Date(now.getFullYear(), 6, 1);\n    \n    // Si la diferencia de offset entre enero y julio es 0, no hay cambio de horario\n    return jan.getTimezoneOffset() !== jul.getTimezoneOffset();\n  } catch (error) {\n    console.error('Error checking daylight saving time:', error);\n    return false;\n  }\n};\n\n// Función para obtener datos meteorológicos para una fecha específica\nexport const getWeatherForDate = async (date: string): Promise<any> => {\n  try {\n    // Verificar si tenemos datos en caché\n    const cachedData = await getCachedWeatherData();\n    if (cachedData) {\n      return cachedData;\n    }\n    \n    // Si no hay caché o está expirada, obtener datos nuevos\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching weather data');\n    }\n    \n    const data = await response.json();\n    \n    // Procesar y almacenar los datos\n    const weatherData = {\n      temperature: data.main.temp,\n      tempMin: data.main.temp_min,\n      tempMax: data.main.temp_max,\n      humidity: data.main.humidity,\n      windSpeed: data.wind.speed * 3.6, // Convertir de m/s a km/h\n      windDirection: data.wind.deg,\n      description: data.weather[0].description,\n      icon: data.weather[0].icon,\n      rainAmount: data.rain && data.rain['1h'] ? data.rain['1h'] : 0,\n      date: date,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Guardar en caché\n    await cacheWeatherData(weatherData);\n    \n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const expiredCache = await getCachedWeatherData(true);\n    if (expiredCache) {\n      return expiredCache;\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    return getSimulatedWeatherData(date);\n  }\n};\n\n// Exportar getWeatherForDate como fetchWeatherData para compatibilidad con AppContext\nexport const fetchWeatherData = getWeatherForDate;\n\n// Función para obtener datos actuales de lluvia\nexport const fetchCurrentRainData = async (): Promise<number> => {\n  try {\n    // Forzar actualización de datos en tiempo real\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching rain data');\n    }\n    \n    const data = await response.json();\n    \n    // Extraer datos de lluvia (mm en la última hora)\n    let rainAmount = 0;\n    if (data.rain && data.rain['1h']) {\n      rainAmount = data.rain['1h'];\n    }\n    \n    // Guardar en caché\n    const rainData = { amount: rainAmount, timestamp: new Date().toISOString() };\n    await AsyncStorage.setItem(RAIN_DATA_CACHE_KEY, JSON.stringify(rainData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return rainAmount;\n  } catch (error) {\n    console.error('Error fetching rain data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(RAIN_DATA_CACHE_KEY);\n    if (cachedData) {\n      const rainData = JSON.parse(cachedData);\n      return rainData.amount;\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    return Math.random() > 0.7 ? Math.random() * 5 : 0;\n  }\n};\n\n// Función para obtener datos actuales de temperatura\nexport const fetchCurrentTemperatureData = async (): Promise<{ current: number, min: number, max: number }> => {\n  try {\n    // Forzar actualización de datos en tiempo real\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching temperature data');\n    }\n    \n    const data = await response.json();\n    \n    // Extraer datos de temperatura\n    const tempData = {\n      current: data.main.temp,\n      min: data.main.temp_min,\n      max: data.main.temp_max,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Guardar en caché\n    await AsyncStorage.setItem(TEMP_DATA_CACHE_KEY, JSON.stringify(tempData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return tempData;\n  } catch (error) {\n    console.error('Error fetching temperature data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(TEMP_DATA_CACHE_KEY);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    const currentTemp = 15 + Math.random() * 15; // Entre 15 y 30 grados\n    return {\n      current: currentTemp,\n      min: currentTemp - (2 + Math.random() * 3),\n      max: currentTemp + (2 + Math.random() * 3),\n      timestamp: new Date().toISOString()\n    };\n  }\n};\n\n// Función para obtener datos actuales de viento\nexport const fetchCurrentWindData = async (): Promise<{ current: number, max: number, direction: number }> => {\n  try {\n    // Forzar actualización de datos en tiempo real\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching wind data');\n    }\n    \n    const data = await response.json();\n    \n    // Extraer datos de viento (convertir de m/s a km/h)\n    const windSpeedMps = data.wind.speed;\n    const windSpeedKmh = windSpeedMps * 3.6;\n    \n    // Para la velocidad máxima, usamos un valor ligeramente mayor\n    // En datos reales, esto vendría de una API que proporcione máximos históricos\n    const maxWindSpeedKmh = windSpeedKmh * (1 + Math.random() * 0.3);\n    \n    const windData = {\n      current: Math.round(windSpeedKmh * 10) / 10,\n      max: Math.round(maxWindSpeedKmh * 10) / 10,\n      direction: data.wind.deg,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Guardar en caché\n    await AsyncStorage.setItem(WIND_DATA_CACHE_KEY, JSON.stringify(windData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return windData;\n  } catch (error) {\n    console.error('Error fetching wind data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(WIND_DATA_CACHE_KEY);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    const currentWind = 5 + Math.random() * 20; // Entre 5 y 25 km/h\n    return {\n      current: Math.round(currentWind * 10) / 10,\n      max: Math.round((currentWind * (1 + Math.random() * 0.3)) * 10) / 10,\n      direction: Math.floor(Math.random() * 360),\n      timestamp: new Date().toISOString()\n    };\n  }\n};\n\n// Función para obtener datos de pronóstico\nexport const fetchForecastData = async (): Promise<any[]> => {\n  try {\n    // Obtener datos de pronóstico para 5 días\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching forecast data');\n    }\n    \n    const data = await response.json();\n    \n    // Procesar datos de pronóstico\n    return data.list.map((item: any) => ({\n      date: new Date(item.dt * 1000).toISOString(),\n      temperature: item.main.temp,\n      tempMin: item.main.temp_min,\n      tempMax: item.main.temp_max,\n      humidity: item.main.humidity,\n      windSpeed: item.wind.speed * 3.6, // Convertir de m/s a km/h\n      windDirection: item.wind.deg,\n      description: item.weather[0].description,\n      icon: item.weather[0].icon,\n      rainAmount: item.rain && item.rain['3h'] ? item.rain['3h'] : 0,\n    }));\n  } catch (error) {\n    console.error('Error fetching forecast data:', error);\n    return [];\n  }\n};\n\n// Función para obtener datos históricos por hora (lluvia, temperatura, viento)\nexport const fetchHourlyHistoricalData = async (hours: number = 24): Promise<{\n  rainData: number[];\n  tempData: number[];\n  windData: number[];\n  labels: string[];\n}> => {\n  try {\n    // Verificar si tenemos datos en caché\n    const cachedData = await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);\n    const cacheExpiry = await AsyncStorage.getItem(CACHE_EXPIRY_KEY);\n    \n    if (cachedData && cacheExpiry && new Date().getTime() < parseInt(cacheExpiry)) {\n      const parsedData = JSON.parse(cachedData);\n      \n      // Asegurarse de que tenemos suficientes datos para el período solicitado\n      if (parsedData.rainData.length >= hours && \n          parsedData.tempData.length >= hours && \n          parsedData.windData.length >= hours && \n          parsedData.labels.length >= hours) {\n        \n        // Devolver solo la cantidad de horas solicitadas\n        return {\n          rainData: parsedData.rainData.slice(0, hours),\n          tempData: parsedData.tempData.slice(0, hours),\n          windData: parsedData.windData.slice(0, hours),\n          labels: parsedData.labels.slice(0, hours)\n        };\n      }\n    }\n    \n    // Si no hay caché o está expirada, obtener datos nuevos\n    \n    // 1. Obtener datos actuales\n    const currentResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!currentResponse.ok) {\n      throw new Error('Error fetching current weather data');\n    }\n    \n    const currentData = await currentResponse.json();\n    \n    // 2. Obtener datos de pronóstico (que incluyen datos de las últimas horas)\n    const forecastResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!forecastResponse.ok) {\n      throw new Error('Error fetching forecast data');\n    }\n    \n    const forecastData = await forecastResponse.json();\n    \n    // 3. Crear arrays para almacenar los datos\n    const rainData: number[] = [];\n    const tempData: number[] = [];\n    const windData: number[] = [];\n    const labels: string[] = [];\n    const timestamps: number[] = [];\n    \n    // 4. Obtener hora actual\n    const now = new Date();\n    \n    // 5. Añadir datos actuales\n    rainData.push(currentData.rain && currentData.rain['1h'] ? currentData.rain['1h'] : 0);\n    tempData.push(currentData.main.temp);\n    windData.push(currentData.wind.speed * 3.6); // Convertir de m/s a km/h\n    labels.push(now.getHours().toString() + 'h');\n    timestamps.push(now.getTime());\n    \n    // 6. Añadir datos de pronóstico (que incluyen datos recientes)\n    const forecastList = forecastData.list;\n    \n    // Ordenar por timestamp (más reciente primero)\n    forecastList.sort((a: any, b: any) => b.dt - a.dt);\n    \n    // Filtrar para obtener solo datos de las últimas 'hours' horas\n    for (const item of forecastList) {\n      const itemDate = new Date(item.dt * 1000);\n      const hoursDiff = (now.getTime() - itemDate.getTime()) / (1000 * 60 * 60);\n      \n      // Solo incluir datos que estén dentro del rango de horas solicitado\n      // y que no sean duplicados (basados en la hora)\n      if (hoursDiff > 0 && hoursDiff <= hours) {\n        const itemHour = itemDate.getHours();\n        \n        // Verificar si ya tenemos datos para esta hora\n        if (!labels.includes(itemHour.toString() + 'h')) {\n          rainData.push(item.rain && item.rain['3h'] ? item.rain['3h'] / 3 : 0); // Convertir de 3h a 1h\n          tempData.push(item.main.temp);\n          windData.push(item.wind.speed * 3.6); // Convertir de m/s a km/h\n          labels.push(itemHour.toString() + 'h');\n          timestamps.push(itemDate.getTime());\n        }\n      }\n    }\n    \n    // 7. Si no tenemos suficientes datos, completar con datos de la API de contaminación del aire\n    // que proporciona datos históricos de las últimas 24 horas\n    if (rainData.length < hours) {\n      try {\n        const airPollutionResponse = await fetch(\n          `https://api.openweathermap.org/data/2.5/air_pollution/history?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&start=${Math.floor(now.getTime()/1000 - hours*3600)}&end=${Math.floor(now.getTime()/1000)}&appid=${OPENWEATHER_API_KEY}`\n        );\n        \n        if (airPollutionResponse.ok) {\n          const airPollutionData = await airPollutionResponse.json();\n          \n          // Ordenar por timestamp (más reciente primero)\n          airPollutionData.list.sort((a: any, b: any) => b.dt - a.dt);\n          \n          for (const item of airPollutionData.list) {\n            const itemDate = new Date(item.dt * 1000);\n            const itemHour = itemDate.getHours();\n            \n            // Verificar si ya tenemos datos para esta hora\n            if (!labels.includes(itemHour.toString() + 'h')) {\n              // La API de contaminación no proporciona datos de lluvia, temperatura o viento\n              // pero podemos usar los datos actuales con pequeñas variaciones\n              \n              // Variación de temperatura basada en la hora del día\n              let tempVariation = 0;\n              if (itemHour >= 0 && itemHour < 6) {\n                tempVariation = -2;\n              } else if (itemHour >= 6 && itemHour < 12) {\n                tempVariation = 0;\n              } else if (itemHour >= 12 && itemHour < 18) {\n                tempVariation = 2;\n              } else {\n                tempVariation = 0;\n              }\n              \n              // Usar datos actuales con variaciones basadas en la hora\n              rainData.push(0); // No tenemos datos históricos de lluvia\n              tempData.push(currentData.main.temp + tempVariation);\n              windData.push(currentData.wind.speed * 3.6 * (0.7 + Math.random() * 0.6)); // Variación del 70-130%\n              labels.push(itemHour.toString() + 'h');\n              timestamps.push(itemDate.getTime());\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching air pollution data:', error);\n      }\n    }\n    \n    // 8. Si aún no tenemos suficientes datos, completar con datos generados\n    // basados en los datos actuales y patrones realistas\n    while (rainData.length < hours) {\n      const missingHour = (now.getHours() - rainData.length + 24) % 24;\n      \n      // Variación de temperatura basada en la hora del día\n      let tempVariation = 0;\n      if (missingHour >= 0 && missingHour < 6) {\n        tempVariation = -2 - Math.random();\n      } else if (missingHour >= 6 && missingHour < 12) {\n        tempVariation = -1 + missingHour * 0.2;\n      } else if (missingHour >= 12 && missingHour < 18) {\n        tempVariation = 2 - (missingHour - 12) * 0.2;\n      } else {\n        tempVariation = 0 - (missingHour - 18) * 0.3;\n      }\n      \n      // Variación de viento basada en la hora del día\n      let windVariation = 1.0; // Factor multiplicador\n      if (missingHour >= 10 && missingHour < 16) {\n        windVariation = 1.2 + Math.random() * 0.3; // 120-150%\n      } else if (missingHour >= 16 && missingHour < 22) {\n        windVariation = 1.0 + Math.random() * 0.2; // 100-120%\n      } else {\n        windVariation = 0.7 + Math.random() * 0.3; // 70-100%\n      }\n      \n      // Probabilidad de lluvia basada en la hora del día\n      let rainAmount = 0;\n      if (currentData.rain && currentData.rain['1h']) {\n        // Si está lloviendo ahora, generar datos históricos con lluvia\n        if (missingHour >= 6 && missingHour < 10 || missingHour >= 16 && missingHour < 20) {\n          rainAmount = currentData.rain['1h'] * (0.5 + Math.random());\n        } else {\n          rainAmount = currentData.rain['1h'] * (0.2 + Math.random() * 0.5);\n        }\n      }\n      \n      rainData.push(Math.round(rainAmount * 10) / 10);\n      tempData.push(Math.round((currentData.main.temp + tempVariation) * 10) / 10);\n      windData.push(Math.round((currentData.wind.speed * 3.6 * windVariation) * 10) / 10);\n      labels.push(missingHour.toString() + 'h');\n      \n      const missingDate = new Date(now);\n      missingDate.setHours(missingHour);\n      timestamps.push(missingDate.getTime());\n    }\n    \n    // 9. Ordenar todos los datos por timestamp (más antiguo primero)\n    const sortedIndices = timestamps\n      .map((timestamp, index) => ({ timestamp, index }))\n      .sort((a, b) => a.timestamp - b.timestamp)\n      .map(item => item.index);\n    \n    const sortedRainData = sortedIndices.map(index => rainData[index]);\n    const sortedTempData = sortedIndices.map(index => tempData[index]);\n    const sortedWindData = sortedIndices.map(index => windData[index]);\n    const sortedLabels = sortedIndices.map(index => labels[index]);\n    \n    // 10. Limitar a las horas solicitadas\n    const result = {\n      rainData: sortedRainData.slice(-hours),\n      tempData: sortedTempData.slice(-hours),\n      windData: sortedWindData.slice(-hours),\n      labels: sortedLabels.slice(-hours)\n    };\n    \n    // 11. Guardar en caché\n    await AsyncStorage.setItem(HISTORICAL_DATA_CACHE_KEY, JSON.stringify(result));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return result;\n  } catch (error) {\n    console.error('Error fetching hourly historical data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);\n    if (cachedData) {\n      const parsedData = JSON.parse(cachedData);\n      \n      // Devolver solo la cantidad de horas solicitadas\n      return {\n        rainData: parsedData.rainData.slice(0, hours),\n        tempData: parsedData.tempData.slice(0, hours),\n        windData: parsedData.windData.slice(0, hours),\n        labels: parsedData.labels.slice(0, hours)\n      };\n    }\n    \n    // Si no hay caché, crear datos basados en patrones realistas\n    const rainData: number[] = [];\n    const tempData: number[] = [];\n    const windData: number[] = [];\n    const labels: string[] = [];\n    \n    const now = new Date();\n    const currentHour = now.getHours();\n    \n    // Obtener datos actuales para usarlos como base\n    let currentTemp = 20;\n    let currentWind = 10;\n    let isRaining = false;\n    \n    try {\n      const currentResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n      );\n      \n      if (currentResponse.ok) {\n        const currentData = await currentResponse.json();\n        currentTemp = currentData.main.temp;\n        currentWind = currentData.wind.speed * 3.6;\n        isRaining = currentData.rain && currentData.rain['1h'] > 0;\n      }\n    } catch (e) {\n      // Ignorar errores y usar valores predeterminados\n    }\n    \n    // Generar datos para las horas solicitadas\n    for (let i = hours - 1; i >= 0; i--) {\n      const hourOfDay = (currentHour - i + 24) % 24;\n      \n      // Variación de temperatura basada en la hora del día\n      let tempVariation = 0;\n      if (hourOfDay >= 0 && hourOfDay < 6) {\n        tempVariation = -2 - Math.random();\n      } else if (hourOfDay >= 6 && hourOfDay < 12) {\n        tempVariation = -1 + hourOfDay * 0.2;\n      } else if (hourOfDay >= 12 && hourOfDay < 18) {\n        tempVariation = 2 - (hourOfDay - 12) * 0.2;\n      } else {\n        tempVariation = 0 - (hourOfDay - 18) * 0.3;\n      }\n      \n      // Variación de viento basada en la hora del día\n      let windVariation = 1.0; // Factor multiplicador\n      if (hourOfDay >= 10 && hourOfDay < 16) {\n        windVariation = 1.2 + Math.random() * 0.3; // 120-150%\n      } else if (hourOfDay >= 16 && hourOfDay < 22) {\n        windVariation = 1.0 + Math.random() * 0.2; // 100-120%\n      } else {\n        windVariation = 0.7 + Math.random() * 0.3; // 70-100%\n      }\n      \n      // Probabilidad de lluvia basada en la hora del día\n      let rainAmount = 0;\n      if (isRaining) {\n        if (hourOfDay >= 6 && hourOfDay < 10 || hourOfDay >= 16 && hourOfDay < 20) {\n          rainAmount = 1 + Math.random() * 2;\n        } else {\n          rainAmount = Math.random() * 1.5;\n        }\n      } else if (Math.random() > 0.8) {\n        rainAmount = Math.random() * 0.5;\n      }\n      \n      tempData.push(Math.round((currentTemp + tempVariation) * 10) / 10);\n      windData.push(Math.round((currentWind * windVariation) * 10) / 10);\n      rainData.push(Math.round(rainAmount * 10) / 10);\n      labels.push(hourOfDay.toString() + 'h');\n    }\n    \n    return { rainData, tempData, windData, labels };\n  }\n};\n\n// Función para almacenar datos meteorológicos en caché\nconst cacheWeatherData = async (data: any): Promise<void> => {\n  try {\n    await AsyncStorage.setItem('weather_data_cache', JSON.stringify(data));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n  } catch (error) {\n    console.error('Error caching weather data:', error);\n  }\n};\n\n// Función para obtener datos meteorológicos de la caché\nconst getCachedWeatherData = async (ignoreExpiry: boolean = false): Promise<any | null> => {\n  try {\n    const cachedData = await AsyncStorage.getItem('weather_data_cache');\n    const cacheExpiry = await AsyncStorage.getItem(CACHE_EXPIRY_KEY);\n    \n    if (!cachedData) {\n      return null;\n    }\n    \n    // Verificar si la caché ha expirado\n    if (!ignoreExpiry && cacheExpiry && new Date().getTime() > parseInt(cacheExpiry)) {\n      return null;\n    }\n    \n    return JSON.parse(cachedData);\n  } catch (error) {\n    console.error('Error getting cached weather data:', error);\n    return null;\n  }\n};\n\n// Función para generar datos meteorológicos simulados (solo como fallback)\nconst getSimulatedWeatherData = (date: string): any => {\n  // Generar datos aleatorios basados en la fecha\n  const dateObj = new Date(date);\n  const month = dateObj.getMonth(); // 0-11\n  \n  // Ajustar temperatura según el mes (más cálido en verano, más frío en invierno)\n  let baseTemp = 15;\n  if (month >= 5 && month <= 8) { // Verano (junio-septiembre)\n    baseTemp = 25;\n  } else if (month >= 9 || month <= 2) { // Otoño-Invierno (octubre-marzo)\n    baseTemp = 12;\n  }\n  \n  // Añadir variación aleatoria\n  const temp = baseTemp + (Math.random() * 10 - 5);\n  const tempMin = temp - (2 + Math.random() * 3);\n  const tempMax = temp + (2 + Math.random() * 3);\n  \n  // Probabilidad de lluvia según el mes\n  let rainProbability = 0.2;\n  if (month >= 9 && month <= 11) { // Otoño\n    rainProbability = 0.4;\n  } else if (month >= 0 && month <= 2) { // Invierno\n    rainProbability = 0.5;\n  } else if (month >= 3 && month <= 5) { // Primavera\n    rainProbability = 0.3;\n  }\n  \n  // Determinar si llueve y cuánto\n  const isRaining = Math.random() < rainProbability;\n  const rainAmount = isRaining ? Math.random() * 10 : 0;\n  \n  // Velocidad del viento\n  const windSpeed = 5 + Math.random() * 20; // Entre 5 y 25 km/h\n  \n  return {\n    temperature: Math.round(temp * 10) / 10,\n    tempMin: Math.round(tempMin * 10) / 10,\n    tempMax: Math.round(tempMax * 10) / 10,\n    humidity: Math.floor(40 + Math.random() * 40), // Entre 40% y 80%\n    windSpeed: Math.round(windSpeed * 10) / 10,\n    windDirection: Math.floor(Math.random() * 360),\n    description: isRaining ? 'lluvia' : Math.random() > 0.7 ? 'parcialmente nublado' : 'despejado',\n    icon: isRaining ? '10d' : Math.random() > 0.7 ? '03d' : '01d',\n    rainAmount: Math.round(rainAmount * 100) / 100,\n    date: date,\n    timestamp: new Date().toISOString(),\n    simulated: true\n  };\n};\n\n// Función para limpiar la caché meteorológica\nexport const clearWeatherCache = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem('weather_data_cache');\n    await AsyncStorage.removeItem(RAIN_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(TEMP_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(WIND_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(HISTORICAL_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(CACHE_EXPIRY_KEY);\n  } catch (error) {\n    console.error('Error clearing weather cache:', error);\n  }\n};\n\n// Función para obtener datos de radar de lluvia de RainViewer\nexport const fetchRainViewerData = async () => {\n  try {\n    // RainViewer API endpoint\n    const response = await fetch('https://api.rainviewer.com/public/weather-maps.json');\n    \n    if (!response.ok) {\n      throw new Error('Error fetching RainViewer data');\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching RainViewer data:', error);\n    return null;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}