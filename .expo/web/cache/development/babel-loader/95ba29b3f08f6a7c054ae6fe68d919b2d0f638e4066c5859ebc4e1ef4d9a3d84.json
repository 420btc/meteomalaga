{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nconst PLANT_STORAGE_KEY = 'meteo_plant_data';\nconst PLANT_REWARDS_KEY = 'meteo_plant_rewards';\nconst LAST_ACTIVITY_KEY = 'meteo_last_activity';\nconst plantConfigs = {\n  'Cactus': {\n    type: 'Cactus',\n    waterRequirement: 2,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 11,\n      Adulta: 26,\n      Florecida: 41\n    },\n    evolutionThreshold: 60\n  },\n  'Suculenta': {\n    type: 'Suculenta',\n    waterRequirement: 3,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 11,\n      Adulta: 26,\n      Florecida: 41\n    },\n    evolutionThreshold: 60\n  },\n  'Aloe': {\n    type: 'Aloe',\n    waterRequirement: 3,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 11,\n      Adulta: 26,\n      Florecida: 41\n    },\n    evolutionThreshold: 60\n  },\n  'Lavanda': {\n    type: 'Lavanda',\n    waterRequirement: 4,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 11,\n      Adulta: 26,\n      Florecida: 41\n    },\n    evolutionThreshold: 60\n  },\n  'Jade': {\n    type: 'Jade',\n    waterRequirement: 4,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 11,\n      Adulta: 26,\n      Florecida: 41\n    },\n    evolutionThreshold: 60\n  },\n  'Girasol': {\n    type: 'Girasol',\n    waterRequirement: 5,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 21,\n      Adulta: 51,\n      Florecida: 81\n    },\n    evolutionThreshold: 120\n  },\n  'Rosa': {\n    type: 'Rosa',\n    waterRequirement: 6,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 21,\n      Adulta: 51,\n      Florecida: 81\n    },\n    evolutionThreshold: 120\n  },\n  'Orquídea': {\n    type: 'Orquídea',\n    waterRequirement: 6,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 21,\n      Adulta: 51,\n      Florecida: 81\n    },\n    evolutionThreshold: 120\n  },\n  'Monstera': {\n    type: 'Monstera',\n    waterRequirement: 7,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 21,\n      Adulta: 51,\n      Florecida: 81\n    },\n    evolutionThreshold: 120\n  },\n  'Hibisco': {\n    type: 'Hibisco',\n    waterRequirement: 7,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 21,\n      Adulta: 51,\n      Florecida: 81\n    },\n    evolutionThreshold: 120\n  },\n  'Bambú': {\n    type: 'Bambú',\n    waterRequirement: 8,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 31,\n      Adulta: 81,\n      Florecida: 151\n    },\n    evolutionThreshold: 250\n  },\n  'Helecho': {\n    type: 'Helecho',\n    waterRequirement: 9,\n    stageThresholds: {\n      Brote: 0,\n      Joven: 31,\n      Adulta: 81,\n      Florecida: 151\n    },\n    evolutionThreshold: 250\n  }\n};\nconst getPlantStage = plant => {\n  const config = plantConfigs[plant.type];\n  const {\n    waterAccumulated\n  } = plant;\n  if (waterAccumulated >= config.stageThresholds.Florecida) {\n    return 'Florecida';\n  } else if (waterAccumulated >= config.stageThresholds.Adulta) {\n    return 'Adulta';\n  } else if (waterAccumulated >= config.stageThresholds.Joven) {\n    return 'Joven';\n  } else {\n    return 'Brote';\n  }\n};\nexport const updateLastActivity = async () => {\n  try {\n    const now = new Date().toISOString();\n    await AsyncStorage.setItem(LAST_ACTIVITY_KEY, now);\n  } catch (error) {\n    console.error('Error updating last activity:', error);\n  }\n};\nexport const getLastActivity = async () => {\n  try {\n    return await AsyncStorage.getItem(LAST_ACTIVITY_KEY);\n  } catch (error) {\n    console.error('Error getting last activity:', error);\n    return null;\n  }\n};\nexport const initializePlant = async () => {\n  const newPlant = {\n    id: Date.now(),\n    name: 'Mi Planta',\n    type: 'Cactus',\n    stage: 'Brote',\n    waterRequirement: plantConfigs['Cactus'].waterRequirement,\n    waterAccumulated: 0,\n    health: 100,\n    lastWatered: new Date().toISOString(),\n    stageThreshold: plantConfigs['Cactus'].stageThresholds.Joven,\n    evolutionThreshold: plantConfigs['Cactus'].evolutionThreshold,\n    waterAvailable: 5,\n    lastFreeWaterCollected: new Date().toISOString()\n  };\n  await savePlant(newPlant);\n  await updateLastActivity();\n  return newPlant;\n};\nexport const getPlant = async () => {\n  try {\n    const plantData = await AsyncStorage.getItem(PLANT_STORAGE_KEY);\n    if (!plantData) return null;\n    const plant = JSON.parse(plantData);\n    if (plant.waterAvailable === undefined) {\n      plant.waterAvailable = 5;\n    }\n    if (plant.lastFreeWaterCollected === undefined) {\n      plant.lastFreeWaterCollected = new Date().toISOString();\n    }\n    const updatedPlant = await updatePlantHealthBasedOnInactivity(plant);\n    return updatedPlant;\n  } catch (error) {\n    console.error('Error getting plant data:', error);\n    return null;\n  }\n};\nexport const savePlant = async plant => {\n  try {\n    await AsyncStorage.setItem(PLANT_STORAGE_KEY, JSON.stringify(plant));\n  } catch (error) {\n    console.error('Error saving plant data:', error);\n  }\n};\nexport const updatePlantHealthBasedOnInactivity = async plant => {\n  const lastActivityStr = await getLastActivity();\n  if (!lastActivityStr) {\n    await updateLastActivity();\n    return plant;\n  }\n  const now = new Date();\n  const lastActivity = new Date(lastActivityStr);\n  const hoursSinceActivity = Math.floor((now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60));\n  if (hoursSinceActivity >= 72) {\n    console.log('Plant died due to player inactivity for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  if (hoursSinceActivity > 0) {\n    const healthReduction = Math.min(plant.health, hoursSinceActivity);\n    plant.health -= healthReduction;\n    if (plant.health <= 0) {\n      console.log('Plant died due to health reaching 0 from inactivity');\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    await savePlant(plant);\n  }\n  await updateLastActivity();\n  return plant;\n};\nexport const updatePlantHealth = async () => {\n  const plant = await getPlant();\n  if (!plant) return null;\n  const now = new Date();\n  const lastWatered = new Date(plant.lastWatered);\n  const hoursPassed = Math.floor((now.getTime() - lastWatered.getTime()) / (1000 * 60 * 60));\n  if (hoursPassed >= 72) {\n    console.log('Plant died due to lack of water for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  const daysPassed = Math.floor(hoursPassed / 24);\n  if (daysPassed > 0) {\n    const healthReduction = Math.min(plant.health, 20 * daysPassed);\n    plant.health -= healthReduction;\n    if (plant.health <= 0) {\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    plant.lastWatered = now.toISOString();\n    await savePlant(plant);\n  }\n  return plant;\n};\nexport const addWaterFromBet = async (betType, success) => {\n  if (!success) return await getPlant();\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  const waterAmount = betType === 'rain' ? 5 : 10;\n  plant.waterAvailable += waterAmount;\n  await savePlant(plant);\n  await updateLastActivity();\n  return plant;\n};\nconst getNextPlantType = currentType => {\n  const evolutionOrder = ['Cactus', 'Suculenta', 'Aloe', 'Lavanda', 'Jade', 'Girasol', 'Rosa', 'Orquídea', 'Monstera', 'Hibisco', 'Bambú', 'Helecho'];\n  const currentIndex = evolutionOrder.indexOf(currentType);\n  if (currentIndex === -1 || currentIndex === evolutionOrder.length - 1) {\n    return null;\n  }\n  return evolutionOrder[currentIndex + 1];\n};\nexport const getPendingRewards = async () => {\n  try {\n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    if (!rewardsData) return 0;\n    const rewards = JSON.parse(rewardsData);\n    return rewards.amount || 0;\n  } catch (error) {\n    console.error('Error getting pending rewards:', error);\n    return 0;\n  }\n};\nexport const addPendingReward = async (betType, success) => {\n  if (!success) return;\n  try {\n    const waterAmount = betType === 'rain' ? 5 : 10;\n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    let rewards = {\n      amount: 0\n    };\n    if (rewardsData) {\n      rewards = JSON.parse(rewardsData);\n    }\n    rewards.amount = (rewards.amount || 0) + waterAmount;\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify(rewards));\n    await updateLastActivity();\n  } catch (error) {\n    console.error('Error adding pending reward:', error);\n  }\n};\nexport const claimPendingRewards = async () => {\n  try {\n    const pendingRewards = await getPendingRewards();\n    if (pendingRewards <= 0) return await getPlant();\n    let plant = await getPlant();\n    if (!plant) {\n      plant = await initializePlant();\n    }\n    plant.waterAvailable += pendingRewards;\n    plant.health = 100;\n    plant.lastWatered = new Date().toISOString();\n    await savePlant(plant);\n    await updateLastActivity();\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify({\n      amount: 0\n    }));\n    return plant;\n  } catch (error) {\n    console.error('Error claiming rewards:', error);\n    return null;\n  }\n};\nexport const collectDailyFreeWater = async () => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n    return {\n      plant,\n      collected: false\n    };\n  }\n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  const hoursPassed = Math.floor((now.getTime() - lastCollected.getTime()) / (1000 * 60 * 60));\n  if (hoursPassed >= 24) {\n    plant.waterAvailable += 1;\n    plant.lastFreeWaterCollected = now.toISOString();\n    await savePlant(plant);\n    await updateLastActivity();\n    return {\n      plant,\n      collected: true\n    };\n  }\n  return {\n    plant,\n    collected: false\n  };\n};\nexport const waterPlant = async amount => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  if (plant.waterAvailable < amount) {\n    return {\n      plant,\n      success: false\n    };\n  }\n  plant.waterAvailable -= amount;\n  plant.waterAccumulated += amount;\n  const updatedStage = getPlantStage(plant);\n  if (updatedStage !== plant.stage) {\n    plant.stage = updatedStage;\n  }\n  if (plant.waterAccumulated >= plant.evolutionThreshold) {\n    const nextPlantType = getNextPlantType(plant.type);\n    if (nextPlantType) {\n      plant.type = nextPlantType;\n      plant.waterRequirement = plantConfigs[nextPlantType].waterRequirement;\n      plant.waterAccumulated = 0;\n      plant.stage = 'Brote';\n      plant.stageThreshold = plantConfigs[nextPlantType].stageThresholds.Joven;\n      plant.evolutionThreshold = plantConfigs[nextPlantType].evolutionThreshold;\n    }\n  }\n  plant.health = 100;\n  plant.lastWatered = new Date().toISOString();\n  await savePlant(plant);\n  await updateLastActivity();\n  return {\n    plant,\n    success: true\n  };\n};\nexport const getTimeUntilNextFreeWater = plant => {\n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  const oneDayMs = 24 * 60 * 60 * 1000;\n  const nextCollectionTime = new Date(lastCollected.getTime() + oneDayMs);\n  const timeUntilNextMs = Math.max(0, nextCollectionTime.getTime() - now.getTime());\n  return Math.ceil(timeUntilNextMs / (60 * 60 * 1000));\n};\nexport const getPlantProgressPercentage = plant => {\n  const config = plantConfigs[plant.type];\n  const {\n    stage,\n    waterAccumulated\n  } = plant;\n  if (stage === 'Brote') {\n    return waterAccumulated / config.stageThresholds.Joven * 100;\n  } else if (stage === 'Joven') {\n    const min = config.stageThresholds.Joven;\n    const max = config.stageThresholds.Adulta;\n    return (waterAccumulated - min) / (max - min) * 100;\n  } else if (stage === 'Adulta') {\n    const min = config.stageThresholds.Adulta;\n    const max = config.stageThresholds.Florecida;\n    return (waterAccumulated - min) / (max - min) * 100;\n  } else {\n    const min = config.stageThresholds.Florecida;\n    const max = config.evolutionThreshold;\n    return (waterAccumulated - min) / (max - min) * 100;\n  }\n};\nexport const getPlantEvolutionPercentage = plant => {\n  return plant.waterAccumulated / plant.evolutionThreshold * 100;\n};\nexport const getPlantImageUrl = plant => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}${plant.type.toLowerCase()}_${plant.stage.toLowerCase()}.png`;\n};\nexport const getPotImageUrl = (potColor = 'default') => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}pot_${potColor}.png`;\n};","map":{"version":3,"names":["AsyncStorage","PLANT_STORAGE_KEY","PLANT_REWARDS_KEY","LAST_ACTIVITY_KEY","plantConfigs","type","waterRequirement","stageThresholds","Brote","Joven","Adulta","Florecida","evolutionThreshold","getPlantStage","plant","config","waterAccumulated","updateLastActivity","now","Date","toISOString","setItem","error","console","getLastActivity","getItem","initializePlant","newPlant","id","name","stage","health","lastWatered","stageThreshold","waterAvailable","lastFreeWaterCollected","savePlant","getPlant","plantData","JSON","parse","undefined","updatedPlant","updatePlantHealthBasedOnInactivity","stringify","lastActivityStr","lastActivity","hoursSinceActivity","Math","floor","getTime","log","healthReduction","min","updatePlantHealth","hoursPassed","daysPassed","addWaterFromBet","betType","success","waterAmount","getNextPlantType","currentType","evolutionOrder","currentIndex","indexOf","length","getPendingRewards","rewardsData","rewards","amount","addPendingReward","claimPendingRewards","pendingRewards","collectDailyFreeWater","collected","lastCollected","waterPlant","updatedStage","nextPlantType","getTimeUntilNextFreeWater","oneDayMs","nextCollectionTime","timeUntilNextMs","max","ceil","getPlantProgressPercentage","getPlantEvolutionPercentage","getPlantImageUrl","baseUrl","toLowerCase","getPotImageUrl","potColor"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/plantService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Plant, PlantType, PlantStage, PlantConfig } from '../types/plant';\n\nconst PLANT_STORAGE_KEY = 'meteo_plant_data';\nconst PLANT_REWARDS_KEY = 'meteo_plant_rewards';\nconst LAST_ACTIVITY_KEY = 'meteo_last_activity';\n\n// Plant configurations\nconst plantConfigs: Record<PlantType, PlantConfig> = {\n  'Cactus': {\n    type: 'Cactus',\n    waterRequirement: 2,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Suculenta': {\n    type: 'Suculenta',\n    waterRequirement: 3,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Aloe': {\n    type: 'Aloe',\n    waterRequirement: 3,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Lavanda': {\n    type: 'Lavanda',\n    waterRequirement: 4,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Jade': {\n    type: 'Jade',\n    waterRequirement: 4,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Girasol': {\n    type: 'Girasol',\n    waterRequirement: 5,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Rosa': {\n    type: 'Rosa',\n    waterRequirement: 6,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Orquídea': {\n    type: 'Orquídea',\n    waterRequirement: 6,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Monstera': {\n    type: 'Monstera',\n    waterRequirement: 7,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Hibisco': {\n    type: 'Hibisco',\n    waterRequirement: 7,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Bambú': {\n    type: 'Bambú',\n    waterRequirement: 8,\n    stageThresholds: { Brote: 0, Joven: 31, Adulta: 81, Florecida: 151 },\n    evolutionThreshold: 250\n  },\n  'Helecho': {\n    type: 'Helecho',\n    waterRequirement: 9,\n    stageThresholds: { Brote: 0, Joven: 31, Adulta: 81, Florecida: 151 },\n    evolutionThreshold: 250\n  }\n};\n\n// Get plant stage based on water accumulated\nconst getPlantStage = (plant: Plant): PlantStage => {\n  const config = plantConfigs[plant.type];\n  const { waterAccumulated } = plant;\n  \n  if (waterAccumulated >= config.stageThresholds.Florecida) {\n    return 'Florecida';\n  } else if (waterAccumulated >= config.stageThresholds.Adulta) {\n    return 'Adulta';\n  } else if (waterAccumulated >= config.stageThresholds.Joven) {\n    return 'Joven';\n  } else {\n    return 'Brote';\n  }\n};\n\n// Update last activity timestamp\nexport const updateLastActivity = async (): Promise<void> => {\n  try {\n    const now = new Date().toISOString();\n    await AsyncStorage.setItem(LAST_ACTIVITY_KEY, now);\n  } catch (error) {\n    console.error('Error updating last activity:', error);\n  }\n};\n\n// Get last activity timestamp\nexport const getLastActivity = async (): Promise<string | null> => {\n  try {\n    return await AsyncStorage.getItem(LAST_ACTIVITY_KEY);\n  } catch (error) {\n    console.error('Error getting last activity:', error);\n    return null;\n  }\n};\n\n// Initialize a new plant\nexport const initializePlant = async (): Promise<Plant> => {\n  const newPlant: Plant = {\n    id: Date.now(),\n    name: 'Mi Planta',\n    type: 'Cactus',\n    stage: 'Brote',\n    waterRequirement: plantConfigs['Cactus'].waterRequirement,\n    waterAccumulated: 0,\n    health: 100,\n    lastWatered: new Date().toISOString(),\n    stageThreshold: plantConfigs['Cactus'].stageThresholds.Joven,\n    evolutionThreshold: plantConfigs['Cactus'].evolutionThreshold,\n    waterAvailable: 5, // Start with 5 units of water\n    lastFreeWaterCollected: new Date().toISOString()\n  };\n  \n  await savePlant(newPlant);\n  await updateLastActivity(); // Initialize last activity\n  return newPlant;\n};\n\n// Get current plant data\nexport const getPlant = async (): Promise<Plant | null> => {\n  try {\n    const plantData = await AsyncStorage.getItem(PLANT_STORAGE_KEY);\n    if (!plantData) return null;\n    \n    const plant: Plant = JSON.parse(plantData);\n    \n    // Add waterAvailable and lastFreeWaterCollected if they don't exist (for backward compatibility)\n    if (plant.waterAvailable === undefined) {\n      plant.waterAvailable = 5;\n    }\n    if (plant.lastFreeWaterCollected === undefined) {\n      plant.lastFreeWaterCollected = new Date().toISOString();\n    }\n    \n    // Update plant health based on inactivity\n    const updatedPlant = await updatePlantHealthBasedOnInactivity(plant);\n    \n    return updatedPlant;\n  } catch (error) {\n    console.error('Error getting plant data:', error);\n    return null;\n  }\n};\n\n// Save plant data\nexport const savePlant = async (plant: Plant): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(PLANT_STORAGE_KEY, JSON.stringify(plant));\n  } catch (error) {\n    console.error('Error saving plant data:', error);\n  }\n};\n\n// Update plant health based on player inactivity\nexport const updatePlantHealthBasedOnInactivity = async (plant: Plant): Promise<Plant> => {\n  const lastActivityStr = await getLastActivity();\n  \n  if (!lastActivityStr) {\n    // If no last activity is recorded, set it now and return plant unchanged\n    await updateLastActivity();\n    return plant;\n  }\n  \n  const now = new Date();\n  const lastActivity = new Date(lastActivityStr);\n  \n  // Calculate hours since last activity\n  const hoursSinceActivity = Math.floor((now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursSinceActivity >= 72) {\n    // Plant dies after 72 hours of inactivity\n    console.log('Plant died due to player inactivity for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  \n  if (hoursSinceActivity > 0) {\n    // Reduce health proportionally to inactivity time (1% per hour)\n    const healthReduction = Math.min(plant.health, hoursSinceActivity);\n    plant.health -= healthReduction;\n    \n    // If health reaches 0, reset plant\n    if (plant.health <= 0) {\n      console.log('Plant died due to health reaching 0 from inactivity');\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    \n    await savePlant(plant);\n  }\n  \n  // Update last activity to current time\n  await updateLastActivity();\n  \n  return plant;\n};\n\n// Update plant health based on daily water requirement and check for plant death\nexport const updatePlantHealth = async (): Promise<Plant | null> => {\n  const plant = await getPlant();\n  if (!plant) return null;\n  \n  const now = new Date();\n  const lastWatered = new Date(plant.lastWatered);\n  \n  // Check if 72 hours (3 days) have passed since last watering\n  const hoursPassed = Math.floor((now.getTime() - lastWatered.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursPassed >= 72) {\n    // Plant dies after 72 hours without water\n    console.log('Plant died due to lack of water for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  \n  // Check if a day has passed since last update\n  const daysPassed = Math.floor(hoursPassed / 24);\n  \n  if (daysPassed > 0) {\n    // Reduce health by 20% for each day without meeting water requirement\n    const healthReduction = Math.min(plant.health, 20 * daysPassed);\n    plant.health -= healthReduction;\n    \n    // If health reaches 0, reset plant\n    if (plant.health <= 0) {\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    \n    plant.lastWatered = now.toISOString();\n    await savePlant(plant);\n  }\n  \n  return plant;\n};\n\n// Add water to plant from successful bets\nexport const addWaterFromBet = async (betType: 'rain' | 'temp_min' | 'temp_max', success: boolean): Promise<Plant | null> => {\n  if (!success) return await getPlant();\n  \n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  \n  // Water amounts for different bet types\n  const waterAmount = betType === 'rain' ? 5 : 10;\n  \n  // Add water to plant's available water\n  plant.waterAvailable += waterAmount;\n  \n  await savePlant(plant);\n  await updateLastActivity(); // Update last activity when adding water from bet\n  return plant;\n};\n\n// Get next plant type in evolution\nconst getNextPlantType = (currentType: PlantType): PlantType | null => {\n  const evolutionOrder: PlantType[] = [\n    'Cactus', 'Suculenta', 'Aloe', 'Lavanda', 'Jade',\n    'Girasol', 'Rosa', 'Orquídea', 'Monstera', 'Hibisco',\n    'Bambú', 'Helecho'\n  ];\n  \n  const currentIndex = evolutionOrder.indexOf(currentType);\n  if (currentIndex === -1 || currentIndex === evolutionOrder.length - 1) {\n    return null; // Already at max evolution or invalid type\n  }\n  \n  return evolutionOrder[currentIndex + 1];\n};\n\n// Get pending rewards from successful bets\nexport const getPendingRewards = async (): Promise<number> => {\n  try {\n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    if (!rewardsData) return 0;\n    \n    const rewards = JSON.parse(rewardsData);\n    return rewards.amount || 0;\n  } catch (error) {\n    console.error('Error getting pending rewards:', error);\n    return 0;\n  }\n};\n\n// Add pending reward\nexport const addPendingReward = async (betType: 'rain' | 'temp_min' | 'temp_max', success: boolean): Promise<void> => {\n  if (!success) return;\n  \n  try {\n    const waterAmount = betType === 'rain' ? 5 : 10;\n    \n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    let rewards = { amount: 0 };\n    \n    if (rewardsData) {\n      rewards = JSON.parse(rewardsData);\n    }\n    \n    rewards.amount = (rewards.amount || 0) + waterAmount;\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify(rewards));\n    await updateLastActivity(); // Update last activity when adding pending reward\n  } catch (error) {\n    console.error('Error adding pending reward:', error);\n  }\n};\n\n// Claim pending rewards\nexport const claimPendingRewards = async (): Promise<Plant | null> => {\n  try {\n    const pendingRewards = await getPendingRewards();\n    if (pendingRewards <= 0) return await getPlant();\n    \n    let plant = await getPlant();\n    if (!plant) {\n      plant = await initializePlant();\n    }\n    \n    // Add water to plant's available water\n    plant.waterAvailable += pendingRewards;\n    \n    // Reset health to 100% when watered\n    plant.health = 100;\n    plant.lastWatered = new Date().toISOString();\n    \n    await savePlant(plant);\n    await updateLastActivity(); // Update last activity when claiming rewards\n    \n    // Clear pending rewards\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify({ amount: 0 }));\n    \n    return plant;\n  } catch (error) {\n    console.error('Error claiming rewards:', error);\n    return null;\n  }\n};\n\n// Collect daily free water (1 unit)\nexport const collectDailyFreeWater = async (): Promise<{plant: Plant | null, collected: boolean}> => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n    return { plant, collected: false };\n  }\n  \n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  \n  // Check if 24 hours have passed since last collection\n  const hoursPassed = Math.floor((now.getTime() - lastCollected.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursPassed >= 24) {\n    // Add 1 unit of free water\n    plant.waterAvailable += 1;\n    plant.lastFreeWaterCollected = now.toISOString();\n    \n    await savePlant(plant);\n    await updateLastActivity(); // Update last activity when collecting free water\n    return { plant, collected: true };\n  }\n  \n  return { plant, collected: false };\n};\n\n// Water plant manually\nexport const waterPlant = async (amount: number): Promise<{plant: Plant | null, success: boolean}> => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  \n  // Check if user has enough water available\n  if (plant.waterAvailable < amount) {\n    return { plant, success: false };\n  }\n  \n  // Deduct water from available water\n  plant.waterAvailable -= amount;\n  \n  // Add water to plant\n  plant.waterAccumulated += amount;\n  \n  // Check if plant should evolve to next stage\n  const updatedStage = getPlantStage(plant);\n  if (updatedStage !== plant.stage) {\n    plant.stage = updatedStage;\n  }\n  \n  // Check if plant should evolve to next type\n  if (plant.waterAccumulated >= plant.evolutionThreshold) {\n    const nextPlantType = getNextPlantType(plant.type);\n    if (nextPlantType) {\n      plant.type = nextPlantType;\n      plant.waterRequirement = plantConfigs[nextPlantType].waterRequirement;\n      plant.waterAccumulated = 0;\n      plant.stage = 'Brote';\n      plant.stageThreshold = plantConfigs[nextPlantType].stageThresholds.Joven;\n      plant.evolutionThreshold = plantConfigs[nextPlantType].evolutionThreshold;\n    }\n  }\n  \n  // Reset health to 100% when watered\n  plant.health = 100;\n  plant.lastWatered = new Date().toISOString();\n  \n  await savePlant(plant);\n  await updateLastActivity(); // Update last activity when watering plant\n  return { plant, success: true };\n};\n\n// Get time until next free water collection\nexport const getTimeUntilNextFreeWater = (plant: Plant): number => {\n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  \n  // 24 hours in milliseconds\n  const oneDayMs = 24 * 60 * 60 * 1000;\n  \n  // Calculate time until next collection\n  const nextCollectionTime = new Date(lastCollected.getTime() + oneDayMs);\n  const timeUntilNextMs = Math.max(0, nextCollectionTime.getTime() - now.getTime());\n  \n  // Return hours until next collection\n  return Math.ceil(timeUntilNextMs / (60 * 60 * 1000));\n};\n\n// Get plant progress percentage for current stage\nexport const getPlantProgressPercentage = (plant: Plant): number => {\n  const config = plantConfigs[plant.type];\n  const { stage, waterAccumulated } = plant;\n  \n  if (stage === 'Brote') {\n    return (waterAccumulated / config.stageThresholds.Joven) * 100;\n  } else if (stage === 'Joven') {\n    const min = config.stageThresholds.Joven;\n    const max = config.stageThresholds.Adulta;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  } else if (stage === 'Adulta') {\n    const min = config.stageThresholds.Adulta;\n    const max = config.stageThresholds.Florecida;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  } else {\n    const min = config.stageThresholds.Florecida;\n    const max = config.evolutionThreshold;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  }\n};\n\n// Get plant evolution progress percentage\nexport const getPlantEvolutionPercentage = (plant: Plant): number => {\n  return (plant.waterAccumulated / plant.evolutionThreshold) * 100;\n};\n\n// Get plant image URL based on type and stage\nexport const getPlantImageUrl = (plant: Plant): string => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}${plant.type.toLowerCase()}_${plant.stage.toLowerCase()}.png`;\n};\n\n// Get pot image URL\nexport const getPotImageUrl = (potColor: string = 'default'): string => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}pot_${potColor}.png`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}