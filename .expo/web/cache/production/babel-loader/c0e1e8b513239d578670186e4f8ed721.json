{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import AsyncStorage from'@react-native-async-storage/async-storage';var PLANT_STORAGE_KEY='meteo_plant_data';var PLANT_REWARDS_KEY='meteo_plant_rewards';var LAST_ACTIVITY_KEY='meteo_last_activity';var plantConfigs={'Cactus':{type:'Cactus',waterRequirement:2,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Suculenta':{type:'Suculenta',waterRequirement:3,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Aloe':{type:'Aloe',waterRequirement:3,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Lavanda':{type:'Lavanda',waterRequirement:4,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Jade':{type:'Jade',waterRequirement:4,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Girasol':{type:'Girasol',waterRequirement:5,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Rosa':{type:'Rosa',waterRequirement:6,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Orquídea':{type:'Orquídea',waterRequirement:6,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Monstera':{type:'Monstera',waterRequirement:7,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Hibisco':{type:'Hibisco',waterRequirement:7,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Bambú':{type:'Bambú',waterRequirement:8,stageThresholds:{Brote:0,Joven:31,Adulta:81,Florecida:151},evolutionThreshold:250},'Helecho':{type:'Helecho',waterRequirement:9,stageThresholds:{Brote:0,Joven:31,Adulta:81,Florecida:151},evolutionThreshold:250}};var getPlantStage=function getPlantStage(plant){var config=plantConfigs[plant.type];var waterAccumulated=plant.waterAccumulated;if(waterAccumulated>=config.stageThresholds.Florecida){return'Florecida';}else if(waterAccumulated>=config.stageThresholds.Adulta){return'Adulta';}else if(waterAccumulated>=config.stageThresholds.Joven){return'Joven';}else{return'Brote';}};export var updateLastActivity=function(){var _ref=_asyncToGenerator(function*(){try{var now=new Date().toISOString();yield AsyncStorage.setItem(LAST_ACTIVITY_KEY,now);}catch(error){console.error('Error updating last activity:',error);}});return function updateLastActivity(){return _ref.apply(this,arguments);};}();export var getLastActivity=function(){var _ref2=_asyncToGenerator(function*(){try{return yield AsyncStorage.getItem(LAST_ACTIVITY_KEY);}catch(error){console.error('Error getting last activity:',error);return null;}});return function getLastActivity(){return _ref2.apply(this,arguments);};}();export var initializePlant=function(){var _ref3=_asyncToGenerator(function*(){var newPlant={id:Date.now(),name:'Mi Planta',type:'Cactus',stage:'Brote',waterRequirement:plantConfigs['Cactus'].waterRequirement,waterAccumulated:0,health:100,lastWatered:new Date().toISOString(),stageThreshold:plantConfigs['Cactus'].stageThresholds.Joven,evolutionThreshold:plantConfigs['Cactus'].evolutionThreshold,waterAvailable:5,lastFreeWaterCollected:new Date().toISOString()};yield savePlant(newPlant);yield updateLastActivity();return newPlant;});return function initializePlant(){return _ref3.apply(this,arguments);};}();export var getPlant=function(){var _ref4=_asyncToGenerator(function*(){try{var plantData=yield AsyncStorage.getItem(PLANT_STORAGE_KEY);if(!plantData)return null;var plant=JSON.parse(plantData);if(plant.waterAvailable===undefined){plant.waterAvailable=5;}if(plant.lastFreeWaterCollected===undefined){plant.lastFreeWaterCollected=new Date().toISOString();}var updatedPlant=yield updatePlantHealthBasedOnInactivity(plant);return updatedPlant;}catch(error){console.error('Error getting plant data:',error);return null;}});return function getPlant(){return _ref4.apply(this,arguments);};}();export var savePlant=function(){var _ref5=_asyncToGenerator(function*(plant){try{yield AsyncStorage.setItem(PLANT_STORAGE_KEY,JSON.stringify(plant));}catch(error){console.error('Error saving plant data:',error);}});return function savePlant(_x){return _ref5.apply(this,arguments);};}();export var updatePlantHealthBasedOnInactivity=function(){var _ref6=_asyncToGenerator(function*(plant){var lastActivityStr=yield getLastActivity();if(!lastActivityStr){yield updateLastActivity();return plant;}var now=new Date();var lastActivity=new Date(lastActivityStr);var hoursSinceActivity=Math.floor((now.getTime()-lastActivity.getTime())/(1000*60*60));if(hoursSinceActivity>=72){console.log('Plant died due to player inactivity for 72 hours');var newPlant=yield initializePlant();return newPlant;}if(hoursSinceActivity>0){var healthReduction=Math.min(plant.health,hoursSinceActivity);plant.health-=healthReduction;if(plant.health<=0){console.log('Plant died due to health reaching 0 from inactivity');var _newPlant=yield initializePlant();return _newPlant;}yield savePlant(plant);}yield updateLastActivity();return plant;});return function updatePlantHealthBasedOnInactivity(_x2){return _ref6.apply(this,arguments);};}();export var updatePlantHealth=function(){var _ref7=_asyncToGenerator(function*(){var plant=yield getPlant();if(!plant)return null;var now=new Date();var lastWatered=new Date(plant.lastWatered);var hoursPassed=Math.floor((now.getTime()-lastWatered.getTime())/(1000*60*60));if(hoursPassed>=72){console.log('Plant died due to lack of water for 72 hours');var newPlant=yield initializePlant();return newPlant;}var daysPassed=Math.floor(hoursPassed/24);if(daysPassed>0){var healthReduction=Math.min(plant.health,20*daysPassed);plant.health-=healthReduction;if(plant.health<=0){var _newPlant2=yield initializePlant();return _newPlant2;}plant.lastWatered=now.toISOString();yield savePlant(plant);}return plant;});return function updatePlantHealth(){return _ref7.apply(this,arguments);};}();export var addWaterFromBet=function(){var _ref8=_asyncToGenerator(function*(betType,success){if(!success)return yield getPlant();var plant=yield getPlant();if(!plant){plant=yield initializePlant();}var waterAmount=betType==='rain'?5:10;plant.waterAvailable+=waterAmount;yield savePlant(plant);yield updateLastActivity();return plant;});return function addWaterFromBet(_x3,_x4){return _ref8.apply(this,arguments);};}();var getNextPlantType=function getNextPlantType(currentType){var evolutionOrder=['Cactus','Suculenta','Aloe','Lavanda','Jade','Girasol','Rosa','Orquídea','Monstera','Hibisco','Bambú','Helecho'];var currentIndex=evolutionOrder.indexOf(currentType);if(currentIndex===-1||currentIndex===evolutionOrder.length-1){return null;}return evolutionOrder[currentIndex+1];};export var getPendingRewards=function(){var _ref9=_asyncToGenerator(function*(){try{var rewardsData=yield AsyncStorage.getItem(PLANT_REWARDS_KEY);if(!rewardsData)return 0;var rewards=JSON.parse(rewardsData);return rewards.amount||0;}catch(error){console.error('Error getting pending rewards:',error);return 0;}});return function getPendingRewards(){return _ref9.apply(this,arguments);};}();export var addPendingReward=function(){var _ref10=_asyncToGenerator(function*(betType,success){if(!success)return;try{var waterAmount=betType==='rain'?5:10;var rewardsData=yield AsyncStorage.getItem(PLANT_REWARDS_KEY);var rewards={amount:0};if(rewardsData){rewards=JSON.parse(rewardsData);}rewards.amount=(rewards.amount||0)+waterAmount;yield AsyncStorage.setItem(PLANT_REWARDS_KEY,JSON.stringify(rewards));yield updateLastActivity();}catch(error){console.error('Error adding pending reward:',error);}});return function addPendingReward(_x5,_x6){return _ref10.apply(this,arguments);};}();export var claimPendingRewards=function(){var _ref11=_asyncToGenerator(function*(){try{var pendingRewards=yield getPendingRewards();if(pendingRewards<=0)return yield getPlant();var plant=yield getPlant();if(!plant){plant=yield initializePlant();}plant.waterAvailable+=pendingRewards;plant.health=100;plant.lastWatered=new Date().toISOString();yield savePlant(plant);yield updateLastActivity();yield AsyncStorage.setItem(PLANT_REWARDS_KEY,JSON.stringify({amount:0}));return plant;}catch(error){console.error('Error claiming rewards:',error);return null;}});return function claimPendingRewards(){return _ref11.apply(this,arguments);};}();export var collectDailyFreeWater=function(){var _ref12=_asyncToGenerator(function*(){var plant=yield getPlant();if(!plant){plant=yield initializePlant();return{plant:plant,collected:false};}var now=new Date();var lastCollected=new Date(plant.lastFreeWaterCollected);var hoursPassed=Math.floor((now.getTime()-lastCollected.getTime())/(1000*60*60));if(hoursPassed>=24){plant.waterAvailable+=1;plant.lastFreeWaterCollected=now.toISOString();yield savePlant(plant);yield updateLastActivity();return{plant:plant,collected:true};}return{plant:plant,collected:false};});return function collectDailyFreeWater(){return _ref12.apply(this,arguments);};}();export var waterPlant=function(){var _ref13=_asyncToGenerator(function*(amount){var plant=yield getPlant();if(!plant){plant=yield initializePlant();}if(plant.waterAvailable<amount){return{plant:plant,success:false};}plant.waterAvailable-=amount;plant.waterAccumulated+=amount;var updatedStage=getPlantStage(plant);if(updatedStage!==plant.stage){plant.stage=updatedStage;}if(plant.waterAccumulated>=plant.evolutionThreshold){var nextPlantType=getNextPlantType(plant.type);if(nextPlantType){plant.type=nextPlantType;plant.waterRequirement=plantConfigs[nextPlantType].waterRequirement;plant.waterAccumulated=0;plant.stage='Brote';plant.stageThreshold=plantConfigs[nextPlantType].stageThresholds.Joven;plant.evolutionThreshold=plantConfigs[nextPlantType].evolutionThreshold;}}plant.health=100;plant.lastWatered=new Date().toISOString();yield savePlant(plant);yield updateLastActivity();return{plant:plant,success:true};});return function waterPlant(_x7){return _ref13.apply(this,arguments);};}();export var getTimeUntilNextFreeWater=function getTimeUntilNextFreeWater(plant){var now=new Date();var lastCollected=new Date(plant.lastFreeWaterCollected);var oneDayMs=24*60*60*1000;var nextCollectionTime=new Date(lastCollected.getTime()+oneDayMs);var timeUntilNextMs=Math.max(0,nextCollectionTime.getTime()-now.getTime());return Math.ceil(timeUntilNextMs/(60*60*1000));};export var getPlantProgressPercentage=function getPlantProgressPercentage(plant){var config=plantConfigs[plant.type];var stage=plant.stage,waterAccumulated=plant.waterAccumulated;if(stage==='Brote'){return waterAccumulated/config.stageThresholds.Joven*100;}else if(stage==='Joven'){var min=config.stageThresholds.Joven;var max=config.stageThresholds.Adulta;return(waterAccumulated-min)/(max-min)*100;}else if(stage==='Adulta'){var _min=config.stageThresholds.Adulta;var _max=config.stageThresholds.Florecida;return(waterAccumulated-_min)/(_max-_min)*100;}else{var _min2=config.stageThresholds.Florecida;var _max2=config.evolutionThreshold;return(waterAccumulated-_min2)/(_max2-_min2)*100;}};export var getPlantEvolutionPercentage=function getPlantEvolutionPercentage(plant){return plant.waterAccumulated/plant.evolutionThreshold*100;};export var getPlantImageUrl=function getPlantImageUrl(plant){var baseUrl='https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';return\"\"+baseUrl+plant.type.toLowerCase()+\"_\"+plant.stage.toLowerCase()+\".png\";};export var getPotImageUrl=function getPotImageUrl(){var potColor=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'default';var baseUrl='https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';return baseUrl+\"pot_\"+potColor+\".png\";};","map":{"version":3,"names":["AsyncStorage","PLANT_STORAGE_KEY","PLANT_REWARDS_KEY","LAST_ACTIVITY_KEY","plantConfigs","type","waterRequirement","stageThresholds","Brote","Joven","Adulta","Florecida","evolutionThreshold","getPlantStage","plant","config","waterAccumulated","updateLastActivity","_ref","_asyncToGenerator","now","Date","toISOString","setItem","error","console","apply","arguments","getLastActivity","_ref2","getItem","initializePlant","_ref3","newPlant","id","name","stage","health","lastWatered","stageThreshold","waterAvailable","lastFreeWaterCollected","savePlant","getPlant","_ref4","plantData","JSON","parse","undefined","updatedPlant","updatePlantHealthBasedOnInactivity","_ref5","stringify","_x","_ref6","lastActivityStr","lastActivity","hoursSinceActivity","Math","floor","getTime","log","healthReduction","min","_x2","updatePlantHealth","_ref7","hoursPassed","daysPassed","addWaterFromBet","_ref8","betType","success","waterAmount","_x3","_x4","getNextPlantType","currentType","evolutionOrder","currentIndex","indexOf","length","getPendingRewards","_ref9","rewardsData","rewards","amount","addPendingReward","_ref10","_x5","_x6","claimPendingRewards","_ref11","pendingRewards","collectDailyFreeWater","_ref12","collected","lastCollected","waterPlant","_ref13","updatedStage","nextPlantType","_x7","getTimeUntilNextFreeWater","oneDayMs","nextCollectionTime","timeUntilNextMs","max","ceil","getPlantProgressPercentage","getPlantEvolutionPercentage","getPlantImageUrl","baseUrl","toLowerCase","getPotImageUrl","potColor"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/plantService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Plant, PlantType, PlantStage, PlantConfig } from '../types/plant';\n\nconst PLANT_STORAGE_KEY = 'meteo_plant_data';\nconst PLANT_REWARDS_KEY = 'meteo_plant_rewards';\nconst LAST_ACTIVITY_KEY = 'meteo_last_activity';\n\n// Plant configurations\nconst plantConfigs: Record<PlantType, PlantConfig> = {\n  'Cactus': {\n    type: 'Cactus',\n    waterRequirement: 2,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Suculenta': {\n    type: 'Suculenta',\n    waterRequirement: 3,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Aloe': {\n    type: 'Aloe',\n    waterRequirement: 3,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Lavanda': {\n    type: 'Lavanda',\n    waterRequirement: 4,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Jade': {\n    type: 'Jade',\n    waterRequirement: 4,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Girasol': {\n    type: 'Girasol',\n    waterRequirement: 5,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Rosa': {\n    type: 'Rosa',\n    waterRequirement: 6,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Orquídea': {\n    type: 'Orquídea',\n    waterRequirement: 6,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Monstera': {\n    type: 'Monstera',\n    waterRequirement: 7,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Hibisco': {\n    type: 'Hibisco',\n    waterRequirement: 7,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Bambú': {\n    type: 'Bambú',\n    waterRequirement: 8,\n    stageThresholds: { Brote: 0, Joven: 31, Adulta: 81, Florecida: 151 },\n    evolutionThreshold: 250\n  },\n  'Helecho': {\n    type: 'Helecho',\n    waterRequirement: 9,\n    stageThresholds: { Brote: 0, Joven: 31, Adulta: 81, Florecida: 151 },\n    evolutionThreshold: 250\n  }\n};\n\n// Get plant stage based on water accumulated\nconst getPlantStage = (plant: Plant): PlantStage => {\n  const config = plantConfigs[plant.type];\n  const { waterAccumulated } = plant;\n  \n  if (waterAccumulated >= config.stageThresholds.Florecida) {\n    return 'Florecida';\n  } else if (waterAccumulated >= config.stageThresholds.Adulta) {\n    return 'Adulta';\n  } else if (waterAccumulated >= config.stageThresholds.Joven) {\n    return 'Joven';\n  } else {\n    return 'Brote';\n  }\n};\n\n// Update last activity timestamp\nexport const updateLastActivity = async (): Promise<void> => {\n  try {\n    const now = new Date().toISOString();\n    await AsyncStorage.setItem(LAST_ACTIVITY_KEY, now);\n  } catch (error) {\n    console.error('Error updating last activity:', error);\n  }\n};\n\n// Get last activity timestamp\nexport const getLastActivity = async (): Promise<string | null> => {\n  try {\n    return await AsyncStorage.getItem(LAST_ACTIVITY_KEY);\n  } catch (error) {\n    console.error('Error getting last activity:', error);\n    return null;\n  }\n};\n\n// Initialize a new plant\nexport const initializePlant = async (): Promise<Plant> => {\n  const newPlant: Plant = {\n    id: Date.now(),\n    name: 'Mi Planta',\n    type: 'Cactus',\n    stage: 'Brote',\n    waterRequirement: plantConfigs['Cactus'].waterRequirement,\n    waterAccumulated: 0,\n    health: 100,\n    lastWatered: new Date().toISOString(),\n    stageThreshold: plantConfigs['Cactus'].stageThresholds.Joven,\n    evolutionThreshold: plantConfigs['Cactus'].evolutionThreshold,\n    waterAvailable: 5, // Start with 5 units of water\n    lastFreeWaterCollected: new Date().toISOString()\n  };\n  \n  await savePlant(newPlant);\n  await updateLastActivity(); // Initialize last activity\n  return newPlant;\n};\n\n// Get current plant data\nexport const getPlant = async (): Promise<Plant | null> => {\n  try {\n    const plantData = await AsyncStorage.getItem(PLANT_STORAGE_KEY);\n    if (!plantData) return null;\n    \n    const plant: Plant = JSON.parse(plantData);\n    \n    // Add waterAvailable and lastFreeWaterCollected if they don't exist (for backward compatibility)\n    if (plant.waterAvailable === undefined) {\n      plant.waterAvailable = 5;\n    }\n    if (plant.lastFreeWaterCollected === undefined) {\n      plant.lastFreeWaterCollected = new Date().toISOString();\n    }\n    \n    // Update plant health based on inactivity\n    const updatedPlant = await updatePlantHealthBasedOnInactivity(plant);\n    \n    return updatedPlant;\n  } catch (error) {\n    console.error('Error getting plant data:', error);\n    return null;\n  }\n};\n\n// Save plant data\nexport const savePlant = async (plant: Plant): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(PLANT_STORAGE_KEY, JSON.stringify(plant));\n  } catch (error) {\n    console.error('Error saving plant data:', error);\n  }\n};\n\n// Update plant health based on player inactivity\nexport const updatePlantHealthBasedOnInactivity = async (plant: Plant): Promise<Plant> => {\n  const lastActivityStr = await getLastActivity();\n  \n  if (!lastActivityStr) {\n    // If no last activity is recorded, set it now and return plant unchanged\n    await updateLastActivity();\n    return plant;\n  }\n  \n  const now = new Date();\n  const lastActivity = new Date(lastActivityStr);\n  \n  // Calculate hours since last activity\n  const hoursSinceActivity = Math.floor((now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursSinceActivity >= 72) {\n    // Plant dies after 72 hours of inactivity\n    console.log('Plant died due to player inactivity for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  \n  if (hoursSinceActivity > 0) {\n    // Reduce health proportionally to inactivity time (1% per hour)\n    const healthReduction = Math.min(plant.health, hoursSinceActivity);\n    plant.health -= healthReduction;\n    \n    // If health reaches 0, reset plant\n    if (plant.health <= 0) {\n      console.log('Plant died due to health reaching 0 from inactivity');\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    \n    await savePlant(plant);\n  }\n  \n  // Update last activity to current time\n  await updateLastActivity();\n  \n  return plant;\n};\n\n// Update plant health based on daily water requirement and check for plant death\nexport const updatePlantHealth = async (): Promise<Plant | null> => {\n  const plant = await getPlant();\n  if (!plant) return null;\n  \n  const now = new Date();\n  const lastWatered = new Date(plant.lastWatered);\n  \n  // Check if 72 hours (3 days) have passed since last watering\n  const hoursPassed = Math.floor((now.getTime() - lastWatered.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursPassed >= 72) {\n    // Plant dies after 72 hours without water\n    console.log('Plant died due to lack of water for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  \n  // Check if a day has passed since last update\n  const daysPassed = Math.floor(hoursPassed / 24);\n  \n  if (daysPassed > 0) {\n    // Reduce health by 20% for each day without meeting water requirement\n    const healthReduction = Math.min(plant.health, 20 * daysPassed);\n    plant.health -= healthReduction;\n    \n    // If health reaches 0, reset plant\n    if (plant.health <= 0) {\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    \n    plant.lastWatered = now.toISOString();\n    await savePlant(plant);\n  }\n  \n  return plant;\n};\n\n// Add water to plant from successful bets\nexport const addWaterFromBet = async (betType: 'rain' | 'temp_min' | 'temp_max', success: boolean): Promise<Plant | null> => {\n  if (!success) return await getPlant();\n  \n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  \n  // Water amounts for different bet types\n  const waterAmount = betType === 'rain' ? 5 : 10;\n  \n  // Add water to plant's available water\n  plant.waterAvailable += waterAmount;\n  \n  await savePlant(plant);\n  await updateLastActivity(); // Update last activity when adding water from bet\n  return plant;\n};\n\n// Get next plant type in evolution\nconst getNextPlantType = (currentType: PlantType): PlantType | null => {\n  const evolutionOrder: PlantType[] = [\n    'Cactus', 'Suculenta', 'Aloe', 'Lavanda', 'Jade',\n    'Girasol', 'Rosa', 'Orquídea', 'Monstera', 'Hibisco',\n    'Bambú', 'Helecho'\n  ];\n  \n  const currentIndex = evolutionOrder.indexOf(currentType);\n  if (currentIndex === -1 || currentIndex === evolutionOrder.length - 1) {\n    return null; // Already at max evolution or invalid type\n  }\n  \n  return evolutionOrder[currentIndex + 1];\n};\n\n// Get pending rewards from successful bets\nexport const getPendingRewards = async (): Promise<number> => {\n  try {\n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    if (!rewardsData) return 0;\n    \n    const rewards = JSON.parse(rewardsData);\n    return rewards.amount || 0;\n  } catch (error) {\n    console.error('Error getting pending rewards:', error);\n    return 0;\n  }\n};\n\n// Add pending reward\nexport const addPendingReward = async (betType: 'rain' | 'temp_min' | 'temp_max', success: boolean): Promise<void> => {\n  if (!success) return;\n  \n  try {\n    const waterAmount = betType === 'rain' ? 5 : 10;\n    \n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    let rewards = { amount: 0 };\n    \n    if (rewardsData) {\n      rewards = JSON.parse(rewardsData);\n    }\n    \n    rewards.amount = (rewards.amount || 0) + waterAmount;\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify(rewards));\n    await updateLastActivity(); // Update last activity when adding pending reward\n  } catch (error) {\n    console.error('Error adding pending reward:', error);\n  }\n};\n\n// Claim pending rewards\nexport const claimPendingRewards = async (): Promise<Plant | null> => {\n  try {\n    const pendingRewards = await getPendingRewards();\n    if (pendingRewards <= 0) return await getPlant();\n    \n    let plant = await getPlant();\n    if (!plant) {\n      plant = await initializePlant();\n    }\n    \n    // Add water to plant's available water\n    plant.waterAvailable += pendingRewards;\n    \n    // Reset health to 100% when watered\n    plant.health = 100;\n    plant.lastWatered = new Date().toISOString();\n    \n    await savePlant(plant);\n    await updateLastActivity(); // Update last activity when claiming rewards\n    \n    // Clear pending rewards\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify({ amount: 0 }));\n    \n    return plant;\n  } catch (error) {\n    console.error('Error claiming rewards:', error);\n    return null;\n  }\n};\n\n// Collect daily free water (1 unit)\nexport const collectDailyFreeWater = async (): Promise<{plant: Plant | null, collected: boolean}> => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n    return { plant, collected: false };\n  }\n  \n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  \n  // Check if 24 hours have passed since last collection\n  const hoursPassed = Math.floor((now.getTime() - lastCollected.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursPassed >= 24) {\n    // Add 1 unit of free water\n    plant.waterAvailable += 1;\n    plant.lastFreeWaterCollected = now.toISOString();\n    \n    await savePlant(plant);\n    await updateLastActivity(); // Update last activity when collecting free water\n    return { plant, collected: true };\n  }\n  \n  return { plant, collected: false };\n};\n\n// Water plant manually\nexport const waterPlant = async (amount: number): Promise<{plant: Plant | null, success: boolean}> => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  \n  // Check if user has enough water available\n  if (plant.waterAvailable < amount) {\n    return { plant, success: false };\n  }\n  \n  // Deduct water from available water\n  plant.waterAvailable -= amount;\n  \n  // Add water to plant\n  plant.waterAccumulated += amount;\n  \n  // Check if plant should evolve to next stage\n  const updatedStage = getPlantStage(plant);\n  if (updatedStage !== plant.stage) {\n    plant.stage = updatedStage;\n  }\n  \n  // Check if plant should evolve to next type\n  if (plant.waterAccumulated >= plant.evolutionThreshold) {\n    const nextPlantType = getNextPlantType(plant.type);\n    if (nextPlantType) {\n      plant.type = nextPlantType;\n      plant.waterRequirement = plantConfigs[nextPlantType].waterRequirement;\n      plant.waterAccumulated = 0;\n      plant.stage = 'Brote';\n      plant.stageThreshold = plantConfigs[nextPlantType].stageThresholds.Joven;\n      plant.evolutionThreshold = plantConfigs[nextPlantType].evolutionThreshold;\n    }\n  }\n  \n  // Reset health to 100% when watered\n  plant.health = 100;\n  plant.lastWatered = new Date().toISOString();\n  \n  await savePlant(plant);\n  await updateLastActivity(); // Update last activity when watering plant\n  return { plant, success: true };\n};\n\n// Get time until next free water collection\nexport const getTimeUntilNextFreeWater = (plant: Plant): number => {\n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  \n  // 24 hours in milliseconds\n  const oneDayMs = 24 * 60 * 60 * 1000;\n  \n  // Calculate time until next collection\n  const nextCollectionTime = new Date(lastCollected.getTime() + oneDayMs);\n  const timeUntilNextMs = Math.max(0, nextCollectionTime.getTime() - now.getTime());\n  \n  // Return hours until next collection\n  return Math.ceil(timeUntilNextMs / (60 * 60 * 1000));\n};\n\n// Get plant progress percentage for current stage\nexport const getPlantProgressPercentage = (plant: Plant): number => {\n  const config = plantConfigs[plant.type];\n  const { stage, waterAccumulated } = plant;\n  \n  if (stage === 'Brote') {\n    return (waterAccumulated / config.stageThresholds.Joven) * 100;\n  } else if (stage === 'Joven') {\n    const min = config.stageThresholds.Joven;\n    const max = config.stageThresholds.Adulta;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  } else if (stage === 'Adulta') {\n    const min = config.stageThresholds.Adulta;\n    const max = config.stageThresholds.Florecida;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  } else {\n    const min = config.stageThresholds.Florecida;\n    const max = config.evolutionThreshold;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  }\n};\n\n// Get plant evolution progress percentage\nexport const getPlantEvolutionPercentage = (plant: Plant): number => {\n  return (plant.waterAccumulated / plant.evolutionThreshold) * 100;\n};\n\n// Get plant image URL based on type and stage\nexport const getPlantImageUrl = (plant: Plant): string => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}${plant.type.toLowerCase()}_${plant.stage.toLowerCase()}.png`;\n};\n\n// Get pot image URL\nexport const getPotImageUrl = (potColor: string = 'default'): string => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}pot_${potColor}.png`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}