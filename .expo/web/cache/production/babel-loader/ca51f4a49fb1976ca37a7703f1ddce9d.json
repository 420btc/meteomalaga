{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{fetchCurrentRainData,fetchCurrentTemperatureData,fetchCurrentWindData}from\"../services/weatherService\";import AsyncStorage from'@react-native-async-storage/async-storage';var PENDING_RESOLUTIONS_KEY='pendingBetResolutions';var FAILED_RESOLUTIONS_KEY='failedBetResolutions';var RESOLUTION_ATTEMPTS_KEY='betResolutionAttempts';var MAX_RETRY_ATTEMPTS=5;export var resolveBet=function(){var _ref=_asyncToGenerator(function*(bet){try{if(bet.verified||bet.status==='ganada'||bet.status==='perdida'){return bet;}var now=new Date();var verificationTime=new Date(bet.verificationTime||'');if(isNaN(verificationTime.getTime())){console.error('Tiempo de verificación inválido para la apuesta:',bet.id);yield logResolutionError(bet,'Tiempo de verificación inválido');return _objectSpread(_objectSpread({},bet),{},{resolution_explanation:'No se pudo resolver: tiempo de verificación inválido. Se reintentará más tarde.'});}if(now<verificationTime){return bet;}yield recordResolutionAttempt(bet);var _yield$Promise$all=yield Promise.all([fetchCurrentRainData().catch(function(error){console.error('Error al obtener datos de lluvia:',error);return null;}),fetchCurrentTemperatureData().catch(function(error){console.error('Error al obtener datos de temperatura:',error);return null;}),fetchCurrentWindData().catch(function(error){console.error('Error al obtener datos de viento:',error);return null;})]),_yield$Promise$all2=_slicedToArray(_yield$Promise$all,3),currentRainAmount=_yield$Promise$all2[0],currentTemperature=_yield$Promise$all2[1],currentWind=_yield$Promise$all2[2];if((bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount')&&currentRainAmount===null||(bet.option==='temp_min'||bet.option==='temp_max'||bet.option==='temperature')&&currentTemperature===null||bet.option==='wind_max'&&currentWind===null){console.error('Datos meteorológicos no disponibles para resolver la apuesta:',bet.id);yield addToPendingResolutions(bet);return _objectSpread(_objectSpread({},bet),{},{resolution_explanation:'Resolución pendiente: no se pudieron obtener datos meteorológicos. Se reintentará automáticamente.'});}var result=0;var won=false;var resolution_explanation='';if(bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount'){result=currentRainAmount||0;if(bet.option==='rain_yes'){won=result>0;if(won){resolution_explanation=\"\\xA1Ganaste! Predijiste correctamente que llover\\xEDa. La cantidad de lluvia registrada fue de \"+result.toFixed(2)+\" mm.\";}else{resolution_explanation=\"Perdiste. Predijiste que llover\\xEDa, pero no se registr\\xF3 lluvia (0 mm). Las condiciones estaban secas durante el per\\xEDodo de verificaci\\xF3n.\";}}else if(bet.option==='rain_no'){won=result===0;if(won){resolution_explanation=\"\\xA1Ganaste! Predijiste correctamente que no llover\\xEDa. No se registr\\xF3 lluvia (0 mm) durante el per\\xEDodo de verificaci\\xF3n.\";}else{resolution_explanation=\"Perdiste. Predijiste que no llover\\xEDa, pero se registraron \"+result.toFixed(2)+\" mm de lluvia durante el per\\xEDodo de verificaci\\xF3n.\";}}else if(bet.option==='rain_amount'){var betValue=bet.rain_mm!==null?bet.rain_mm:bet.value;var margin=0.5;won=Math.abs((betValue||0)-result)<=margin;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de \"+betValue+\" mm de lluvia estaba dentro del margen de \\xB1\"+margin+\" mm del valor real (\"+result.toFixed(2)+\" mm).\";}else{var difference=Math.abs((betValue||0)-result).toFixed(2);resolution_explanation=\"Perdiste. Tu predicci\\xF3n de \"+betValue+\" mm de lluvia difer\\xEDa \"+difference+\" mm del valor real (\"+result.toFixed(2)+\" mm), superando el margen permitido de \\xB1\"+margin+\" mm.\";}}}else if(bet.option==='temp_min'){if(!currentTemperature){yield addToPendingResolutions(bet);return _objectSpread(_objectSpread({},bet),{},{resolution_explanation:'Resolución pendiente: no se pudieron obtener datos de temperatura. Se reintentará automáticamente.'});}result=currentTemperature.min;var _betValue=bet.temp_min_c!==null?bet.temp_min_c:bet.value;var _margin=1.0;won=Math.abs((_betValue||0)-result)<=_margin;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura m\\xEDnima de \"+_betValue+\"\\xB0C estaba dentro del margen de \\xB1\"+_margin+\"\\xB0C del valor real (\"+result.toFixed(1)+\"\\xB0C).\";}else{var _difference=Math.abs((_betValue||0)-result).toFixed(1);resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura m\\xEDnima de \"+_betValue+\"\\xB0C difer\\xEDa \"+_difference+\"\\xB0C del valor real (\"+result.toFixed(1)+\"\\xB0C), superando el margen permitido de \\xB1\"+_margin+\"\\xB0C.\";}}else if(bet.option==='temp_max'){if(!currentTemperature){yield addToPendingResolutions(bet);return _objectSpread(_objectSpread({},bet),{},{resolution_explanation:'Resolución pendiente: no se pudieron obtener datos de temperatura. Se reintentará automáticamente.'});}result=currentTemperature.max;var _betValue2=bet.temp_max_c!==null?bet.temp_max_c:bet.value;var _margin2=1.0;won=Math.abs((_betValue2||0)-result)<=_margin2;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura m\\xE1xima de \"+_betValue2+\"\\xB0C estaba dentro del margen de \\xB1\"+_margin2+\"\\xB0C del valor real (\"+result.toFixed(1)+\"\\xB0C).\";}else{var _difference2=Math.abs((_betValue2||0)-result).toFixed(1);resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura m\\xE1xima de \"+_betValue2+\"\\xB0C difer\\xEDa \"+_difference2+\"\\xB0C del valor real (\"+result.toFixed(1)+\"\\xB0C), superando el margen permitido de \\xB1\"+_margin2+\"\\xB0C.\";}}else if(bet.option==='temperature'){if(!currentTemperature){yield addToPendingResolutions(bet);return _objectSpread(_objectSpread({},bet),{},{resolution_explanation:'Resolución pendiente: no se pudieron obtener datos de temperatura. Se reintentará automáticamente.'});}result=currentTemperature.current;var _betValue3=bet.temperature_c!==null?bet.temperature_c:bet.value;var _margin3=1.0;won=Math.abs((_betValue3||0)-result)<=_margin3;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura actual de \"+_betValue3+\"\\xB0C estaba dentro del margen de \\xB1\"+_margin3+\"\\xB0C del valor real (\"+result.toFixed(1)+\"\\xB0C).\";}else{var _difference3=Math.abs((_betValue3||0)-result).toFixed(1);resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura actual de \"+_betValue3+\"\\xB0C difer\\xEDa \"+_difference3+\"\\xB0C del valor real (\"+result.toFixed(1)+\"\\xB0C), superando el margen permitido de \\xB1\"+_margin3+\"\\xB0C.\";}}else if(bet.option==='wind_max'){if(!currentWind){yield addToPendingResolutions(bet);return _objectSpread(_objectSpread({},bet),{},{resolution_explanation:'Resolución pendiente: no se pudieron obtener datos de viento. Se reintentará automáticamente.'});}result=currentWind.max;var _betValue4=bet.wind_kmh_max!==null?bet.wind_kmh_max:bet.value;var _margin4=3.0;won=Math.abs((_betValue4||0)-result)<=_margin4;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de velocidad m\\xE1xima del viento de \"+_betValue4+\" km/h estaba dentro del margen de \\xB1\"+_margin4+\" km/h del valor real (\"+result.toFixed(1)+\" km/h).\";}else{var _difference4=Math.abs((_betValue4||0)-result).toFixed(1);resolution_explanation=\"Perdiste. Tu predicci\\xF3n de velocidad m\\xE1xima del viento de \"+_betValue4+\" km/h difer\\xEDa \"+_difference4+\" km/h del valor real (\"+result.toFixed(1)+\" km/h), superando el margen permitido de \\xB1\"+_margin4+\" km/h.\";}}var resolvedBet=_objectSpread(_objectSpread({},bet),{},{result:result,won:won,verified:true,status:won?'ganada':'perdida',resolution_explanation:resolution_explanation});yield removeFromPendingResolutions(bet.id);return resolvedBet;}catch(error){console.error('Error al resolver la apuesta:',error,bet.id);yield logResolutionError(bet,error.message||'Error desconocido');yield addToPendingResolutions(bet);return _objectSpread(_objectSpread({},bet),{},{resolution_explanation:'Error al resolver la apuesta. Se reintentará automáticamente.'});}});return function resolveBet(_x){return _ref.apply(this,arguments);};}();export var resolveAllPendingBets=function(){var _ref2=_asyncToGenerator(function*(){try{var betsJson=yield AsyncStorage.getItem('local_bets');if(!betsJson)return;var bets=JSON.parse(betsJson);var now=new Date();var pendingBets=bets.filter(function(bet){return bet.status==='pending'&&!bet.verified&&new Date(bet.verificationTime||'')<=now;});if(pendingBets.length===0)return;var updatedBets=_toConsumableArray(bets);var hasChanges=false;var _loop=function*_loop(bet){var resolvedBet=yield resolveBet(bet);if(resolvedBet.verified!==bet.verified||resolvedBet.status!==bet.status||resolvedBet.result!==bet.result||resolvedBet.won!==bet.won){var index=updatedBets.findIndex(function(b){return b.id===bet.id;});if(index!==-1){updatedBets[index]=resolvedBet;hasChanges=true;}}};for(var bet of pendingBets){yield*_loop(bet);}if(hasChanges){yield AsyncStorage.setItem('local_bets',JSON.stringify(updatedBets));}yield retryPendingResolutions();}catch(error){console.error('Error al resolver apuestas pendientes:',error);}});return function resolveAllPendingBets(){return _ref2.apply(this,arguments);};}();var addToPendingResolutions=function(){var _ref3=_asyncToGenerator(function*(bet){try{var pendingJson=yield AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);var pendingBets=pendingJson?JSON.parse(pendingJson):[];if(!pendingBets.includes(bet.id)){pendingBets.push(bet.id);yield AsyncStorage.setItem(PENDING_RESOLUTIONS_KEY,JSON.stringify(pendingBets));}}catch(error){console.error('Error al agregar a resoluciones pendientes:',error);}});return function addToPendingResolutions(_x2){return _ref3.apply(this,arguments);};}();var removeFromPendingResolutions=function(){var _ref4=_asyncToGenerator(function*(betId){try{var pendingJson=yield AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);if(!pendingJson)return;var pendingBets=JSON.parse(pendingJson);var updatedPending=pendingBets.filter(function(id){return id!==betId;});yield AsyncStorage.setItem(PENDING_RESOLUTIONS_KEY,JSON.stringify(updatedPending));}catch(error){console.error('Error al eliminar de resoluciones pendientes:',error);}});return function removeFromPendingResolutions(_x3){return _ref4.apply(this,arguments);};}();var logResolutionError=function(){var _ref5=_asyncToGenerator(function*(bet,errorMessage){try{var _failedResolutions$be;var failedJson=yield AsyncStorage.getItem(FAILED_RESOLUTIONS_KEY);var failedResolutions=failedJson?JSON.parse(failedJson):{};failedResolutions[bet.id]={count:(((_failedResolutions$be=failedResolutions[bet.id])==null?void 0:_failedResolutions$be.count)||0)+1,lastError:errorMessage,timestamp:new Date().toISOString()};yield AsyncStorage.setItem(FAILED_RESOLUTIONS_KEY,JSON.stringify(failedResolutions));}catch(error){console.error('Error al registrar error de resolución:',error);}});return function logResolutionError(_x4,_x5){return _ref5.apply(this,arguments);};}();var recordResolutionAttempt=function(){var _ref6=_asyncToGenerator(function*(bet){try{var attemptsJson=yield AsyncStorage.getItem(RESOLUTION_ATTEMPTS_KEY);var attempts=attemptsJson?JSON.parse(attemptsJson):{};attempts[bet.id]=(attempts[bet.id]||0)+1;yield AsyncStorage.setItem(RESOLUTION_ATTEMPTS_KEY,JSON.stringify(attempts));}catch(error){console.error('Error al registrar intento de resolución:',error);}});return function recordResolutionAttempt(_x6){return _ref6.apply(this,arguments);};}();var retryPendingResolutions=function(){var _ref7=_asyncToGenerator(function*(){try{var pendingJson=yield AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);if(!pendingJson)return;var pendingBetIds=JSON.parse(pendingJson);if(pendingBetIds.length===0)return;var betsJson=yield AsyncStorage.getItem('local_bets');if(!betsJson)return;var bets=JSON.parse(betsJson);var updatedBets=_toConsumableArray(bets);var hasChanges=false;var attemptsJson=yield AsyncStorage.getItem(RESOLUTION_ATTEMPTS_KEY);var attempts=attemptsJson?JSON.parse(attemptsJson):{};var _loop2=function*_loop2(betId){if((attempts[betId]||0)>=MAX_RETRY_ATTEMPTS){console.warn(\"M\\xE1ximo de intentos alcanzado para la apuesta \"+betId+\". Marcando como fallida.\");var index=updatedBets.findIndex(function(b){return b.id===betId;});if(index!==-1){updatedBets[index]=_objectSpread(_objectSpread({},updatedBets[index]),{},{status:'error',verified:true,resolution_explanation:'No se pudo resolver la apuesta después de múltiples intentos. Por favor, contacta con soporte.'});hasChanges=true;}yield removeFromPendingResolutions(betId);return 0;}var bet=bets.find(function(b){return b.id===betId;});if(!bet){yield removeFromPendingResolutions(betId);return 0;}var resolvedBet=yield resolveBet(bet);if(resolvedBet.verified&&(resolvedBet.status==='ganada'||resolvedBet.status==='perdida')){var _index=updatedBets.findIndex(function(b){return b.id===betId;});if(_index!==-1){updatedBets[_index]=resolvedBet;hasChanges=true;}yield removeFromPendingResolutions(betId);}},_ret;for(var betId of pendingBetIds){_ret=yield*_loop2(betId);if(_ret===0)continue;}if(hasChanges){yield AsyncStorage.setItem('local_bets',JSON.stringify(updatedBets));}}catch(error){console.error('Error al reintentar resoluciones pendientes:',error);}});return function retryPendingResolutions(){return _ref7.apply(this,arguments);};}();export var cleanupResolutionData=function(){var _ref8=_asyncToGenerator(function*(){try{var attemptsJson=yield AsyncStorage.getItem(RESOLUTION_ATTEMPTS_KEY);if(attemptsJson){var attempts=JSON.parse(attemptsJson);var betsJson=yield AsyncStorage.getItem('local_bets');var bets=betsJson?JSON.parse(betsJson):[];var currentBetIds=new Set(bets.map(function(bet){return bet.id;}));var updatedAttempts={};for(var _ref9 of Object.entries(attempts)){var _ref10=_slicedToArray(_ref9,2);var betId=_ref10[0];var count=_ref10[1];if(currentBetIds.has(betId)){updatedAttempts[betId]=count;}}yield AsyncStorage.setItem(RESOLUTION_ATTEMPTS_KEY,JSON.stringify(updatedAttempts));}var failedJson=yield AsyncStorage.getItem(FAILED_RESOLUTIONS_KEY);if(failedJson){var failedResolutions=JSON.parse(failedJson);var _betsJson=yield AsyncStorage.getItem('local_bets');var _bets=_betsJson?JSON.parse(_betsJson):[];var _currentBetIds=new Set(_bets.map(function(bet){return bet.id;}));var updatedFailedResolutions={};for(var _ref11 of Object.entries(failedResolutions)){var _ref12=_slicedToArray(_ref11,2);var _betId=_ref12[0];var data=_ref12[1];if(_currentBetIds.has(_betId)){updatedFailedResolutions[_betId]=data;}}yield AsyncStorage.setItem(FAILED_RESOLUTIONS_KEY,JSON.stringify(updatedFailedResolutions));}var pendingJson=yield AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);if(pendingJson){var pendingBetIds=JSON.parse(pendingJson);var _betsJson2=yield AsyncStorage.getItem('local_bets');var _bets2=_betsJson2?JSON.parse(_betsJson2):[];var _currentBetIds2=new Set(_bets2.map(function(bet){return bet.id;}));var updatedPendingBetIds=pendingBetIds.filter(function(id){return _currentBetIds2.has(id);});yield AsyncStorage.setItem(PENDING_RESOLUTIONS_KEY,JSON.stringify(updatedPendingBetIds));}}catch(error){console.error('Error al limpiar datos de resolución:',error);}});return function cleanupResolutionData(){return _ref8.apply(this,arguments);};}();","map":{"version":3,"names":["fetchCurrentRainData","fetchCurrentTemperatureData","fetchCurrentWindData","AsyncStorage","PENDING_RESOLUTIONS_KEY","FAILED_RESOLUTIONS_KEY","RESOLUTION_ATTEMPTS_KEY","MAX_RETRY_ATTEMPTS","resolveBet","_ref","_asyncToGenerator","bet","verified","status","now","Date","verificationTime","isNaN","getTime","console","error","id","logResolutionError","_objectSpread","resolution_explanation","recordResolutionAttempt","_yield$Promise$all","Promise","all","catch","_yield$Promise$all2","_slicedToArray","currentRainAmount","currentTemperature","currentWind","option","addToPendingResolutions","result","won","toFixed","betValue","rain_mm","value","margin","Math","abs","difference","min","temp_min_c","max","temp_max_c","current","temperature_c","wind_kmh_max","resolvedBet","removeFromPendingResolutions","message","_x","apply","arguments","resolveAllPendingBets","_ref2","betsJson","getItem","bets","JSON","parse","pendingBets","filter","length","updatedBets","_toConsumableArray","hasChanges","_loop","index","findIndex","b","setItem","stringify","retryPendingResolutions","_ref3","pendingJson","includes","push","_x2","_ref4","betId","updatedPending","_x3","_ref5","errorMessage","_failedResolutions$be","failedJson","failedResolutions","count","lastError","timestamp","toISOString","_x4","_x5","_ref6","attemptsJson","attempts","_x6","_ref7","pendingBetIds","_loop2","warn","find","_ret","cleanupResolutionData","_ref8","currentBetIds","Set","map","updatedAttempts","_ref9","Object","entries","_ref10","has","updatedFailedResolutions","_ref11","_ref12","data","updatedPendingBetIds"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/utils/resolveBets.ts"],"sourcesContent":["import { Bet } from '../types/weather';\nimport { fetchCurrentRainData, fetchCurrentTemperatureData, fetchCurrentWindData } from '../services/weatherService';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Claves para almacenamiento local\nconst PENDING_RESOLUTIONS_KEY = 'pendingBetResolutions';\nconst FAILED_RESOLUTIONS_KEY = 'failedBetResolutions';\nconst RESOLUTION_ATTEMPTS_KEY = 'betResolutionAttempts';\nconst MAX_RETRY_ATTEMPTS = 5;\n\n// Función para resolver una apuesta individual\nexport const resolveBet = async (bet: Bet): Promise<Bet> => {\n  try {\n    // Omitir si la apuesta ya está resuelta\n    if (bet.verified || bet.status === 'ganada' || bet.status === 'perdida') {\n      return bet;\n    }\n    \n    // Verificar si es momento de resolver la apuesta\n    const now = new Date();\n    const verificationTime = new Date(bet.verificationTime || '');\n    \n    if (isNaN(verificationTime.getTime())) {\n      console.error('Tiempo de verificación inválido para la apuesta:', bet.id);\n      await logResolutionError(bet, 'Tiempo de verificación inválido');\n      return {\n        ...bet,\n        resolution_explanation: 'No se pudo resolver: tiempo de verificación inválido. Se reintentará más tarde.'\n      };\n    }\n    \n    if (now < verificationTime) {\n      return bet; // Aún no es tiempo de resolver\n    }\n    \n    // Registrar intento de resolución\n    await recordResolutionAttempt(bet);\n    \n    // Obtener datos meteorológicos actuales\n    const [currentRainAmount, currentTemperature, currentWind] = await Promise.all([\n      fetchCurrentRainData().catch(error => {\n        console.error('Error al obtener datos de lluvia:', error);\n        return null;\n      }),\n      fetchCurrentTemperatureData().catch(error => {\n        console.error('Error al obtener datos de temperatura:', error);\n        return null;\n      }),\n      fetchCurrentWindData().catch(error => {\n        console.error('Error al obtener datos de viento:', error);\n        return null;\n      })\n    ]);\n    \n    // Verificar si se obtuvieron los datos necesarios\n    if (\n      (bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') && currentRainAmount === null ||\n      (bet.option === 'temp_min' || bet.option === 'temp_max' || bet.option === 'temperature') && currentTemperature === null ||\n      (bet.option === 'wind_max') && currentWind === null\n    ) {\n      console.error('Datos meteorológicos no disponibles para resolver la apuesta:', bet.id);\n      await addToPendingResolutions(bet);\n      return {\n        ...bet,\n        resolution_explanation: 'Resolución pendiente: no se pudieron obtener datos meteorológicos. Se reintentará automáticamente.'\n      };\n    }\n    \n    // Determinar el resultado real según el tipo de apuesta\n    let result = 0;\n    let won = false;\n    let resolution_explanation = '';\n    \n    if (bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') {\n      result = currentRainAmount || 0;\n      \n      if (bet.option === 'rain_yes') {\n        won = result > 0;\n        if (won) {\n          resolution_explanation = `¡Ganaste! Predijiste correctamente que llovería. La cantidad de lluvia registrada fue de ${result.toFixed(2)} mm.`;\n        } else {\n          resolution_explanation = `Perdiste. Predijiste que llovería, pero no se registró lluvia (0 mm). Las condiciones estaban secas durante el período de verificación.`;\n        }\n      } else if (bet.option === 'rain_no') {\n        won = result === 0;\n        if (won) {\n          resolution_explanation = `¡Ganaste! Predijiste correctamente que no llovería. No se registró lluvia (0 mm) durante el período de verificación.`;\n        } else {\n          resolution_explanation = `Perdiste. Predijiste que no llovería, pero se registraron ${result.toFixed(2)} mm de lluvia durante el período de verificación.`;\n        }\n      } else if (bet.option === 'rain_amount') {\n        const betValue = bet.rain_mm !== null ? bet.rain_mm : bet.value;\n        \n        // Usar un margen fijo para todos los modos\n        const margin = 0.5;\n        won = Math.abs((betValue || 0) - result) <= margin; // Ganar si está dentro de ±0.5mm\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de ${betValue} mm de lluvia estaba dentro del margen de ±${margin} mm del valor real (${result.toFixed(2)} mm).`;\n        } else {\n          const difference = Math.abs((betValue || 0) - result).toFixed(2);\n          resolution_explanation = `Perdiste. Tu predicción de ${betValue} mm de lluvia difería ${difference} mm del valor real (${result.toFixed(2)} mm), superando el margen permitido de ±${margin} mm.`;\n        }\n      }\n    } else if (bet.option === 'temp_min') {\n      if (!currentTemperature) {\n        await addToPendingResolutions(bet);\n                return {\n          ...bet,\n          resolution_explanation: 'Resolución pendiente: no se pudieron obtener datos de temperatura. Se reintentará automáticamente.'\n        };\n      }\n      \n      result = currentTemperature.min;\n      const betValue = bet.temp_min_c !== null ? bet.temp_min_c : bet.value;\n      \n      // Usar un margen fijo para todos los modos\n      const margin = 1.0;\n      won = Math.abs((betValue || 0) - result) <= margin; // Ganar si está dentro de ±1.0°C\n      if (won) {\n        resolution_explanation = `¡Ganaste! Tu predicción de temperatura mínima de ${betValue}°C estaba dentro del margen de ±${margin}°C del valor real (${result.toFixed(1)}°C).`;\n      } else {\n        const difference = Math.abs((betValue || 0) - result).toFixed(1);\n        resolution_explanation = `Perdiste. Tu predicción de temperatura mínima de ${betValue}°C difería ${difference}°C del valor real (${result.toFixed(1)}°C), superando el margen permitido de ±${margin}°C.`;\n      }\n    } else if (bet.option === 'temp_max') {\n      if (!currentTemperature) {\n        await addToPendingResolutions(bet);\n        return {\n          ...bet,\n          resolution_explanation: 'Resolución pendiente: no se pudieron obtener datos de temperatura. Se reintentará automáticamente.'\n        };\n      }\n      \n      result = currentTemperature.max;\n      const betValue = bet.temp_max_c !== null ? bet.temp_max_c : bet.value;\n      \n      // Usar un margen fijo para todos los modos\n      const margin = 1.0;\n      won = Math.abs((betValue || 0) - result) <= margin; // Ganar si está dentro de ±1.0°C\n      if (won) {\n        resolution_explanation = `¡Ganaste! Tu predicción de temperatura máxima de ${betValue}°C estaba dentro del margen de ±${margin}°C del valor real (${result.toFixed(1)}°C).`;\n      } else {\n        const difference = Math.abs((betValue || 0) - result).toFixed(1);\n        resolution_explanation = `Perdiste. Tu predicción de temperatura máxima de ${betValue}°C difería ${difference}°C del valor real (${result.toFixed(1)}°C), superando el margen permitido de ±${margin}°C.`;\n      }\n    } else if (bet.option === 'temperature') {\n      if (!currentTemperature) {\n        await addToPendingResolutions(bet);\n        return {\n          ...bet,\n          resolution_explanation: 'Resolución pendiente: no se pudieron obtener datos de temperatura. Se reintentará automáticamente.'\n        };\n      }\n      \n      result = currentTemperature.current;\n      const betValue = bet.temperature_c !== null ? bet.temperature_c : bet.value;\n      \n      // Usar un margen fijo para todos los modos\n      const margin = 1.0;\n      won = Math.abs((betValue || 0) - result) <= margin; // Ganar si está dentro de ±1.0°C\n      if (won) {\n        resolution_explanation = `¡Ganaste! Tu predicción de temperatura actual de ${betValue}°C estaba dentro del margen de ±${margin}°C del valor real (${result.toFixed(1)}°C).`;\n      } else {\n        const difference = Math.abs((betValue || 0) - result).toFixed(1);\n        resolution_explanation = `Perdiste. Tu predicción de temperatura actual de ${betValue}°C difería ${difference}°C del valor real (${result.toFixed(1)}°C), superando el margen permitido de ±${margin}°C.`;\n      }\n    } else if (bet.option === 'wind_max') {\n      if (!currentWind) {\n        await addToPendingResolutions(bet);\n        return {\n          ...bet,\n          resolution_explanation: 'Resolución pendiente: no se pudieron obtener datos de viento. Se reintentará automáticamente.'\n        };\n      }\n      \n      result = currentWind.max;\n      const betValue = bet.wind_kmh_max !== null ? bet.wind_kmh_max : bet.value;\n      \n      // Usar un margen fijo para todos los modos\n      const margin = 3.0;\n      won = Math.abs((betValue || 0) - result) <= margin; // Ganar si está dentro de ±3.0 km/h\n      if (won) {\n        resolution_explanation = `¡Ganaste! Tu predicción de velocidad máxima del viento de ${betValue} km/h estaba dentro del margen de ±${margin} km/h del valor real (${result.toFixed(1)} km/h).`;\n      } else {\n        const difference = Math.abs((betValue || 0) - result).toFixed(1);\n        resolution_explanation = `Perdiste. Tu predicción de velocidad máxima del viento de ${betValue} km/h difería ${difference} km/h del valor real (${result.toFixed(1)} km/h), superando el margen permitido de ±${margin} km/h.`;\n      }\n    }\n    \n    // Actualizar la apuesta con el resultado\n    const resolvedBet: Bet = {\n      ...bet,\n      result,\n      won,\n      verified: true,\n      status: won ? 'ganada' : 'perdida',\n      resolution_explanation\n    };\n    \n    // Eliminar de las resoluciones pendientes si estaba allí\n    await removeFromPendingResolutions(bet.id);\n    \n    return resolvedBet;\n  } catch (error) {\n    console.error('Error al resolver la apuesta:', error, bet.id);\n    await logResolutionError(bet, error.message || 'Error desconocido');\n    await addToPendingResolutions(bet);\n    \n    return {\n      ...bet,\n      resolution_explanation: 'Error al resolver la apuesta. Se reintentará automáticamente.'\n    };\n  }\n};\n\n// Función para resolver todas las apuestas pendientes\nexport const resolveAllPendingBets = async (): Promise<void> => {\n  try {\n    // Obtener todas las apuestas del almacenamiento local\n    const betsJson = await AsyncStorage.getItem('local_bets');\n    if (!betsJson) return;\n    \n    const bets: Bet[] = JSON.parse(betsJson);\n    const now = new Date();\n    \n    // Filtrar apuestas pendientes que deberían resolverse\n    const pendingBets = bets.filter(bet => \n      bet.status === 'pending' && \n      !bet.verified && \n      new Date(bet.verificationTime || '') <= now\n    );\n    \n    if (pendingBets.length === 0) return;\n    \n    // Resolver cada apuesta pendiente\n    const updatedBets = [...bets];\n    let hasChanges = false;\n    \n    for (const bet of pendingBets) {\n      const resolvedBet = await resolveBet(bet);\n      \n      // Si la apuesta cambió, actualizar en el array\n      if (\n        resolvedBet.verified !== bet.verified || \n        resolvedBet.status !== bet.status || \n        resolvedBet.result !== bet.result || \n        resolvedBet.won !== bet.won\n      ) {\n        const index = updatedBets.findIndex(b => b.id === bet.id);\n        if (index !== -1) {\n          updatedBets[index] = resolvedBet;\n          hasChanges = true;\n        }\n      }\n    }\n    \n    // Guardar las apuestas actualizadas si hubo cambios\n    if (hasChanges) {\n      await AsyncStorage.setItem('local_bets', JSON.stringify(updatedBets));\n    }\n    \n    // Intentar resolver apuestas pendientes anteriores\n    await retryPendingResolutions();\n  } catch (error) {\n    console.error('Error al resolver apuestas pendientes:', error);\n  }\n};\n\n// Función para agregar una apuesta a las resoluciones pendientes\nconst addToPendingResolutions = async (bet: Bet): Promise<void> => {\n  try {\n    const pendingJson = await AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);\n    const pendingBets: string[] = pendingJson ? JSON.parse(pendingJson) : [];\n    \n    // Agregar el ID de la apuesta si no está ya\n    if (!pendingBets.includes(bet.id)) {\n      pendingBets.push(bet.id);\n      await AsyncStorage.setItem(PENDING_RESOLUTIONS_KEY, JSON.stringify(pendingBets));\n    }\n  } catch (error) {\n    console.error('Error al agregar a resoluciones pendientes:', error);\n  }\n};\n\n// Función para eliminar una apuesta de las resoluciones pendientes\nconst removeFromPendingResolutions = async (betId: string): Promise<void> => {\n  try {\n    const pendingJson = await AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);\n    if (!pendingJson) return;\n    \n    const pendingBets: string[] = JSON.parse(pendingJson);\n    const updatedPending = pendingBets.filter(id => id !== betId);\n    \n    await AsyncStorage.setItem(PENDING_RESOLUTIONS_KEY, JSON.stringify(updatedPending));\n  } catch (error) {\n    console.error('Error al eliminar de resoluciones pendientes:', error);\n  }\n};\n\n// Función para registrar un error de resolución\nconst logResolutionError = async (bet: Bet, errorMessage: string): Promise<void> => {\n  try {\n    const failedJson = await AsyncStorage.getItem(FAILED_RESOLUTIONS_KEY);\n    const failedResolutions: Record<string, { count: number, lastError: string, timestamp: string }> = \n      failedJson ? JSON.parse(failedJson) : {};\n    \n    // Actualizar o agregar el registro de error\n    failedResolutions[bet.id] = {\n      count: (failedResolutions[bet.id]?.count || 0) + 1,\n      lastError: errorMessage,\n      timestamp: new Date().toISOString()\n    };\n    \n    await AsyncStorage.setItem(FAILED_RESOLUTIONS_KEY, JSON.stringify(failedResolutions));\n  } catch (error) {\n    console.error('Error al registrar error de resolución:', error);\n  }\n};\n\n// Función para registrar un intento de resolución\nconst recordResolutionAttempt = async (bet: Bet): Promise<void> => {\n  try {\n    const attemptsJson = await AsyncStorage.getItem(RESOLUTION_ATTEMPTS_KEY);\n    const attempts: Record<string, number> = attemptsJson ? JSON.parse(attemptsJson) : {};\n    \n    // Incrementar el contador de intentos\n    attempts[bet.id] = (attempts[bet.id] || 0) + 1;\n    \n    await AsyncStorage.setItem(RESOLUTION_ATTEMPTS_KEY, JSON.stringify(attempts));\n  } catch (error) {\n    console.error('Error al registrar intento de resolución:', error);\n  }\n};\n\n// Función para reintentar resoluciones pendientes\nconst retryPendingResolutions = async (): Promise<void> => {\n  try {\n    const pendingJson = await AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);\n    if (!pendingJson) return;\n    \n    const pendingBetIds: string[] = JSON.parse(pendingJson);\n    if (pendingBetIds.length === 0) return;\n    \n    // Obtener todas las apuestas\n    const betsJson = await AsyncStorage.getItem('local_bets');\n    if (!betsJson) return;\n    \n    const bets: Bet[] = JSON.parse(betsJson);\n    const updatedBets = [...bets];\n    let hasChanges = false;\n    \n    // Obtener intentos de resolución\n    const attemptsJson = await AsyncStorage.getItem(RESOLUTION_ATTEMPTS_KEY);\n    const attempts: Record<string, number> = attemptsJson ? JSON.parse(attemptsJson) : {};\n    \n    // Procesar cada apuesta pendiente\n    for (const betId of pendingBetIds) {\n      // Verificar si se ha excedido el número máximo de intentos\n      if ((attempts[betId] || 0) >= MAX_RETRY_ATTEMPTS) {\n        console.warn(`Máximo de intentos alcanzado para la apuesta ${betId}. Marcando como fallida.`);\n        \n        // Marcar la apuesta como fallida después de demasiados intentos\n        const index = updatedBets.findIndex(b => b.id === betId);\n        if (index !== -1) {\n          updatedBets[index] = {\n            ...updatedBets[index],\n            status: 'error',\n            verified: true,\n            resolution_explanation: 'No se pudo resolver la apuesta después de múltiples intentos. Por favor, contacta con soporte.'\n          };\n          hasChanges = true;\n        }\n        \n        // Eliminar de las resoluciones pendientes\n        await removeFromPendingResolutions(betId);\n        continue;\n      }\n      \n      // Encontrar la apuesta en el array\n      const bet = bets.find(b => b.id === betId);\n      if (!bet) {\n        await removeFromPendingResolutions(betId);\n        continue;\n      }\n      \n      // Intentar resolver la apuesta\n      const resolvedBet = await resolveBet(bet);\n      \n      // Si la apuesta se resolvió correctamente, actualizar en el array\n      if (resolvedBet.verified && (resolvedBet.status === 'ganada' || resolvedBet.status === 'perdida')) {\n        const index = updatedBets.findIndex(b => b.id === betId);\n        if (index !== -1) {\n          updatedBets[index] = resolvedBet;\n          hasChanges = true;\n        }\n        \n        // Eliminar de las resoluciones pendientes\n        await removeFromPendingResolutions(betId);\n      }\n    }\n    \n    // Guardar las apuestas actualizadas si hubo cambios\n    if (hasChanges) {\n      await AsyncStorage.setItem('local_bets', JSON.stringify(updatedBets));\n    }\n  } catch (error) {\n    console.error('Error al reintentar resoluciones pendientes:', error);\n  }\n};\n\n// Función para limpiar datos antiguos de resolución\nexport const cleanupResolutionData = async (): Promise<void> => {\n  try {\n    // Limpiar intentos de resolución antiguos\n    const attemptsJson = await AsyncStorage.getItem(RESOLUTION_ATTEMPTS_KEY);\n    if (attemptsJson) {\n      const attempts: Record<string, number> = JSON.parse(attemptsJson);\n      \n      // Obtener apuestas actuales\n      const betsJson = await AsyncStorage.getItem('local_bets');\n      const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n      const currentBetIds = new Set(bets.map(bet => bet.id));\n      \n      // Filtrar intentos para mantener solo los de apuestas actuales\n      const updatedAttempts: Record<string, number> = {};\n      for (const [betId, count] of Object.entries(attempts)) {\n        if (currentBetIds.has(betId)) {\n          updatedAttempts[betId] = count;\n        }\n      }\n      \n      await AsyncStorage.setItem(RESOLUTION_ATTEMPTS_KEY, JSON.stringify(updatedAttempts));\n    }\n    \n    // Limpiar errores de resolución antiguos\n    const failedJson = await AsyncStorage.getItem(FAILED_RESOLUTIONS_KEY);\n    if (failedJson) {\n      const failedResolutions: Record<string, { count: number, lastError: string, timestamp: string }> = \n        JSON.parse(failedJson);\n      \n      // Obtener apuestas actuales\n      const betsJson = await AsyncStorage.getItem('local_bets');\n      const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n      const currentBetIds = new Set(bets.map(bet => bet.id));\n      \n      // Filtrar errores para mantener solo los de apuestas actuales\n      const updatedFailedResolutions: Record<string, { count: number, lastError: string, timestamp: string }> = {};\n      for (const [betId, data] of Object.entries(failedResolutions)) {\n        if (currentBetIds.has(betId)) {\n          updatedFailedResolutions[betId] = data;\n        }\n      }\n      \n      await AsyncStorage.setItem(FAILED_RESOLUTIONS_KEY, JSON.stringify(updatedFailedResolutions));\n    }\n    \n    // Verificar y limpiar resoluciones pendientes\n    const pendingJson = await AsyncStorage.getItem(PENDING_RESOLUTIONS_KEY);\n    if (pendingJson) {\n      const pendingBetIds: string[] = JSON.parse(pendingJson);\n      \n      // Obtener apuestas actuales\n      const betsJson = await AsyncStorage.getItem('local_bets');\n      const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n      const currentBetIds = new Set(bets.map(bet => bet.id));\n      \n      // Filtrar para mantener solo IDs de apuestas actuales\n      const updatedPendingBetIds = pendingBetIds.filter(id => currentBetIds.has(id));\n      \n      await AsyncStorage.setItem(PENDING_RESOLUTIONS_KEY, JSON.stringify(updatedPendingBetIds));\n    }\n  } catch (error) {\n    console.error('Error al limpiar datos de resolución:', error);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}