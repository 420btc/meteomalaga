{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import{fetchWeatherData,fetchCurrentRainData,fetchCurrentTemperatureData}from\"../services/weatherService\";import{getLocalBets,startBackgroundVerification,cleanupOldBets,getRemainingTemperatureBets as getLocalRemainingTemperatureBets,showBetResolutionNotification,getAndClearRecentlyResolvedBets}from\"../services/localBetService\";import{loginUser,registerUser,getCurrentUser,isLoggedIn,logoutUser,updateUserCoins,updateUserBetStats,updateUserWaterDrops,updateUserAvatar,updateUserDailyReward}from\"../services/enhancedAuthService\";import{resolveBets}from\"../utils/resolveBets\";import{addBet,getRemainingTemperatureBets}from\"../services/localSupabaseService\";import{updateLastActivity}from\"../services/plantService\";import{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=createContext(undefined);export const AppProvider=({children})=>{const[user,setUser]=useState(null);const[coins,setCoins]=useState(100);const[waterDrops,setWaterDrops]=useState(0);const[bets,setBets]=useState([]);const[isLoading,setIsLoading]=useState(true);const[remainingTempBets,setRemainingTempBets]=useState(2);const[isAuthenticated,setIsAuthenticated]=useState(false);const[language,setLanguage]=useState('es');const[isOnline,setIsOnline]=useState(true);const trackActivity=async()=>{await updateLastActivity();};useEffect(()=>{const initializeApp=async()=>{setIsLoading(true);try{await trackActivity();const savedLanguage=await AsyncStorage.getItem('app_language');if(savedLanguage){setLanguage(savedLanguage);}const authenticated=await isLoggedIn();setIsAuthenticated(authenticated);if(authenticated){const currentUser=await getCurrentUser();if(currentUser){const userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);}}const localBets=await getLocalBets();setBets(localBets);await refreshRemainingTempBets();await cleanupOldBets();await checkForResolvedBets();}catch(error){console.error('Error initializing app:',error);}finally{setIsLoading(false);}};initializeApp();const stopVerification=startBackgroundVerification((resolvedBets,coinsWon)=>{if(resolvedBets.length>0){setBets(prevBets=>{const updatedBets=[...prevBets];resolvedBets.forEach(resolvedBet=>{const index=updatedBets.findIndex(bet=>bet.timestamp===resolvedBet.timestamp);if(index!==-1){updatedBets[index]=resolvedBet;}});return updatedBets;});if(coinsWon>0){addCoins(coinsWon);if(user){const wonBets=resolvedBets.filter(bet=>bet.won);if(wonBets.length>0){updateUserBetStats(user.id,true);}}}showBetResolutionNotification(resolvedBets,coinsWon);}});return()=>{stopVerification();};},[]);const addCoins=async amount=>{const newTotal=coins+amount;setCoins(newTotal);if(user){const updatedUser=Object.assign({},user,{coins:newTotal});setUser(updatedUser);await updateUserCoins(user.id,newTotal);}await trackActivity();};const addWaterDrops=async amount=>{const newTotal=waterDrops+amount;setWaterDrops(newTotal);if(user){const updatedUser=Object.assign({},user,{waterDrops:newTotal});setUser(updatedUser);await updateUserWaterDrops(user.id,amount);}await trackActivity();};const updateAvatar=async avatarUrl=>{if(user){const updatedUser=Object.assign({},user,{avatar:avatarUrl});setUser(updatedUser);await updateUserAvatar(user.id,avatarUrl);await trackActivity();}};const getDailyRewards=day=>{const rewards=[{day:1,coins:5,waterDrops:5},{day:2,coins:10,waterDrops:0},{day:3,coins:0,waterDrops:10},{day:4,coins:50,waterDrops:0},{day:5,coins:50,waterDrops:1}];return rewards[day-1]||rewards[0];};const getNextDailyRewardTime=async()=>{if(!user||!user.lastDailyReward){return null;}const lastRewardDate=new Date(user.lastDailyReward);const nextRewardDate=new Date(lastRewardDate);nextRewardDate.setDate(nextRewardDate.getDate()+1);return nextRewardDate;};const getDailyRewardStreak=async()=>{if(!user){return 0;}return user.dailyRewardStreak||0;};const claimDailyReward=async()=>{if(!user){return null;}const now=new Date();let streak=user.dailyRewardStreak||0;let canClaim=true;if(user.lastDailyReward){const lastRewardDate=new Date(user.lastDailyReward);const timeDiff=now.getTime()-lastRewardDate.getTime();const daysDiff=Math.floor(timeDiff/(1000*60*60*24));if(daysDiff<1){canClaim=false;}else if(daysDiff>1){streak=0;}}if(!canClaim){return null;}streak=streak%5+1;const reward=getDailyRewards(streak);if(reward.coins>0){await addCoins(reward.coins);}if(reward.waterDrops>0){await addWaterDrops(reward.waterDrops);}await updateUserDailyReward(user.id,now.toISOString(),streak);setUser(Object.assign({},user,{lastDailyReward:now.toISOString(),dailyRewardStreak:streak}));return reward;};const addBetHandler=async bet=>{try{await trackActivity();await addCoins(-bet.coins);const betWithUser=Object.assign({},bet,{user_id:user?.id||'anonymous'});const savedBet=await addBet(betWithUser);if(!savedBet){throw new Error('Error al guardar la apuesta');}setBets(prevBets=>[savedBet,...prevBets]);if(bet.option==='temp_min'||bet.option==='temp_max'){await refreshRemainingTempBets();}if(user){await updateUserBetStats(user.id,false);}}catch(error){await addCoins(bet.coins);throw error;}};const getWeatherForDate=async date=>{await trackActivity();return await fetchWeatherData(date);};const getCurrentRainAmount=async()=>{await trackActivity();return await fetchCurrentRainData();};const getCurrentTemperature=async()=>{await trackActivity();return await fetchCurrentTemperatureData();};const refreshRemainingTempBets=async()=>{try{await trackActivity();const remaining=user?await getRemainingTemperatureBets(user.id):await getLocalRemainingTemperatureBets();setRemainingTempBets(remaining);}catch(error){console.error('Error refreshing remaining temperature bets:',error);}};const evaluateBets=async()=>{try{await trackActivity();const{resolvedBets,totalCoinsWon}=await resolveBets();if(resolvedBets.length>0){setBets(prevBets=>{const updatedBets=[...prevBets];resolvedBets.forEach(resolvedBet=>{const index=updatedBets.findIndex(bet=>bet.timestamp===resolvedBet.timestamp);if(index!==-1){updatedBets[index]=resolvedBet;}});return updatedBets;});if(totalCoinsWon>0){addCoins(totalCoinsWon);if(user){const wonBets=resolvedBets.filter(bet=>bet.won);if(wonBets.length>0){updateUserBetStats(user.id,true);}}showBetResolutionNotification(resolvedBets,totalCoinsWon);}}}catch(error){console.error('Error evaluating bets:',error);}};const checkForResolvedBets=async()=>{try{await trackActivity();const recentlyResolvedBets=await getAndClearRecentlyResolvedBets();if(recentlyResolvedBets.length>0){const totalCoinsWon=recentlyResolvedBets.filter(bet=>bet.won).reduce((total,bet)=>total+bet.coins*bet.leverage,0);if(totalCoinsWon>0){showBetResolutionNotification(recentlyResolvedBets,totalCoinsWon);}}await evaluateBets();}catch(error){console.error('Error checking for resolved bets:',error);}};const login=async(username,password)=>{try{await trackActivity();const response=await loginUser(username,password);if(response.success&&response.userId&&response.username){const currentUser=await getCurrentUser();if(currentUser){const userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);setIsAuthenticated(true);const userBets=await getLocalBets();setBets(userBets);await refreshRemainingTempBets();}}return response;}catch(error){console.error('Error in login:',error);return{success:false,message:'Ha ocurrido un error al iniciar sesión. Por favor, inténtalo de nuevo.'};}};const register=async(username,password)=>{try{await trackActivity();const response=await registerUser(username,password);if(response.success&&response.userId&&response.username){const currentUser=await getCurrentUser();if(currentUser){const userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);setIsAuthenticated(true);}}return response;}catch(error){console.error('Error in register:',error);return{success:false,message:'Ha ocurrido un error al registrarse. Por favor, inténtalo de nuevo.'};}};const logout=async()=>{try{await trackActivity();await logoutUser();setUser(null);setCoins(0);setWaterDrops(0);setIsAuthenticated(false);setBets([]);}catch(error){console.error('Error in logout:',error);}};const refreshAuthState=async()=>{try{await trackActivity();const authenticated=await isLoggedIn();setIsAuthenticated(authenticated);if(authenticated){const currentUser=await getCurrentUser();if(currentUser){const userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);const userBets=await getLocalBets();setBets(userBets);await refreshRemainingTempBets();}}}catch(error){console.error('Error refreshing auth state:',error);}};const changeLanguage=async lang=>{await trackActivity();setLanguage(lang);await AsyncStorage.setItem('app_language',lang);};return _jsx(AppContext.Provider,{value:{user,setUser,coins,addCoins,waterDrops,addWaterDrops,bets,addBet:addBetHandler,getWeatherForDate,isLoading,remainingTempBets,refreshRemainingTempBets,login,register,logout,refreshAuthState,isAuthenticated,getCurrentRainAmount,getCurrentTemperature,language,setLanguage:changeLanguage,evaluateBets,isOnline,checkForResolvedBets,trackActivity,updateAvatar,claimDailyReward,getNextDailyRewardTime,getDailyRewardStreak},children:children});};export const useApp=()=>{const context=useContext(AppContext);if(context===undefined){throw new Error('useApp must be used within an AppProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","fetchWeatherData","fetchCurrentRainData","fetchCurrentTemperatureData","getLocalBets","startBackgroundVerification","cleanupOldBets","getRemainingTemperatureBets","getLocalRemainingTemperatureBets","showBetResolutionNotification","getAndClearRecentlyResolvedBets","loginUser","registerUser","getCurrentUser","isLoggedIn","logoutUser","updateUserCoins","updateUserBetStats","updateUserWaterDrops","updateUserAvatar","updateUserDailyReward","resolveBets","addBet","updateLastActivity","jsx","_jsx","AppContext","undefined","AppProvider","children","user","setUser","coins","setCoins","waterDrops","setWaterDrops","bets","setBets","isLoading","setIsLoading","remainingTempBets","setRemainingTempBets","isAuthenticated","setIsAuthenticated","language","setLanguage","isOnline","setIsOnline","trackActivity","initializeApp","savedLanguage","getItem","authenticated","currentUser","userProfile","id","userId","username","totalBets","wonBets","avatar","lastDailyReward","dailyRewardStreak","localBets","refreshRemainingTempBets","checkForResolvedBets","error","console","stopVerification","resolvedBets","coinsWon","length","prevBets","updatedBets","forEach","resolvedBet","index","findIndex","bet","timestamp","addCoins","filter","won","amount","newTotal","updatedUser","Object","assign","addWaterDrops","updateAvatar","avatarUrl","getDailyRewards","day","rewards","getNextDailyRewardTime","lastRewardDate","Date","nextRewardDate","setDate","getDate","getDailyRewardStreak","claimDailyReward","now","streak","canClaim","timeDiff","getTime","daysDiff","Math","floor","reward","toISOString","addBetHandler","betWithUser","user_id","savedBet","Error","option","getWeatherForDate","date","getCurrentRainAmount","getCurrentTemperature","remaining","evaluateBets","totalCoinsWon","recentlyResolvedBets","reduce","total","leverage","login","password","response","success","userBets","message","register","logout","refreshAuthState","changeLanguage","lang","setItem","Provider","value","useApp","context"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Bet, WeatherData, UserProfile, DailyReward } from '../types/weather';\nimport { fetchWeatherData, fetchCurrentRainData, fetchCurrentTemperatureData } from '../services/weatherService';\nimport { \n  getLocalBets, \n  startBackgroundVerification,\n  cleanupOldBets,\n  getRemainingTemperatureBets as getLocalRemainingTemperatureBets,\n  showBetResolutionNotification,\n  getAndClearRecentlyResolvedBets\n} from '../services/localBetService';\nimport { \n  loginUser, \n  registerUser, \n  getCurrentUser, \n  isLoggedIn, \n  logoutUser, \n  LoginResponse,\n  updateUserCoins,\n  updateUserBetStats,\n  updateUserWaterDrops,\n  updateUserAvatar,\n  updateUserDailyReward\n} from '../services/enhancedAuthService';\nimport { resolveBets } from '../utils/resolveBets';\nimport { addBet, getRemainingTemperatureBets } from '../services/localSupabaseService';\nimport { updateLastActivity } from '../services/plantService';\n\ninterface AppContextType {\n  user: UserProfile | null;\n  setUser: (user: UserProfile | null) => void;\n  coins: number;\n  addCoins: (amount: number) => void;\n  waterDrops: number;\n  addWaterDrops: (amount: number) => void;\n  bets: Bet[];\n  addBet: (bet: Bet) => Promise<void>;\n  getWeatherForDate: (date: string) => Promise<WeatherData>;\n  isLoading: boolean;\n  remainingTempBets: number;\n  refreshRemainingTempBets: () => Promise<void>;\n  login: (username: string, password: string) => Promise<LoginResponse>;\n  register: (username: string, password: string) => Promise<LoginResponse>;\n  logout: () => Promise<void>;\n  refreshAuthState: () => Promise<void>;\n  isAuthenticated: boolean;\n  getCurrentRainAmount: () => Promise<number>;\n  getCurrentTemperature: () => Promise<{min: number; max: number; current: number}>;\n  language: string;\n  setLanguage: (lang: string) => void;\n  evaluateBets: () => Promise<void>;\n  isOnline: boolean;\n  checkForResolvedBets: () => Promise<void>;\n  trackActivity: () => Promise<void>;\n  updateAvatar: (avatarUrl: string) => Promise<void>;\n  claimDailyReward: () => Promise<DailyReward | null>;\n  getNextDailyRewardTime: () => Promise<Date | null>;\n  getDailyRewardStreak: () => Promise<number>;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [coins, setCoins] = useState<number>(100);\n  const [waterDrops, setWaterDrops] = useState<number>(0);\n  const [bets, setBets] = useState<Bet[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [remainingTempBets, setRemainingTempBets] = useState<number>(2);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [language, setLanguage] = useState<string>('es');\n  const [isOnline, setIsOnline] = useState<boolean>(true);\n\n  // Track user activity\n  const trackActivity = async (): Promise<void> => {\n    await updateLastActivity();\n  };\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      setIsLoading(true);\n      try {\n        // Track initial activity\n        await trackActivity();\n\n        // Load language preference\n        const savedLanguage = await AsyncStorage.getItem('app_language');\n        if (savedLanguage) {\n          setLanguage(savedLanguage);\n        }\n\n        // Check if user is logged in\n        const authenticated = await isLoggedIn();\n        setIsAuthenticated(authenticated);\n        \n        if (authenticated) {\n          // Get current user\n          const currentUser = await getCurrentUser();\n          if (currentUser) {\n            // Convert auth user to UserProfile\n            const userProfile: UserProfile = {\n              id: currentUser.userId,\n              username: currentUser.username,\n              coins: currentUser.coins || 100,\n              waterDrops: currentUser.waterDrops || 0,\n              totalBets: currentUser.totalBets || 0,\n              wonBets: currentUser.wonBets || 0,\n              avatar: currentUser.avatar,\n              lastDailyReward: currentUser.lastDailyReward,\n              dailyRewardStreak: currentUser.dailyRewardStreak || 0\n            };\n            \n            setUser(userProfile);\n            setCoins(userProfile.coins);\n            setWaterDrops(userProfile.waterDrops || 0);\n          }\n        }\n\n        // Load bets\n        const localBets = await getLocalBets();\n        setBets(localBets);\n\n        // Check remaining temperature bets\n        await refreshRemainingTempBets();\n\n        // Clean up old bets\n        await cleanupOldBets();\n        \n        // Check for resolved bets when app initializes\n        await checkForResolvedBets();\n      } catch (error) {\n        console.error('Error initializing app:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeApp();\n\n    // Start background verification of bets\n    const stopVerification = startBackgroundVerification((resolvedBets, coinsWon) => {\n      if (resolvedBets.length > 0) {\n        // Update bets state with resolved bets\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        \n        // Add coins if any bets were won\n        if (coinsWon > 0) {\n          addCoins(coinsWon);\n          \n          // Update user bet stats\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n        }\n        \n        // Show notification about resolved bets\n        showBetResolutionNotification(resolvedBets, coinsWon);\n      }\n    });\n\n    return () => {\n      // Clean up verification process\n      stopVerification();\n    };\n  }, []);\n\n  const addCoins = async (amount: number) => {\n    const newTotal = coins + amount;\n    setCoins(newTotal);\n    \n    // Update user data\n    if (user) {\n      const updatedUser = { ...user, coins: newTotal };\n      setUser(updatedUser);\n      \n      // Update user coins in storage\n      await updateUserCoins(user.id, newTotal);\n    }\n    \n    // Track activity when adding coins\n    await trackActivity();\n  };\n\n  const addWaterDrops = async (amount: number) => {\n    const newTotal = waterDrops + amount;\n    setWaterDrops(newTotal);\n    \n    // Update user data\n    if (user) {\n      const updatedUser = { ...user, waterDrops: newTotal };\n      setUser(updatedUser);\n      \n      // Update user water drops in storage\n      await updateUserWaterDrops(user.id, amount);\n    }\n    \n    // Track activity when adding water drops\n    await trackActivity();\n  };\n\n  const updateAvatar = async (avatarUrl: string) => {\n    if (user) {\n      const updatedUser = { ...user, avatar: avatarUrl };\n      setUser(updatedUser);\n      \n      // Update user avatar in storage\n      await updateUserAvatar(user.id, avatarUrl);\n      \n      // Track activity when updating avatar\n      await trackActivity();\n    }\n  };\n\n  const getDailyRewards = (day: number): DailyReward => {\n    const rewards: DailyReward[] = [\n      { day: 1, coins: 5, waterDrops: 5 },\n      { day: 2, coins: 10, waterDrops: 0 },\n      { day: 3, coins: 0, waterDrops: 10 },\n      { day: 4, coins: 50, waterDrops: 0 },\n      { day: 5, coins: 50, waterDrops: 1 }\n    ];\n    \n    // Get reward for the current day, or default to day 1 if out of range\n    return rewards[day - 1] || rewards[0];\n  };\n\n  const getNextDailyRewardTime = async (): Promise<Date | null> => {\n    if (!user || !user.lastDailyReward) {\n      return null;\n    }\n    \n    const lastRewardDate = new Date(user.lastDailyReward);\n    const nextRewardDate = new Date(lastRewardDate);\n    nextRewardDate.setDate(nextRewardDate.getDate() + 1);\n    \n    return nextRewardDate;\n  };\n\n  const getDailyRewardStreak = async (): Promise<number> => {\n    if (!user) {\n      return 0;\n    }\n    \n    return user.dailyRewardStreak || 0;\n  };\n\n  const claimDailyReward = async (): Promise<DailyReward | null> => {\n    if (!user) {\n      return null;\n    }\n    \n    const now = new Date();\n    let streak = user.dailyRewardStreak || 0;\n    let canClaim = true;\n    \n    // Check if user has claimed a reward before\n    if (user.lastDailyReward) {\n      const lastRewardDate = new Date(user.lastDailyReward);\n      const timeDiff = now.getTime() - lastRewardDate.getTime();\n      const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n      \n      // If less than 24 hours have passed, can't claim\n      if (daysDiff < 1) {\n        canClaim = false;\n      } \n      // If more than 48 hours have passed, reset streak\n      else if (daysDiff > 1) {\n        streak = 0;\n      }\n    }\n    \n    if (!canClaim) {\n      return null;\n    }\n    \n    // Increment streak (max 5)\n    streak = (streak % 5) + 1;\n    \n    // Get reward for current streak day\n    const reward = getDailyRewards(streak);\n    \n    // Add rewards\n    if (reward.coins > 0) {\n      await addCoins(reward.coins);\n    }\n    \n    if (reward.waterDrops > 0) {\n      await addWaterDrops(reward.waterDrops);\n    }\n    \n    // Update user's last reward date and streak\n    await updateUserDailyReward(user.id, now.toISOString(), streak);\n    \n    // Update local user state\n    setUser({\n      ...user,\n      lastDailyReward: now.toISOString(),\n      dailyRewardStreak: streak\n    });\n    \n    return reward;\n  };\n\n  const addBetHandler = async (bet: Bet) => {\n    try {\n      // Track activity when placing a bet\n      await trackActivity();\n      \n      // Deduct coins for the bet\n      await addCoins(-bet.coins);\n      \n      // Add user_id to bet if authenticated\n      const betWithUser = {\n        ...bet,\n        user_id: user?.id || 'anonymous'\n      };\n      \n      // Save bet using the local service\n      const savedBet = await addBet(betWithUser);\n      \n      if (!savedBet) {\n        throw new Error('Error al guardar la apuesta');\n      }\n      \n      // Update bets state\n      setBets(prevBets => [savedBet, ...prevBets]);\n      \n      // Refresh remaining temperature bets if it's a temperature bet\n      if (bet.option === 'temp_min' || bet.option === 'temp_max') {\n        await refreshRemainingTempBets();\n      }\n      \n      // Update user bet stats\n      if (user) {\n        await updateUserBetStats(user.id, false);\n      }\n    } catch (error) {\n      // If there's an error, refund the coins\n      await addCoins(bet.coins);\n      throw error;\n    }\n  };\n\n  const getWeatherForDate = async (date: string): Promise<WeatherData> => {\n    // Track activity when getting weather data\n    await trackActivity();\n    return await fetchWeatherData(date);\n  };\n\n  const getCurrentRainAmount = async (): Promise<number> => {\n    // Track activity when getting current rain data\n    await trackActivity();\n    return await fetchCurrentRainData();\n  };\n\n  const getCurrentTemperature = async (): Promise<{min: number; max: number; current: number}> => {\n    // Track activity when getting current temperature data\n    await trackActivity();\n    return await fetchCurrentTemperatureData();\n  };\n\n  const refreshRemainingTempBets = async (): Promise<void> => {\n    try {\n      // Track activity when refreshing temperature bets\n      await trackActivity();\n      \n      // Use the local service to get remaining temperature bets\n      const remaining = user ? \n        await getRemainingTemperatureBets(user.id) : \n        await getLocalRemainingTemperatureBets();\n      \n      setRemainingTempBets(remaining);\n    } catch (error) {\n      console.error('Error refreshing remaining temperature bets:', error);\n    }\n  };\n\n  const evaluateBets = async (): Promise<void> => {\n    try {\n      // Track activity when evaluating bets\n      await trackActivity();\n      \n      const { resolvedBets, totalCoinsWon } = await resolveBets();\n      \n      // Update bets state with resolved bets\n      if (resolvedBets.length > 0) {\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        \n        // Add coins if any bets were won\n        if (totalCoinsWon > 0) {\n          addCoins(totalCoinsWon);\n          \n          // Update user bet stats\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n          \n          // Show notification about resolved bets\n          showBetResolutionNotification(resolvedBets, totalCoinsWon);\n        }\n      }\n    } catch (error) {\n      console.error('Error evaluating bets:', error);\n    }\n  };\n  \n  const checkForResolvedBets = async (): Promise<void> => {\n    try {\n      // Track activity when checking for resolved bets\n      await trackActivity();\n      \n      // First, check if there are any recently resolved bets\n      const recentlyResolvedBets = await getAndClearRecentlyResolvedBets();\n      \n      if (recentlyResolvedBets.length > 0) {\n        // Calculate total coins won\n        const totalCoinsWon = recentlyResolvedBets\n          .filter(bet => bet.won)\n          .reduce((total, bet) => total + (bet.coins * bet.leverage), 0);\n        \n        // Show notification about resolved bets\n        if (totalCoinsWon > 0) {\n          showBetResolutionNotification(recentlyResolvedBets, totalCoinsWon);\n        }\n      }\n      \n      // Then, evaluate any pending bets\n      await evaluateBets();\n    } catch (error) {\n      console.error('Error checking for resolved bets:', error);\n    }\n  };\n\n  const login = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      // Track activity when logging in\n      await trackActivity();\n      \n      const response = await loginUser(username, password);\n      \n      if (response.success && response.userId && response.username) {\n        // Get current user with all data\n        const currentUser = await getCurrentUser();\n        \n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          // Update state\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n          \n          // Load user's bets\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          \n          // Refresh remaining temperature bets\n          await refreshRemainingTempBets();\n        }\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in login:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al iniciar sesión. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n\n  const register = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      // Track activity when registering\n      await trackActivity();\n      \n      const response = await registerUser(username, password);\n      \n      if (response.success && response.userId && response.username) {\n        // Get current user with all data\n        const currentUser = await getCurrentUser();\n        \n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          // Update state\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n        }\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in register:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al registrarse. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      // Track activity when logging out\n      await trackActivity();\n      \n      await logoutUser();\n      setUser(null);\n      setCoins(0);\n      setWaterDrops(0);\n      setIsAuthenticated(false);\n      setBets([]);\n    } catch (error) {\n      console.error('Error in logout:', error);\n    }\n  };\n\n  const refreshAuthState = async (): Promise<void> => {\n    try {\n      // Track activity when refreshing auth state\n      await trackActivity();\n      \n      const authenticated = await isLoggedIn();\n      setIsAuthenticated(authenticated);\n      \n      if (authenticated) {\n        const currentUser = await getCurrentUser();\n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          \n          // Load user's bets\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          \n          // Refresh remaining temperature bets\n          await refreshRemainingTempBets();\n        }\n      }\n    } catch (error) {\n      console.error('Error refreshing auth state:', error);\n    }\n  };\n\n  const changeLanguage = async (lang: string) => {\n    // Track activity when changing language\n    await trackActivity();\n    \n    setLanguage(lang);\n    await AsyncStorage.setItem('app_language', lang);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        user,\n        setUser,\n        coins,\n        addCoins,\n        waterDrops,\n        addWaterDrops,\n        bets,\n        addBet: addBetHandler,\n        getWeatherForDate,\n        isLoading,\n        remainingTempBets,\n        refreshRemainingTempBets,\n        login,\n        register,\n        logout,\n        refreshAuthState,\n        isAuthenticated,\n        getCurrentRainAmount,\n        getCurrentTemperature,\n        language,\n        setLanguage: changeLanguage,\n        evaluateBets,\n        isOnline,\n        checkForResolvedBets,\n        trackActivity,\n        updateAvatar,\n        claimDailyReward,\n        getNextDailyRewardTime,\n        getDailyRewardStreak\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useApp = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}