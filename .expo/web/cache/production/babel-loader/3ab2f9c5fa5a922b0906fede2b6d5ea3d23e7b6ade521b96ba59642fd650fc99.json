{"ast":null,"code":"import AsyncStorage from'@react-native-async-storage/async-storage';const PLANT_STORAGE_KEY='meteo_plant_data';const PLANT_REWARDS_KEY='meteo_plant_rewards';const LAST_ACTIVITY_KEY='meteo_last_activity';const plantConfigs={'Cactus':{type:'Cactus',waterRequirement:2,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Suculenta':{type:'Suculenta',waterRequirement:3,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Aloe':{type:'Aloe',waterRequirement:3,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Lavanda':{type:'Lavanda',waterRequirement:4,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Jade':{type:'Jade',waterRequirement:4,stageThresholds:{Brote:0,Joven:11,Adulta:26,Florecida:41},evolutionThreshold:60},'Girasol':{type:'Girasol',waterRequirement:5,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Rosa':{type:'Rosa',waterRequirement:6,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Orquídea':{type:'Orquídea',waterRequirement:6,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Monstera':{type:'Monstera',waterRequirement:7,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Hibisco':{type:'Hibisco',waterRequirement:7,stageThresholds:{Brote:0,Joven:21,Adulta:51,Florecida:81},evolutionThreshold:120},'Bambú':{type:'Bambú',waterRequirement:8,stageThresholds:{Brote:0,Joven:31,Adulta:81,Florecida:151},evolutionThreshold:250},'Helecho':{type:'Helecho',waterRequirement:9,stageThresholds:{Brote:0,Joven:31,Adulta:81,Florecida:151},evolutionThreshold:250}};const getPlantStage=plant=>{const config=plantConfigs[plant.type];const{waterAccumulated}=plant;if(waterAccumulated>=config.stageThresholds.Florecida){return'Florecida';}else if(waterAccumulated>=config.stageThresholds.Adulta){return'Adulta';}else if(waterAccumulated>=config.stageThresholds.Joven){return'Joven';}else{return'Brote';}};export const updateLastActivity=async()=>{try{const now=new Date().toISOString();await AsyncStorage.setItem(LAST_ACTIVITY_KEY,now);}catch(error){console.error('Error updating last activity:',error);}};export const getLastActivity=async()=>{try{return await AsyncStorage.getItem(LAST_ACTIVITY_KEY);}catch(error){console.error('Error getting last activity:',error);return null;}};export const initializePlant=async()=>{const newPlant={id:Date.now(),name:'Mi Planta',type:'Cactus',stage:'Brote',waterRequirement:plantConfigs['Cactus'].waterRequirement,waterAccumulated:0,health:100,lastWatered:new Date().toISOString(),stageThreshold:plantConfigs['Cactus'].stageThresholds.Joven,evolutionThreshold:plantConfigs['Cactus'].evolutionThreshold,waterAvailable:5,lastFreeWaterCollected:new Date().toISOString()};await savePlant(newPlant);await updateLastActivity();return newPlant;};export const getPlant=async()=>{try{const plantData=await AsyncStorage.getItem(PLANT_STORAGE_KEY);if(!plantData)return null;const plant=JSON.parse(plantData);if(plant.waterAvailable===undefined){plant.waterAvailable=5;}if(plant.lastFreeWaterCollected===undefined){plant.lastFreeWaterCollected=new Date().toISOString();}const updatedPlant=await updatePlantHealthBasedOnInactivity(plant);return updatedPlant;}catch(error){console.error('Error getting plant data:',error);return null;}};export const savePlant=async plant=>{try{await AsyncStorage.setItem(PLANT_STORAGE_KEY,JSON.stringify(plant));}catch(error){console.error('Error saving plant data:',error);}};export const updatePlantHealthBasedOnInactivity=async plant=>{const lastActivityStr=await getLastActivity();if(!lastActivityStr){await updateLastActivity();return plant;}const now=new Date();const lastActivity=new Date(lastActivityStr);const hoursSinceActivity=Math.floor((now.getTime()-lastActivity.getTime())/(1000*60*60));if(hoursSinceActivity>=72){console.log('Plant died due to player inactivity for 72 hours');const newPlant=await initializePlant();return newPlant;}if(hoursSinceActivity>0){const healthReduction=Math.min(plant.health,hoursSinceActivity);plant.health-=healthReduction;if(plant.health<=0){console.log('Plant died due to health reaching 0 from inactivity');const newPlant=await initializePlant();return newPlant;}await savePlant(plant);}await updateLastActivity();return plant;};export const updatePlantHealth=async()=>{const plant=await getPlant();if(!plant)return null;const now=new Date();const lastWatered=new Date(plant.lastWatered);const hoursPassed=Math.floor((now.getTime()-lastWatered.getTime())/(1000*60*60));if(hoursPassed>=72){console.log('Plant died due to lack of water for 72 hours');const newPlant=await initializePlant();return newPlant;}const daysPassed=Math.floor(hoursPassed/24);if(daysPassed>0){const healthReduction=Math.min(plant.health,20*daysPassed);plant.health-=healthReduction;if(plant.health<=0){const newPlant=await initializePlant();return newPlant;}plant.lastWatered=now.toISOString();await savePlant(plant);}return plant;};export const addWaterFromBet=async(betType,success)=>{if(!success)return await getPlant();let plant=await getPlant();if(!plant){plant=await initializePlant();}const waterAmount=betType==='rain'?5:10;plant.waterAvailable+=waterAmount;await savePlant(plant);await updateLastActivity();return plant;};const getNextPlantType=currentType=>{const evolutionOrder=['Cactus','Suculenta','Aloe','Lavanda','Jade','Girasol','Rosa','Orquídea','Monstera','Hibisco','Bambú','Helecho'];const currentIndex=evolutionOrder.indexOf(currentType);if(currentIndex===-1||currentIndex===evolutionOrder.length-1){return null;}return evolutionOrder[currentIndex+1];};export const getPendingRewards=async()=>{try{const rewardsData=await AsyncStorage.getItem(PLANT_REWARDS_KEY);if(!rewardsData)return 0;const rewards=JSON.parse(rewardsData);return rewards.amount||0;}catch(error){console.error('Error getting pending rewards:',error);return 0;}};export const addPendingReward=async(betType,success)=>{if(!success)return;try{const waterAmount=betType==='rain'?5:10;const rewardsData=await AsyncStorage.getItem(PLANT_REWARDS_KEY);let rewards={amount:0};if(rewardsData){rewards=JSON.parse(rewardsData);}rewards.amount=(rewards.amount||0)+waterAmount;await AsyncStorage.setItem(PLANT_REWARDS_KEY,JSON.stringify(rewards));await updateLastActivity();}catch(error){console.error('Error adding pending reward:',error);}};export const claimPendingRewards=async()=>{try{const pendingRewards=await getPendingRewards();if(pendingRewards<=0)return await getPlant();let plant=await getPlant();if(!plant){plant=await initializePlant();}plant.waterAvailable+=pendingRewards;plant.health=100;plant.lastWatered=new Date().toISOString();await savePlant(plant);await updateLastActivity();await AsyncStorage.setItem(PLANT_REWARDS_KEY,JSON.stringify({amount:0}));return plant;}catch(error){console.error('Error claiming rewards:',error);return null;}};export const collectDailyFreeWater=async()=>{let plant=await getPlant();if(!plant){plant=await initializePlant();return{plant,collected:false};}const now=new Date();const lastCollected=new Date(plant.lastFreeWaterCollected);const hoursPassed=Math.floor((now.getTime()-lastCollected.getTime())/(1000*60*60));if(hoursPassed>=24){plant.waterAvailable+=1;plant.lastFreeWaterCollected=now.toISOString();await savePlant(plant);await updateLastActivity();return{plant,collected:true};}return{plant,collected:false};};export const waterPlant=async amount=>{let plant=await getPlant();if(!plant){plant=await initializePlant();}if(plant.waterAvailable<amount){return{plant,success:false};}plant.waterAvailable-=amount;plant.waterAccumulated+=amount;const updatedStage=getPlantStage(plant);if(updatedStage!==plant.stage){plant.stage=updatedStage;}if(plant.waterAccumulated>=plant.evolutionThreshold){const nextPlantType=getNextPlantType(plant.type);if(nextPlantType){plant.type=nextPlantType;plant.waterRequirement=plantConfigs[nextPlantType].waterRequirement;plant.waterAccumulated=0;plant.stage='Brote';plant.stageThreshold=plantConfigs[nextPlantType].stageThresholds.Joven;plant.evolutionThreshold=plantConfigs[nextPlantType].evolutionThreshold;}}plant.health=100;plant.lastWatered=new Date().toISOString();await savePlant(plant);await updateLastActivity();return{plant,success:true};};export const getTimeUntilNextFreeWater=plant=>{const now=new Date();const lastCollected=new Date(plant.lastFreeWaterCollected);const oneDayMs=24*60*60*1000;const nextCollectionTime=new Date(lastCollected.getTime()+oneDayMs);const timeUntilNextMs=Math.max(0,nextCollectionTime.getTime()-now.getTime());return Math.ceil(timeUntilNextMs/(60*60*1000));};export const getPlantProgressPercentage=plant=>{const config=plantConfigs[plant.type];const{stage,waterAccumulated}=plant;if(stage==='Brote'){return waterAccumulated/config.stageThresholds.Joven*100;}else if(stage==='Joven'){const min=config.stageThresholds.Joven;const max=config.stageThresholds.Adulta;return(waterAccumulated-min)/(max-min)*100;}else if(stage==='Adulta'){const min=config.stageThresholds.Adulta;const max=config.stageThresholds.Florecida;return(waterAccumulated-min)/(max-min)*100;}else{const min=config.stageThresholds.Florecida;const max=config.evolutionThreshold;return(waterAccumulated-min)/(max-min)*100;}};export const getPlantEvolutionPercentage=plant=>{return plant.waterAccumulated/plant.evolutionThreshold*100;};export const getPlantImageUrl=plant=>{const baseUrl='https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';return`${baseUrl}${plant.type.toLowerCase()}_${plant.stage.toLowerCase()}.png`;};export const getPotImageUrl=(potColor='default')=>{const baseUrl='https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';return`${baseUrl}pot_${potColor}.png`;};","map":{"version":3,"names":["AsyncStorage","PLANT_STORAGE_KEY","PLANT_REWARDS_KEY","LAST_ACTIVITY_KEY","plantConfigs","type","waterRequirement","stageThresholds","Brote","Joven","Adulta","Florecida","evolutionThreshold","getPlantStage","plant","config","waterAccumulated","updateLastActivity","now","Date","toISOString","setItem","error","console","getLastActivity","getItem","initializePlant","newPlant","id","name","stage","health","lastWatered","stageThreshold","waterAvailable","lastFreeWaterCollected","savePlant","getPlant","plantData","JSON","parse","undefined","updatedPlant","updatePlantHealthBasedOnInactivity","stringify","lastActivityStr","lastActivity","hoursSinceActivity","Math","floor","getTime","log","healthReduction","min","updatePlantHealth","hoursPassed","daysPassed","addWaterFromBet","betType","success","waterAmount","getNextPlantType","currentType","evolutionOrder","currentIndex","indexOf","length","getPendingRewards","rewardsData","rewards","amount","addPendingReward","claimPendingRewards","pendingRewards","collectDailyFreeWater","collected","lastCollected","waterPlant","updatedStage","nextPlantType","getTimeUntilNextFreeWater","oneDayMs","nextCollectionTime","timeUntilNextMs","max","ceil","getPlantProgressPercentage","getPlantEvolutionPercentage","getPlantImageUrl","baseUrl","toLowerCase","getPotImageUrl","potColor"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/plantService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Plant, PlantType, PlantStage, PlantConfig } from '../types/plant';\n\nconst PLANT_STORAGE_KEY = 'meteo_plant_data';\nconst PLANT_REWARDS_KEY = 'meteo_plant_rewards';\nconst LAST_ACTIVITY_KEY = 'meteo_last_activity';\n\n// Plant configurations\nconst plantConfigs: Record<PlantType, PlantConfig> = {\n  'Cactus': {\n    type: 'Cactus',\n    waterRequirement: 2,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Suculenta': {\n    type: 'Suculenta',\n    waterRequirement: 3,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Aloe': {\n    type: 'Aloe',\n    waterRequirement: 3,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Lavanda': {\n    type: 'Lavanda',\n    waterRequirement: 4,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Jade': {\n    type: 'Jade',\n    waterRequirement: 4,\n    stageThresholds: { Brote: 0, Joven: 11, Adulta: 26, Florecida: 41 },\n    evolutionThreshold: 60\n  },\n  'Girasol': {\n    type: 'Girasol',\n    waterRequirement: 5,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Rosa': {\n    type: 'Rosa',\n    waterRequirement: 6,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Orquídea': {\n    type: 'Orquídea',\n    waterRequirement: 6,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Monstera': {\n    type: 'Monstera',\n    waterRequirement: 7,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Hibisco': {\n    type: 'Hibisco',\n    waterRequirement: 7,\n    stageThresholds: { Brote: 0, Joven: 21, Adulta: 51, Florecida: 81 },\n    evolutionThreshold: 120\n  },\n  'Bambú': {\n    type: 'Bambú',\n    waterRequirement: 8,\n    stageThresholds: { Brote: 0, Joven: 31, Adulta: 81, Florecida: 151 },\n    evolutionThreshold: 250\n  },\n  'Helecho': {\n    type: 'Helecho',\n    waterRequirement: 9,\n    stageThresholds: { Brote: 0, Joven: 31, Adulta: 81, Florecida: 151 },\n    evolutionThreshold: 250\n  }\n};\n\n// Get plant stage based on water accumulated\nconst getPlantStage = (plant: Plant): PlantStage => {\n  const config = plantConfigs[plant.type];\n  const { waterAccumulated } = plant;\n  \n  if (waterAccumulated >= config.stageThresholds.Florecida) {\n    return 'Florecida';\n  } else if (waterAccumulated >= config.stageThresholds.Adulta) {\n    return 'Adulta';\n  } else if (waterAccumulated >= config.stageThresholds.Joven) {\n    return 'Joven';\n  } else {\n    return 'Brote';\n  }\n};\n\n// Update last activity timestamp\nexport const updateLastActivity = async (): Promise<void> => {\n  try {\n    const now = new Date().toISOString();\n    await AsyncStorage.setItem(LAST_ACTIVITY_KEY, now);\n  } catch (error) {\n    console.error('Error updating last activity:', error);\n  }\n};\n\n// Get last activity timestamp\nexport const getLastActivity = async (): Promise<string | null> => {\n  try {\n    return await AsyncStorage.getItem(LAST_ACTIVITY_KEY);\n  } catch (error) {\n    console.error('Error getting last activity:', error);\n    return null;\n  }\n};\n\n// Initialize a new plant\nexport const initializePlant = async (): Promise<Plant> => {\n  const newPlant: Plant = {\n    id: Date.now(),\n    name: 'Mi Planta',\n    type: 'Cactus',\n    stage: 'Brote',\n    waterRequirement: plantConfigs['Cactus'].waterRequirement,\n    waterAccumulated: 0,\n    health: 100,\n    lastWatered: new Date().toISOString(),\n    stageThreshold: plantConfigs['Cactus'].stageThresholds.Joven,\n    evolutionThreshold: plantConfigs['Cactus'].evolutionThreshold,\n    waterAvailable: 5, // Start with 5 units of water\n    lastFreeWaterCollected: new Date().toISOString()\n  };\n  \n  await savePlant(newPlant);\n  await updateLastActivity(); // Initialize last activity\n  return newPlant;\n};\n\n// Get current plant data\nexport const getPlant = async (): Promise<Plant | null> => {\n  try {\n    const plantData = await AsyncStorage.getItem(PLANT_STORAGE_KEY);\n    if (!plantData) return null;\n    \n    const plant: Plant = JSON.parse(plantData);\n    \n    // Add waterAvailable and lastFreeWaterCollected if they don't exist (for backward compatibility)\n    if (plant.waterAvailable === undefined) {\n      plant.waterAvailable = 5;\n    }\n    if (plant.lastFreeWaterCollected === undefined) {\n      plant.lastFreeWaterCollected = new Date().toISOString();\n    }\n    \n    // Update plant health based on inactivity\n    const updatedPlant = await updatePlantHealthBasedOnInactivity(plant);\n    \n    return updatedPlant;\n  } catch (error) {\n    console.error('Error getting plant data:', error);\n    return null;\n  }\n};\n\n// Save plant data\nexport const savePlant = async (plant: Plant): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(PLANT_STORAGE_KEY, JSON.stringify(plant));\n  } catch (error) {\n    console.error('Error saving plant data:', error);\n  }\n};\n\n// Update plant health based on player inactivity\nexport const updatePlantHealthBasedOnInactivity = async (plant: Plant): Promise<Plant> => {\n  const lastActivityStr = await getLastActivity();\n  \n  if (!lastActivityStr) {\n    // If no last activity is recorded, set it now and return plant unchanged\n    await updateLastActivity();\n    return plant;\n  }\n  \n  const now = new Date();\n  const lastActivity = new Date(lastActivityStr);\n  \n  // Calculate hours since last activity\n  const hoursSinceActivity = Math.floor((now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursSinceActivity >= 72) {\n    // Plant dies after 72 hours of inactivity\n    console.log('Plant died due to player inactivity for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  \n  if (hoursSinceActivity > 0) {\n    // Reduce health proportionally to inactivity time (1% per hour)\n    const healthReduction = Math.min(plant.health, hoursSinceActivity);\n    plant.health -= healthReduction;\n    \n    // If health reaches 0, reset plant\n    if (plant.health <= 0) {\n      console.log('Plant died due to health reaching 0 from inactivity');\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    \n    await savePlant(plant);\n  }\n  \n  // Update last activity to current time\n  await updateLastActivity();\n  \n  return plant;\n};\n\n// Update plant health based on daily water requirement and check for plant death\nexport const updatePlantHealth = async (): Promise<Plant | null> => {\n  const plant = await getPlant();\n  if (!plant) return null;\n  \n  const now = new Date();\n  const lastWatered = new Date(plant.lastWatered);\n  \n  // Check if 72 hours (3 days) have passed since last watering\n  const hoursPassed = Math.floor((now.getTime() - lastWatered.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursPassed >= 72) {\n    // Plant dies after 72 hours without water\n    console.log('Plant died due to lack of water for 72 hours');\n    const newPlant = await initializePlant();\n    return newPlant;\n  }\n  \n  // Check if a day has passed since last update\n  const daysPassed = Math.floor(hoursPassed / 24);\n  \n  if (daysPassed > 0) {\n    // Reduce health by 20% for each day without meeting water requirement\n    const healthReduction = Math.min(plant.health, 20 * daysPassed);\n    plant.health -= healthReduction;\n    \n    // If health reaches 0, reset plant\n    if (plant.health <= 0) {\n      const newPlant = await initializePlant();\n      return newPlant;\n    }\n    \n    plant.lastWatered = now.toISOString();\n    await savePlant(plant);\n  }\n  \n  return plant;\n};\n\n// Add water to plant from successful bets\nexport const addWaterFromBet = async (betType: 'rain' | 'temp_min' | 'temp_max', success: boolean): Promise<Plant | null> => {\n  if (!success) return await getPlant();\n  \n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  \n  // Water amounts for different bet types\n  const waterAmount = betType === 'rain' ? 5 : 10;\n  \n  // Add water to plant's available water\n  plant.waterAvailable += waterAmount;\n  \n  await savePlant(plant);\n  await updateLastActivity(); // Update last activity when adding water from bet\n  return plant;\n};\n\n// Get next plant type in evolution\nconst getNextPlantType = (currentType: PlantType): PlantType | null => {\n  const evolutionOrder: PlantType[] = [\n    'Cactus', 'Suculenta', 'Aloe', 'Lavanda', 'Jade',\n    'Girasol', 'Rosa', 'Orquídea', 'Monstera', 'Hibisco',\n    'Bambú', 'Helecho'\n  ];\n  \n  const currentIndex = evolutionOrder.indexOf(currentType);\n  if (currentIndex === -1 || currentIndex === evolutionOrder.length - 1) {\n    return null; // Already at max evolution or invalid type\n  }\n  \n  return evolutionOrder[currentIndex + 1];\n};\n\n// Get pending rewards from successful bets\nexport const getPendingRewards = async (): Promise<number> => {\n  try {\n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    if (!rewardsData) return 0;\n    \n    const rewards = JSON.parse(rewardsData);\n    return rewards.amount || 0;\n  } catch (error) {\n    console.error('Error getting pending rewards:', error);\n    return 0;\n  }\n};\n\n// Add pending reward\nexport const addPendingReward = async (betType: 'rain' | 'temp_min' | 'temp_max', success: boolean): Promise<void> => {\n  if (!success) return;\n  \n  try {\n    const waterAmount = betType === 'rain' ? 5 : 10;\n    \n    const rewardsData = await AsyncStorage.getItem(PLANT_REWARDS_KEY);\n    let rewards = { amount: 0 };\n    \n    if (rewardsData) {\n      rewards = JSON.parse(rewardsData);\n    }\n    \n    rewards.amount = (rewards.amount || 0) + waterAmount;\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify(rewards));\n    await updateLastActivity(); // Update last activity when adding pending reward\n  } catch (error) {\n    console.error('Error adding pending reward:', error);\n  }\n};\n\n// Claim pending rewards\nexport const claimPendingRewards = async (): Promise<Plant | null> => {\n  try {\n    const pendingRewards = await getPendingRewards();\n    if (pendingRewards <= 0) return await getPlant();\n    \n    let plant = await getPlant();\n    if (!plant) {\n      plant = await initializePlant();\n    }\n    \n    // Add water to plant's available water\n    plant.waterAvailable += pendingRewards;\n    \n    // Reset health to 100% when watered\n    plant.health = 100;\n    plant.lastWatered = new Date().toISOString();\n    \n    await savePlant(plant);\n    await updateLastActivity(); // Update last activity when claiming rewards\n    \n    // Clear pending rewards\n    await AsyncStorage.setItem(PLANT_REWARDS_KEY, JSON.stringify({ amount: 0 }));\n    \n    return plant;\n  } catch (error) {\n    console.error('Error claiming rewards:', error);\n    return null;\n  }\n};\n\n// Collect daily free water (1 unit)\nexport const collectDailyFreeWater = async (): Promise<{plant: Plant | null, collected: boolean}> => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n    return { plant, collected: false };\n  }\n  \n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  \n  // Check if 24 hours have passed since last collection\n  const hoursPassed = Math.floor((now.getTime() - lastCollected.getTime()) / (1000 * 60 * 60));\n  \n  if (hoursPassed >= 24) {\n    // Add 1 unit of free water\n    plant.waterAvailable += 1;\n    plant.lastFreeWaterCollected = now.toISOString();\n    \n    await savePlant(plant);\n    await updateLastActivity(); // Update last activity when collecting free water\n    return { plant, collected: true };\n  }\n  \n  return { plant, collected: false };\n};\n\n// Water plant manually\nexport const waterPlant = async (amount: number): Promise<{plant: Plant | null, success: boolean}> => {\n  let plant = await getPlant();\n  if (!plant) {\n    plant = await initializePlant();\n  }\n  \n  // Check if user has enough water available\n  if (plant.waterAvailable < amount) {\n    return { plant, success: false };\n  }\n  \n  // Deduct water from available water\n  plant.waterAvailable -= amount;\n  \n  // Add water to plant\n  plant.waterAccumulated += amount;\n  \n  // Check if plant should evolve to next stage\n  const updatedStage = getPlantStage(plant);\n  if (updatedStage !== plant.stage) {\n    plant.stage = updatedStage;\n  }\n  \n  // Check if plant should evolve to next type\n  if (plant.waterAccumulated >= plant.evolutionThreshold) {\n    const nextPlantType = getNextPlantType(plant.type);\n    if (nextPlantType) {\n      plant.type = nextPlantType;\n      plant.waterRequirement = plantConfigs[nextPlantType].waterRequirement;\n      plant.waterAccumulated = 0;\n      plant.stage = 'Brote';\n      plant.stageThreshold = plantConfigs[nextPlantType].stageThresholds.Joven;\n      plant.evolutionThreshold = plantConfigs[nextPlantType].evolutionThreshold;\n    }\n  }\n  \n  // Reset health to 100% when watered\n  plant.health = 100;\n  plant.lastWatered = new Date().toISOString();\n  \n  await savePlant(plant);\n  await updateLastActivity(); // Update last activity when watering plant\n  return { plant, success: true };\n};\n\n// Get time until next free water collection\nexport const getTimeUntilNextFreeWater = (plant: Plant): number => {\n  const now = new Date();\n  const lastCollected = new Date(plant.lastFreeWaterCollected);\n  \n  // 24 hours in milliseconds\n  const oneDayMs = 24 * 60 * 60 * 1000;\n  \n  // Calculate time until next collection\n  const nextCollectionTime = new Date(lastCollected.getTime() + oneDayMs);\n  const timeUntilNextMs = Math.max(0, nextCollectionTime.getTime() - now.getTime());\n  \n  // Return hours until next collection\n  return Math.ceil(timeUntilNextMs / (60 * 60 * 1000));\n};\n\n// Get plant progress percentage for current stage\nexport const getPlantProgressPercentage = (plant: Plant): number => {\n  const config = plantConfigs[plant.type];\n  const { stage, waterAccumulated } = plant;\n  \n  if (stage === 'Brote') {\n    return (waterAccumulated / config.stageThresholds.Joven) * 100;\n  } else if (stage === 'Joven') {\n    const min = config.stageThresholds.Joven;\n    const max = config.stageThresholds.Adulta;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  } else if (stage === 'Adulta') {\n    const min = config.stageThresholds.Adulta;\n    const max = config.stageThresholds.Florecida;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  } else {\n    const min = config.stageThresholds.Florecida;\n    const max = config.evolutionThreshold;\n    return ((waterAccumulated - min) / (max - min)) * 100;\n  }\n};\n\n// Get plant evolution progress percentage\nexport const getPlantEvolutionPercentage = (plant: Plant): number => {\n  return (plant.waterAccumulated / plant.evolutionThreshold) * 100;\n};\n\n// Get plant image URL based on type and stage\nexport const getPlantImageUrl = (plant: Plant): string => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}${plant.type.toLowerCase()}_${plant.stage.toLowerCase()}.png`;\n};\n\n// Get pot image URL\nexport const getPotImageUrl = (potColor: string = 'default'): string => {\n  const baseUrl = 'https://raw.githubusercontent.com/bfloat/meteo-plant-assets/main/';\n  return `${baseUrl}pot_${potColor}.png`;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}