{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import React,{createContext,useContext,useState,useEffect}from'react';import AsyncStorage from'@react-native-async-storage/async-storage';import{fetchWeatherData,fetchCurrentRainData,fetchCurrentTemperatureData}from\"../services/weatherService\";import{getLocalBets,startBackgroundVerification,cleanupOldBets,getRemainingTemperatureBets as getLocalRemainingTemperatureBets,showBetResolutionNotification,getAndClearRecentlyResolvedBets}from\"../services/localBetService\";import{loginUser,registerUser,getCurrentUser,isLoggedIn,logoutUser,updateUserCoins,updateUserBetStats,updateUserWaterDrops,updateUserAvatar,updateUserDailyReward}from\"../services/enhancedAuthService\";import{resolveBets}from\"../utils/resolveBets\";import{addBet,getRemainingTemperatureBets}from\"../services/localSupabaseService\";import{updateLastActivity}from\"../services/plantService\";import{jsx as _jsx}from\"react/jsx-runtime\";var AppContext=createContext(undefined);export var AppProvider=function AppProvider(_ref){var children=_ref.children;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];var _useState3=useState(100),_useState4=_slicedToArray(_useState3,2),coins=_useState4[0],setCoins=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),waterDrops=_useState6[0],setWaterDrops=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),bets=_useState8[0],setBets=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),isLoading=_useState10[0],setIsLoading=_useState10[1];var _useState11=useState(2),_useState12=_slicedToArray(_useState11,2),remainingTempBets=_useState12[0],setRemainingTempBets=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),isAuthenticated=_useState14[0],setIsAuthenticated=_useState14[1];var _useState15=useState('es'),_useState16=_slicedToArray(_useState15,2),language=_useState16[0],setLanguage=_useState16[1];var _useState17=useState(true),_useState18=_slicedToArray(_useState17,2),isOnline=_useState18[0],setIsOnline=_useState18[1];var trackActivity=function(){var _ref2=_asyncToGenerator(function*(){yield updateLastActivity();});return function trackActivity(){return _ref2.apply(this,arguments);};}();useEffect(function(){var initializeApp=function(){var _ref3=_asyncToGenerator(function*(){setIsLoading(true);try{yield trackActivity();var savedLanguage=yield AsyncStorage.getItem('app_language');if(savedLanguage){setLanguage(savedLanguage);}var authenticated=yield isLoggedIn();setIsAuthenticated(authenticated);if(authenticated){var currentUser=yield getCurrentUser();if(currentUser){var userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);}}var localBets=yield getLocalBets();setBets(localBets);yield refreshRemainingTempBets();yield cleanupOldBets();yield checkForResolvedBets();}catch(error){console.error('Error initializing app:',error);}finally{setIsLoading(false);}});return function initializeApp(){return _ref3.apply(this,arguments);};}();initializeApp();var stopVerification=startBackgroundVerification(function(resolvedBets,coinsWon){if(resolvedBets.length>0){setBets(function(prevBets){var updatedBets=_toConsumableArray(prevBets);resolvedBets.forEach(function(resolvedBet){var index=updatedBets.findIndex(function(bet){return bet.timestamp===resolvedBet.timestamp;});if(index!==-1){updatedBets[index]=resolvedBet;}});return updatedBets;});if(coinsWon>0){addCoins(coinsWon);if(user){var wonBets=resolvedBets.filter(function(bet){return bet.won;});if(wonBets.length>0){updateUserBetStats(user.id,true);}}}showBetResolutionNotification(resolvedBets,coinsWon);}});return function(){stopVerification();};},[]);var addCoins=function(){var _ref4=_asyncToGenerator(function*(amount){var newTotal=coins+amount;setCoins(newTotal);if(user){var updatedUser=_objectSpread(_objectSpread({},user),{},{coins:newTotal});setUser(updatedUser);yield updateUserCoins(user.id,newTotal);}yield trackActivity();});return function addCoins(_x){return _ref4.apply(this,arguments);};}();var addWaterDrops=function(){var _ref5=_asyncToGenerator(function*(amount){var newTotal=waterDrops+amount;setWaterDrops(newTotal);if(user){var updatedUser=_objectSpread(_objectSpread({},user),{},{waterDrops:newTotal});setUser(updatedUser);yield updateUserWaterDrops(user.id,amount);}yield trackActivity();});return function addWaterDrops(_x2){return _ref5.apply(this,arguments);};}();var updateAvatar=function(){var _ref6=_asyncToGenerator(function*(avatarUrl){if(user){var updatedUser=_objectSpread(_objectSpread({},user),{},{avatar:avatarUrl});setUser(updatedUser);yield updateUserAvatar(user.id,avatarUrl);yield trackActivity();}});return function updateAvatar(_x3){return _ref6.apply(this,arguments);};}();var getDailyRewards=function getDailyRewards(day){var rewards=[{day:1,coins:5,waterDrops:5},{day:2,coins:10,waterDrops:0},{day:3,coins:0,waterDrops:10},{day:4,coins:50,waterDrops:0},{day:5,coins:50,waterDrops:1}];return rewards[day-1]||rewards[0];};var getNextDailyRewardTime=function(){var _ref7=_asyncToGenerator(function*(){if(!user||!user.lastDailyReward){return null;}var lastRewardDate=new Date(user.lastDailyReward);var nextRewardDate=new Date(lastRewardDate);nextRewardDate.setDate(nextRewardDate.getDate()+1);return nextRewardDate;});return function getNextDailyRewardTime(){return _ref7.apply(this,arguments);};}();var getDailyRewardStreak=function(){var _ref8=_asyncToGenerator(function*(){if(!user){return 0;}return user.dailyRewardStreak||0;});return function getDailyRewardStreak(){return _ref8.apply(this,arguments);};}();var claimDailyReward=function(){var _ref9=_asyncToGenerator(function*(){if(!user){return null;}var now=new Date();var streak=user.dailyRewardStreak||0;var canClaim=true;if(user.lastDailyReward){var lastRewardDate=new Date(user.lastDailyReward);var timeDiff=now.getTime()-lastRewardDate.getTime();var daysDiff=Math.floor(timeDiff/(1000*60*60*24));if(daysDiff<1){canClaim=false;}else if(daysDiff>1){streak=0;}}if(!canClaim){return null;}streak=streak%5+1;var reward=getDailyRewards(streak);if(reward.coins>0){yield addCoins(reward.coins);}if(reward.waterDrops>0){yield addWaterDrops(reward.waterDrops);}yield updateUserDailyReward(user.id,now.toISOString(),streak);setUser(_objectSpread(_objectSpread({},user),{},{lastDailyReward:now.toISOString(),dailyRewardStreak:streak}));return reward;});return function claimDailyReward(){return _ref9.apply(this,arguments);};}();var addBetHandler=function(){var _ref10=_asyncToGenerator(function*(bet){try{yield trackActivity();yield addCoins(-bet.coins);var betWithUser=_objectSpread(_objectSpread({},bet),{},{user_id:(user==null?void 0:user.id)||'anonymous'});var savedBet=yield addBet(betWithUser);if(!savedBet){throw new Error('Error al guardar la apuesta');}setBets(function(prevBets){return[savedBet].concat(_toConsumableArray(prevBets));});if(bet.option==='temp_min'||bet.option==='temp_max'){yield refreshRemainingTempBets();}if(user){yield updateUserBetStats(user.id,false);}}catch(error){yield addCoins(bet.coins);throw error;}});return function addBetHandler(_x4){return _ref10.apply(this,arguments);};}();var getWeatherForDate=function(){var _ref11=_asyncToGenerator(function*(date){yield trackActivity();return yield fetchWeatherData(date);});return function getWeatherForDate(_x5){return _ref11.apply(this,arguments);};}();var getCurrentRainAmount=function(){var _ref12=_asyncToGenerator(function*(){yield trackActivity();return yield fetchCurrentRainData();});return function getCurrentRainAmount(){return _ref12.apply(this,arguments);};}();var getCurrentTemperature=function(){var _ref13=_asyncToGenerator(function*(){yield trackActivity();return yield fetchCurrentTemperatureData();});return function getCurrentTemperature(){return _ref13.apply(this,arguments);};}();var refreshRemainingTempBets=function(){var _ref14=_asyncToGenerator(function*(){try{yield trackActivity();var remaining=user?yield getRemainingTemperatureBets(user.id):yield getLocalRemainingTemperatureBets();setRemainingTempBets(remaining);}catch(error){console.error('Error refreshing remaining temperature bets:',error);}});return function refreshRemainingTempBets(){return _ref14.apply(this,arguments);};}();var evaluateBets=function(){var _ref15=_asyncToGenerator(function*(){try{yield trackActivity();var _yield$resolveBets=yield resolveBets(),resolvedBets=_yield$resolveBets.resolvedBets,totalCoinsWon=_yield$resolveBets.totalCoinsWon;if(resolvedBets.length>0){setBets(function(prevBets){var updatedBets=_toConsumableArray(prevBets);resolvedBets.forEach(function(resolvedBet){var index=updatedBets.findIndex(function(bet){return bet.timestamp===resolvedBet.timestamp;});if(index!==-1){updatedBets[index]=resolvedBet;}});return updatedBets;});if(totalCoinsWon>0){addCoins(totalCoinsWon);if(user){var wonBets=resolvedBets.filter(function(bet){return bet.won;});if(wonBets.length>0){updateUserBetStats(user.id,true);}}showBetResolutionNotification(resolvedBets,totalCoinsWon);}}}catch(error){console.error('Error evaluating bets:',error);}});return function evaluateBets(){return _ref15.apply(this,arguments);};}();var checkForResolvedBets=function(){var _ref16=_asyncToGenerator(function*(){try{yield trackActivity();var recentlyResolvedBets=yield getAndClearRecentlyResolvedBets();if(recentlyResolvedBets.length>0){var totalCoinsWon=recentlyResolvedBets.filter(function(bet){return bet.won;}).reduce(function(total,bet){return total+bet.coins*bet.leverage;},0);if(totalCoinsWon>0){showBetResolutionNotification(recentlyResolvedBets,totalCoinsWon);}}yield evaluateBets();}catch(error){console.error('Error checking for resolved bets:',error);}});return function checkForResolvedBets(){return _ref16.apply(this,arguments);};}();var login=function(){var _ref17=_asyncToGenerator(function*(username,password){try{yield trackActivity();var response=yield loginUser(username,password);if(response.success&&response.userId&&response.username){var currentUser=yield getCurrentUser();if(currentUser){var userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);setIsAuthenticated(true);var userBets=yield getLocalBets();setBets(userBets);yield refreshRemainingTempBets();}}return response;}catch(error){console.error('Error in login:',error);return{success:false,message:'Ha ocurrido un error al iniciar sesión. Por favor, inténtalo de nuevo.'};}});return function login(_x6,_x7){return _ref17.apply(this,arguments);};}();var register=function(){var _ref18=_asyncToGenerator(function*(username,password){try{yield trackActivity();var response=yield registerUser(username,password);if(response.success&&response.userId&&response.username){var currentUser=yield getCurrentUser();if(currentUser){var userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);setIsAuthenticated(true);}}return response;}catch(error){console.error('Error in register:',error);return{success:false,message:'Ha ocurrido un error al registrarse. Por favor, inténtalo de nuevo.'};}});return function register(_x8,_x9){return _ref18.apply(this,arguments);};}();var logout=function(){var _ref19=_asyncToGenerator(function*(){try{yield trackActivity();yield logoutUser();setUser(null);setCoins(0);setWaterDrops(0);setIsAuthenticated(false);setBets([]);}catch(error){console.error('Error in logout:',error);}});return function logout(){return _ref19.apply(this,arguments);};}();var refreshAuthState=function(){var _ref20=_asyncToGenerator(function*(){try{yield trackActivity();var authenticated=yield isLoggedIn();setIsAuthenticated(authenticated);if(authenticated){var currentUser=yield getCurrentUser();if(currentUser){var userProfile={id:currentUser.userId,username:currentUser.username,coins:currentUser.coins||100,waterDrops:currentUser.waterDrops||0,totalBets:currentUser.totalBets||0,wonBets:currentUser.wonBets||0,avatar:currentUser.avatar,lastDailyReward:currentUser.lastDailyReward,dailyRewardStreak:currentUser.dailyRewardStreak||0};setUser(userProfile);setCoins(userProfile.coins);setWaterDrops(userProfile.waterDrops||0);var userBets=yield getLocalBets();setBets(userBets);yield refreshRemainingTempBets();}}}catch(error){console.error('Error refreshing auth state:',error);}});return function refreshAuthState(){return _ref20.apply(this,arguments);};}();var changeLanguage=function(){var _ref21=_asyncToGenerator(function*(lang){yield trackActivity();setLanguage(lang);yield AsyncStorage.setItem('app_language',lang);});return function changeLanguage(_x10){return _ref21.apply(this,arguments);};}();return _jsx(AppContext.Provider,{value:{user:user,setUser:setUser,coins:coins,addCoins:addCoins,waterDrops:waterDrops,addWaterDrops:addWaterDrops,bets:bets,addBet:addBetHandler,getWeatherForDate:getWeatherForDate,isLoading:isLoading,remainingTempBets:remainingTempBets,refreshRemainingTempBets:refreshRemainingTempBets,login:login,register:register,logout:logout,refreshAuthState:refreshAuthState,isAuthenticated:isAuthenticated,getCurrentRainAmount:getCurrentRainAmount,getCurrentTemperature:getCurrentTemperature,language:language,setLanguage:changeLanguage,evaluateBets:evaluateBets,isOnline:isOnline,checkForResolvedBets:checkForResolvedBets,trackActivity:trackActivity,updateAvatar:updateAvatar,claimDailyReward:claimDailyReward,getNextDailyRewardTime:getNextDailyRewardTime,getDailyRewardStreak:getDailyRewardStreak},children:children});};export var useApp=function useApp(){var context=useContext(AppContext);if(context===undefined){throw new Error('useApp must be used within an AppProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","fetchWeatherData","fetchCurrentRainData","fetchCurrentTemperatureData","getLocalBets","startBackgroundVerification","cleanupOldBets","getRemainingTemperatureBets","getLocalRemainingTemperatureBets","showBetResolutionNotification","getAndClearRecentlyResolvedBets","loginUser","registerUser","getCurrentUser","isLoggedIn","logoutUser","updateUserCoins","updateUserBetStats","updateUserWaterDrops","updateUserAvatar","updateUserDailyReward","resolveBets","addBet","updateLastActivity","jsx","_jsx","AppContext","undefined","AppProvider","_ref","children","_useState","_useState2","_slicedToArray","user","setUser","_useState3","_useState4","coins","setCoins","_useState5","_useState6","waterDrops","setWaterDrops","_useState7","_useState8","bets","setBets","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","remainingTempBets","setRemainingTempBets","_useState13","_useState14","isAuthenticated","setIsAuthenticated","_useState15","_useState16","language","setLanguage","_useState17","_useState18","isOnline","setIsOnline","trackActivity","_ref2","_asyncToGenerator","apply","arguments","initializeApp","_ref3","savedLanguage","getItem","authenticated","currentUser","userProfile","id","userId","username","totalBets","wonBets","avatar","lastDailyReward","dailyRewardStreak","localBets","refreshRemainingTempBets","checkForResolvedBets","error","console","stopVerification","resolvedBets","coinsWon","length","prevBets","updatedBets","_toConsumableArray","forEach","resolvedBet","index","findIndex","bet","timestamp","addCoins","filter","won","_ref4","amount","newTotal","updatedUser","_objectSpread","_x","addWaterDrops","_ref5","_x2","updateAvatar","_ref6","avatarUrl","_x3","getDailyRewards","day","rewards","getNextDailyRewardTime","_ref7","lastRewardDate","Date","nextRewardDate","setDate","getDate","getDailyRewardStreak","_ref8","claimDailyReward","_ref9","now","streak","canClaim","timeDiff","getTime","daysDiff","Math","floor","reward","toISOString","addBetHandler","_ref10","betWithUser","user_id","savedBet","Error","concat","option","_x4","getWeatherForDate","_ref11","date","_x5","getCurrentRainAmount","_ref12","getCurrentTemperature","_ref13","_ref14","remaining","evaluateBets","_ref15","_yield$resolveBets","totalCoinsWon","_ref16","recentlyResolvedBets","reduce","total","leverage","login","_ref17","password","response","success","userBets","message","_x6","_x7","register","_ref18","_x8","_x9","logout","_ref19","refreshAuthState","_ref20","changeLanguage","_ref21","lang","setItem","_x10","Provider","value","useApp","context"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Bet, WeatherData, UserProfile, DailyReward } from '../types/weather';\nimport { fetchWeatherData, fetchCurrentRainData, fetchCurrentTemperatureData } from '../services/weatherService';\nimport { \n  getLocalBets, \n  startBackgroundVerification,\n  cleanupOldBets,\n  getRemainingTemperatureBets as getLocalRemainingTemperatureBets,\n  showBetResolutionNotification,\n  getAndClearRecentlyResolvedBets\n} from '../services/localBetService';\nimport { \n  loginUser, \n  registerUser, \n  getCurrentUser, \n  isLoggedIn, \n  logoutUser, \n  LoginResponse,\n  updateUserCoins,\n  updateUserBetStats,\n  updateUserWaterDrops,\n  updateUserAvatar,\n  updateUserDailyReward\n} from '../services/enhancedAuthService';\nimport { resolveBets } from '../utils/resolveBets';\nimport { addBet, getRemainingTemperatureBets } from '../services/localSupabaseService';\nimport { updateLastActivity } from '../services/plantService';\n\ninterface AppContextType {\n  user: UserProfile | null;\n  setUser: (user: UserProfile | null) => void;\n  coins: number;\n  addCoins: (amount: number) => void;\n  waterDrops: number;\n  addWaterDrops: (amount: number) => void;\n  bets: Bet[];\n  addBet: (bet: Bet) => Promise<void>;\n  getWeatherForDate: (date: string) => Promise<WeatherData>;\n  isLoading: boolean;\n  remainingTempBets: number;\n  refreshRemainingTempBets: () => Promise<void>;\n  login: (username: string, password: string) => Promise<LoginResponse>;\n  register: (username: string, password: string) => Promise<LoginResponse>;\n  logout: () => Promise<void>;\n  refreshAuthState: () => Promise<void>;\n  isAuthenticated: boolean;\n  getCurrentRainAmount: () => Promise<number>;\n  getCurrentTemperature: () => Promise<{min: number; max: number; current: number}>;\n  language: string;\n  setLanguage: (lang: string) => void;\n  evaluateBets: () => Promise<void>;\n  isOnline: boolean;\n  checkForResolvedBets: () => Promise<void>;\n  trackActivity: () => Promise<void>;\n  updateAvatar: (avatarUrl: string) => Promise<void>;\n  claimDailyReward: () => Promise<DailyReward | null>;\n  getNextDailyRewardTime: () => Promise<Date | null>;\n  getDailyRewardStreak: () => Promise<number>;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [coins, setCoins] = useState<number>(100);\n  const [waterDrops, setWaterDrops] = useState<number>(0);\n  const [bets, setBets] = useState<Bet[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [remainingTempBets, setRemainingTempBets] = useState<number>(2);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [language, setLanguage] = useState<string>('es');\n  const [isOnline, setIsOnline] = useState<boolean>(true);\n\n  // Track user activity\n  const trackActivity = async (): Promise<void> => {\n    await updateLastActivity();\n  };\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      setIsLoading(true);\n      try {\n        // Track initial activity\n        await trackActivity();\n\n        // Load language preference\n        const savedLanguage = await AsyncStorage.getItem('app_language');\n        if (savedLanguage) {\n          setLanguage(savedLanguage);\n        }\n\n        // Check if user is logged in\n        const authenticated = await isLoggedIn();\n        setIsAuthenticated(authenticated);\n        \n        if (authenticated) {\n          // Get current user\n          const currentUser = await getCurrentUser();\n          if (currentUser) {\n            // Convert auth user to UserProfile\n            const userProfile: UserProfile = {\n              id: currentUser.userId,\n              username: currentUser.username,\n              coins: currentUser.coins || 100,\n              waterDrops: currentUser.waterDrops || 0,\n              totalBets: currentUser.totalBets || 0,\n              wonBets: currentUser.wonBets || 0,\n              avatar: currentUser.avatar,\n              lastDailyReward: currentUser.lastDailyReward,\n              dailyRewardStreak: currentUser.dailyRewardStreak || 0\n            };\n            \n            setUser(userProfile);\n            setCoins(userProfile.coins);\n            setWaterDrops(userProfile.waterDrops || 0);\n          }\n        }\n\n        // Load bets\n        const localBets = await getLocalBets();\n        setBets(localBets);\n\n        // Check remaining temperature bets\n        await refreshRemainingTempBets();\n\n        // Clean up old bets\n        await cleanupOldBets();\n        \n        // Check for resolved bets when app initializes\n        await checkForResolvedBets();\n      } catch (error) {\n        console.error('Error initializing app:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeApp();\n\n    // Start background verification of bets\n    const stopVerification = startBackgroundVerification((resolvedBets, coinsWon) => {\n      if (resolvedBets.length > 0) {\n        // Update bets state with resolved bets\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        \n        // Add coins if any bets were won\n        if (coinsWon > 0) {\n          addCoins(coinsWon);\n          \n          // Update user bet stats\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n        }\n        \n        // Show notification about resolved bets\n        showBetResolutionNotification(resolvedBets, coinsWon);\n      }\n    });\n\n    return () => {\n      // Clean up verification process\n      stopVerification();\n    };\n  }, []);\n\n  const addCoins = async (amount: number) => {\n    const newTotal = coins + amount;\n    setCoins(newTotal);\n    \n    // Update user data\n    if (user) {\n      const updatedUser = { ...user, coins: newTotal };\n      setUser(updatedUser);\n      \n      // Update user coins in storage\n      await updateUserCoins(user.id, newTotal);\n    }\n    \n    // Track activity when adding coins\n    await trackActivity();\n  };\n\n  const addWaterDrops = async (amount: number) => {\n    const newTotal = waterDrops + amount;\n    setWaterDrops(newTotal);\n    \n    // Update user data\n    if (user) {\n      const updatedUser = { ...user, waterDrops: newTotal };\n      setUser(updatedUser);\n      \n      // Update user water drops in storage\n      await updateUserWaterDrops(user.id, amount);\n    }\n    \n    // Track activity when adding water drops\n    await trackActivity();\n  };\n\n  const updateAvatar = async (avatarUrl: string) => {\n    if (user) {\n      const updatedUser = { ...user, avatar: avatarUrl };\n      setUser(updatedUser);\n      \n      // Update user avatar in storage\n      await updateUserAvatar(user.id, avatarUrl);\n      \n      // Track activity when updating avatar\n      await trackActivity();\n    }\n  };\n\n  const getDailyRewards = (day: number): DailyReward => {\n    const rewards: DailyReward[] = [\n      { day: 1, coins: 5, waterDrops: 5 },\n      { day: 2, coins: 10, waterDrops: 0 },\n      { day: 3, coins: 0, waterDrops: 10 },\n      { day: 4, coins: 50, waterDrops: 0 },\n      { day: 5, coins: 50, waterDrops: 1 }\n    ];\n    \n    // Get reward for the current day, or default to day 1 if out of range\n    return rewards[day - 1] || rewards[0];\n  };\n\n  const getNextDailyRewardTime = async (): Promise<Date | null> => {\n    if (!user || !user.lastDailyReward) {\n      return null;\n    }\n    \n    const lastRewardDate = new Date(user.lastDailyReward);\n    const nextRewardDate = new Date(lastRewardDate);\n    nextRewardDate.setDate(nextRewardDate.getDate() + 1);\n    \n    return nextRewardDate;\n  };\n\n  const getDailyRewardStreak = async (): Promise<number> => {\n    if (!user) {\n      return 0;\n    }\n    \n    return user.dailyRewardStreak || 0;\n  };\n\n  const claimDailyReward = async (): Promise<DailyReward | null> => {\n    if (!user) {\n      return null;\n    }\n    \n    const now = new Date();\n    let streak = user.dailyRewardStreak || 0;\n    let canClaim = true;\n    \n    // Check if user has claimed a reward before\n    if (user.lastDailyReward) {\n      const lastRewardDate = new Date(user.lastDailyReward);\n      const timeDiff = now.getTime() - lastRewardDate.getTime();\n      const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n      \n      // If less than 24 hours have passed, can't claim\n      if (daysDiff < 1) {\n        canClaim = false;\n      } \n      // If more than 48 hours have passed, reset streak\n      else if (daysDiff > 1) {\n        streak = 0;\n      }\n    }\n    \n    if (!canClaim) {\n      return null;\n    }\n    \n    // Increment streak (max 5)\n    streak = (streak % 5) + 1;\n    \n    // Get reward for current streak day\n    const reward = getDailyRewards(streak);\n    \n    // Add rewards\n    if (reward.coins > 0) {\n      await addCoins(reward.coins);\n    }\n    \n    if (reward.waterDrops > 0) {\n      await addWaterDrops(reward.waterDrops);\n    }\n    \n    // Update user's last reward date and streak\n    await updateUserDailyReward(user.id, now.toISOString(), streak);\n    \n    // Update local user state\n    setUser({\n      ...user,\n      lastDailyReward: now.toISOString(),\n      dailyRewardStreak: streak\n    });\n    \n    return reward;\n  };\n\n  const addBetHandler = async (bet: Bet) => {\n    try {\n      // Track activity when placing a bet\n      await trackActivity();\n      \n      // Deduct coins for the bet\n      await addCoins(-bet.coins);\n      \n      // Add user_id to bet if authenticated\n      const betWithUser = {\n        ...bet,\n        user_id: user?.id || 'anonymous'\n      };\n      \n      // Save bet using the local service\n      const savedBet = await addBet(betWithUser);\n      \n      if (!savedBet) {\n        throw new Error('Error al guardar la apuesta');\n      }\n      \n      // Update bets state\n      setBets(prevBets => [savedBet, ...prevBets]);\n      \n      // Refresh remaining temperature bets if it's a temperature bet\n      if (bet.option === 'temp_min' || bet.option === 'temp_max') {\n        await refreshRemainingTempBets();\n      }\n      \n      // Update user bet stats\n      if (user) {\n        await updateUserBetStats(user.id, false);\n      }\n    } catch (error) {\n      // If there's an error, refund the coins\n      await addCoins(bet.coins);\n      throw error;\n    }\n  };\n\n  const getWeatherForDate = async (date: string): Promise<WeatherData> => {\n    // Track activity when getting weather data\n    await trackActivity();\n    return await fetchWeatherData(date);\n  };\n\n  const getCurrentRainAmount = async (): Promise<number> => {\n    // Track activity when getting current rain data\n    await trackActivity();\n    return await fetchCurrentRainData();\n  };\n\n  const getCurrentTemperature = async (): Promise<{min: number; max: number; current: number}> => {\n    // Track activity when getting current temperature data\n    await trackActivity();\n    return await fetchCurrentTemperatureData();\n  };\n\n  const refreshRemainingTempBets = async (): Promise<void> => {\n    try {\n      // Track activity when refreshing temperature bets\n      await trackActivity();\n      \n      // Use the local service to get remaining temperature bets\n      const remaining = user ? \n        await getRemainingTemperatureBets(user.id) : \n        await getLocalRemainingTemperatureBets();\n      \n      setRemainingTempBets(remaining);\n    } catch (error) {\n      console.error('Error refreshing remaining temperature bets:', error);\n    }\n  };\n\n  const evaluateBets = async (): Promise<void> => {\n    try {\n      // Track activity when evaluating bets\n      await trackActivity();\n      \n      const { resolvedBets, totalCoinsWon } = await resolveBets();\n      \n      // Update bets state with resolved bets\n      if (resolvedBets.length > 0) {\n        setBets(prevBets => {\n          const updatedBets = [...prevBets];\n          resolvedBets.forEach(resolvedBet => {\n            const index = updatedBets.findIndex(bet => bet.timestamp === resolvedBet.timestamp);\n            if (index !== -1) {\n              updatedBets[index] = resolvedBet;\n            }\n          });\n          return updatedBets;\n        });\n        \n        // Add coins if any bets were won\n        if (totalCoinsWon > 0) {\n          addCoins(totalCoinsWon);\n          \n          // Update user bet stats\n          if (user) {\n            const wonBets = resolvedBets.filter(bet => bet.won);\n            if (wonBets.length > 0) {\n              updateUserBetStats(user.id, true);\n            }\n          }\n          \n          // Show notification about resolved bets\n          showBetResolutionNotification(resolvedBets, totalCoinsWon);\n        }\n      }\n    } catch (error) {\n      console.error('Error evaluating bets:', error);\n    }\n  };\n  \n  const checkForResolvedBets = async (): Promise<void> => {\n    try {\n      // Track activity when checking for resolved bets\n      await trackActivity();\n      \n      // First, check if there are any recently resolved bets\n      const recentlyResolvedBets = await getAndClearRecentlyResolvedBets();\n      \n      if (recentlyResolvedBets.length > 0) {\n        // Calculate total coins won\n        const totalCoinsWon = recentlyResolvedBets\n          .filter(bet => bet.won)\n          .reduce((total, bet) => total + (bet.coins * bet.leverage), 0);\n        \n        // Show notification about resolved bets\n        if (totalCoinsWon > 0) {\n          showBetResolutionNotification(recentlyResolvedBets, totalCoinsWon);\n        }\n      }\n      \n      // Then, evaluate any pending bets\n      await evaluateBets();\n    } catch (error) {\n      console.error('Error checking for resolved bets:', error);\n    }\n  };\n\n  const login = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      // Track activity when logging in\n      await trackActivity();\n      \n      const response = await loginUser(username, password);\n      \n      if (response.success && response.userId && response.username) {\n        // Get current user with all data\n        const currentUser = await getCurrentUser();\n        \n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          // Update state\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n          \n          // Load user's bets\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          \n          // Refresh remaining temperature bets\n          await refreshRemainingTempBets();\n        }\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in login:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al iniciar sesión. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n\n  const register = async (username: string, password: string): Promise<LoginResponse> => {\n    try {\n      // Track activity when registering\n      await trackActivity();\n      \n      const response = await registerUser(username, password);\n      \n      if (response.success && response.userId && response.username) {\n        // Get current user with all data\n        const currentUser = await getCurrentUser();\n        \n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          // Update state\n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          setIsAuthenticated(true);\n        }\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in register:', error);\n      return {\n        success: false,\n        message: 'Ha ocurrido un error al registrarse. Por favor, inténtalo de nuevo.'\n      };\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      // Track activity when logging out\n      await trackActivity();\n      \n      await logoutUser();\n      setUser(null);\n      setCoins(0);\n      setWaterDrops(0);\n      setIsAuthenticated(false);\n      setBets([]);\n    } catch (error) {\n      console.error('Error in logout:', error);\n    }\n  };\n\n  const refreshAuthState = async (): Promise<void> => {\n    try {\n      // Track activity when refreshing auth state\n      await trackActivity();\n      \n      const authenticated = await isLoggedIn();\n      setIsAuthenticated(authenticated);\n      \n      if (authenticated) {\n        const currentUser = await getCurrentUser();\n        if (currentUser) {\n          // Create user profile\n          const userProfile: UserProfile = {\n            id: currentUser.userId,\n            username: currentUser.username,\n            coins: currentUser.coins || 100,\n            waterDrops: currentUser.waterDrops || 0,\n            totalBets: currentUser.totalBets || 0,\n            wonBets: currentUser.wonBets || 0,\n            avatar: currentUser.avatar,\n            lastDailyReward: currentUser.lastDailyReward,\n            dailyRewardStreak: currentUser.dailyRewardStreak || 0\n          };\n          \n          setUser(userProfile);\n          setCoins(userProfile.coins);\n          setWaterDrops(userProfile.waterDrops || 0);\n          \n          // Load user's bets\n          const userBets = await getLocalBets();\n          setBets(userBets);\n          \n          // Refresh remaining temperature bets\n          await refreshRemainingTempBets();\n        }\n      }\n    } catch (error) {\n      console.error('Error refreshing auth state:', error);\n    }\n  };\n\n  const changeLanguage = async (lang: string) => {\n    // Track activity when changing language\n    await trackActivity();\n    \n    setLanguage(lang);\n    await AsyncStorage.setItem('app_language', lang);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        user,\n        setUser,\n        coins,\n        addCoins,\n        waterDrops,\n        addWaterDrops,\n        bets,\n        addBet: addBetHandler,\n        getWeatherForDate,\n        isLoading,\n        remainingTempBets,\n        refreshRemainingTempBets,\n        login,\n        register,\n        logout,\n        refreshAuthState,\n        isAuthenticated,\n        getCurrentRainAmount,\n        getCurrentTemperature,\n        language,\n        setLanguage: changeLanguage,\n        evaluateBets,\n        isOnline,\n        checkForResolvedBets,\n        trackActivity,\n        updateAvatar,\n        claimDailyReward,\n        getNextDailyRewardTime,\n        getDailyRewardStreak\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useApp = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}