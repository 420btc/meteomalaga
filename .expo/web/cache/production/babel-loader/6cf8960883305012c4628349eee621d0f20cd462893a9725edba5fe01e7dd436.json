{"ast":null,"code":"import AsyncStorage from'@react-native-async-storage/async-storage';import{fetchCurrentRainData,fetchCurrentTemperatureData,fetchCurrentWindData}from\"./weatherService\";import{getRainOdds,getTemperatureOdds,getWindOdds}from\"./oddsService\";const LOCAL_BETS_STORAGE_KEY='local_bets';const TEMP_BETS_COUNT_KEY='daily_temp_bets';const WIND_BETS_TIMESTAMP_KEY='last_wind_bet_timestamp';const WIND_BETS_COUNT_KEY='wind_bets_count';const RAIN_BETS_COUNT_KEY='rain_bets_count';const LAST_BET_TIMESTAMP_KEY='last_bet_timestamp';const BET_LOCK_KEY='bet_lock';export const addBet=async bet=>{try{if(await isBetLocked()){console.log('Bet is locked. Waiting for unlock...');const lockTimestamp=await AsyncStorage.getItem('bet_lock_timestamp');if(lockTimestamp){const lockTime=new Date(lockTimestamp).getTime();const now=new Date().getTime();if(now-lockTime>10000){console.log('Force unlocking bet after 10 seconds');await unlockBetting();}else{throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');}}else{throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');}}await lockBetting();const isTemperatureBet=bet.option==='temperature'||bet.option==='temp_min'||bet.option==='temp_max';const isWindBet=bet.option==='wind_max';const isRainBet=bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount';console.log('Bet type check:',{isTemperatureBet,isWindBet,isRainBet,option:bet.option});if(isTemperatureBet){const remainingBets=await getRemainingTemperatureBets(bet.user_id||'anonymous');if(remainingBets<=0){await unlockBetting();throw new Error('Has alcanzado el límite de 2 apuestas de temperatura para hoy');}}if(isWindBet){const remainingWindBets=await getRemainingWindBets();if(remainingWindBets<=0){await unlockBetting();throw new Error('Has alcanzado el límite de 2 apuestas de viento cada 12 horas');}}let calculatedLeverage=1;if(isRainBet&&bet.option==='rain_amount'&&bet.value!==null){calculatedLeverage=getRainOdds(bet.value);}else if(isTemperatureBet&&bet.value!==null){calculatedLeverage=getTemperatureOdds(bet.value);}else if(isWindBet&&bet.value!==null){calculatedLeverage=getWindOdds(bet.value);}else if(bet.option==='rain_yes'){calculatedLeverage=3.0;}else if(bet.option==='rain_no'){calculatedLeverage=1.2;}const betData=Object.assign({},bet,{id:`bet_${Date.now()}_${Math.random().toString(36).substring(2,9)}`,date:bet.date||new Date().toISOString().split('T')[0],option:bet.option,value:bet.value,coins:bet.coins,leverage:calculatedLeverage,timestamp:bet.timestamp||new Date().toISOString(),result:bet.result||null,won:bet.won||null,city:bet.city||'Málaga',mode:bet.mode||'Simple',rain_mm:bet.rain_mm||null,resolution_date:bet.resolution_date||(()=>{const betTime=new Date(bet.timestamp||new Date().toISOString());const resolutionTime=new Date(betTime);if(bet.option==='wind_max'){resolutionTime.setHours(resolutionTime.getHours()+12);}else{resolutionTime.setHours(resolutionTime.getHours()+24);}return resolutionTime.toISOString().split('T')[0];})(),user_id:bet.user_id||'anonymous',status:bet.status||'pending',verificationTime:(()=>{const now=new Date();const verificationTime=new Date(now);const isTemperatureBet=bet.option==='temperature'||bet.option==='temp_min'||bet.option==='temp_max';const isWindBet=bet.option==='wind_max';const resolutionHours=isTemperatureBet||isWindBet||bet.bet_resolution_hours===12?12:24;verificationTime.setHours(verificationTime.getHours()+resolutionHours);return verificationTime.toISOString();})(),verified:false});betData.bet_type=getBetTypeFromOption(bet.option);if(bet.option==='temp_min'){betData.temp_min_c=bet.value;}else if(bet.option==='temp_max'){betData.temp_max_c=bet.value;}else if(bet.option==='wind_max'){betData.wind_kmh_max=bet.value;}if(bet.mode==='Pro'&&bet.value!==null){const margin=getMarginFromLeverage(bet.leverage);betData.range_min=Math.max(-50,bet.value-margin);betData.range_max=Math.min(999,bet.value+margin);}const existingBetsJson=await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);const existingBets=existingBetsJson?JSON.parse(existingBetsJson):[];const updatedBets=[...existingBets,betData];await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(updatedBets));if(bet.option==='temp_min'||bet.option==='temp_max'){await incrementDailyTemperatureBetCount();}if(bet.option==='wind_max'){await incrementWindBetCount();}if(bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount'){await incrementRainBetCount();}await AsyncStorage.setItem(LAST_BET_TIMESTAMP_KEY,new Date().toISOString());setTimeout(async()=>{await unlockBetting();},2000);return betData;}catch(error){console.error('Error in addBet:',error);await unlockBetting();throw error;}};export const getBets=async(userId='anonymous')=>{try{const betsJson=await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);const allBets=betsJson?JSON.parse(betsJson):[];const userBets=allBets.filter(bet=>bet.user_id===userId);return userBets.sort((a,b)=>new Date(b.timestamp).getTime()-new Date(a.timestamp).getTime());}catch(error){console.error('Error in getBets:',error);return[];}};export const updateBetResult=async betResult=>{try{const betsJson=await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);const bets=betsJson?JSON.parse(betsJson):[];const betIndex=bets.findIndex(bet=>bet.id===betResult.betId);if(betIndex===-1){return false;}bets[betIndex]=Object.assign({},bets[betIndex],{result:betResult.result,won:betResult.won,status:betResult.won?'ganada':'perdida',verified:true});await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(bets));return true;}catch(error){console.error('Error in updateBetResult:',error);return false;}};export const evaluatePendingBets=async(userId='anonymous')=>{try{const now=new Date();const betsJson=await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);const bets=betsJson?JSON.parse(betsJson):[];const betsToResolve=bets.filter(bet=>bet.status==='pending'&&bet.user_id===userId&&!bet.verified&&new Date(bet.verificationTime)<=now);if(betsToResolve.length===0){return[];}const currentRainAmount=await fetchCurrentRainData();const currentTemperature=await fetchCurrentTemperatureData();const currentWind=await fetchCurrentWindData();const results=[];const updatedBets=[...bets];for(const bet of betsToResolve){let result=0;let won=false;let margin=0;let resolution_explanation='';if(bet.bet_type==='rain'||bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount'){result=currentRainAmount;}else if(bet.bet_type==='temp_min'||bet.option==='temp_min'){result=currentTemperature.min;}else if(bet.bet_type==='temp_max'||bet.option==='temp_max'){result=currentTemperature.max;}else if(bet.option==='temperature'){result=currentTemperature.current;}else if(bet.option==='wind_max'){result=currentWind.max;}if(bet.mode==='Simple'){if(bet.option==='rain_yes'){won=result>0;if(won){resolution_explanation=`¡Ganaste! Predijiste correctamente que llovería. La cantidad de lluvia registrada fue de ${result} mm.`;}else{resolution_explanation=`Perdiste. Predijiste que llovería, pero no se registró lluvia (0 mm).`;}}else if(bet.option==='rain_no'){won=result===0;if(won){resolution_explanation=`¡Ganaste! Predijiste correctamente que no llovería. No se registró lluvia (0 mm).`;}else{resolution_explanation=`Perdiste. Predijiste que no llovería, pero se registraron ${result} mm de lluvia.`;}}else if(bet.option==='rain_amount'){const betValue=bet.rain_mm!==null?bet.rain_mm:bet.value;won=Math.abs((betValue||0)-result)<=0.5;if(won){resolution_explanation=`¡Ganaste! Tu predicción de ${betValue} mm de lluvia estaba dentro del margen de ±0.5 mm del valor real (${result} mm).`;}else{resolution_explanation=`Perdiste. Tu predicción de ${betValue} mm de lluvia difería más de ±0.5 mm del valor real (${result} mm).`;}}else if(bet.option==='temp_min'){const betValue=bet.temp_min_c!==null?bet.temp_min_c:bet.value;won=Math.abs((betValue||0)-result)<=1.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de temperatura mínima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;}else{resolution_explanation=`Perdiste. Tu predicción de temperatura mínima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;}}else if(bet.option==='temp_max'){const betValue=bet.temp_max_c!==null?bet.temp_max_c:bet.value;won=Math.abs((betValue||0)-result)<=1.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de temperatura máxima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;}else{resolution_explanation=`Perdiste. Tu predicción de temperatura máxima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;}}else if(bet.option==='temperature'){const betValue=bet.temperature_c!==null?bet.temperature_c:bet.value;won=Math.abs((betValue||0)-result)<=1.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de temperatura actual de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;}else{resolution_explanation=`Perdiste. Tu predicción de temperatura actual de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;}}else if(bet.option==='wind_max'){const betValue=bet.wind_kmh_max!==null?bet.wind_kmh_max:bet.value;won=Math.abs((betValue||0)-result)<=3.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de velocidad máxima del viento de ${betValue} km/h estaba dentro del margen de ±3.0 km/h del valor real (${result} km/h).`;}else{resolution_explanation=`Perdiste. Tu predicción de velocidad máxima del viento de ${betValue} km/h difería más de ±3.0 km/h del valor real (${result} km/h).`;}}}else if(bet.mode==='Pro'){margin=getMarginFromLeverage(bet.leverage);if(bet.range_min!==null&&bet.range_max!==null){won=result>=bet.range_min&&result<=bet.range_max;if(won){resolution_explanation=`¡Ganaste! El valor real (${result}) estaba dentro del rango que predijiste (${bet.range_min} - ${bet.range_max}).`;}else{resolution_explanation=`Perdiste. El valor real (${result}) estaba fuera del rango que predijiste (${bet.range_min} - ${bet.range_max}).`;}}else{let betValue=null;if(bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount'){betValue=bet.rain_mm!==null?bet.rain_mm:bet.value;}else if(bet.option==='temp_min'){betValue=bet.temp_min_c!==null?bet.temp_min_c:bet.value;}else if(bet.option==='temp_max'){betValue=bet.temp_max_c!==null?bet.temp_max_c:bet.value;}else if(bet.option==='temperature'){betValue=bet.temperature_c!==null?bet.temperature_c:bet.value;}else if(bet.option==='wind_max'){betValue=bet.wind_kmh_max!==null?bet.wind_kmh_max:bet.value;}if(betValue!==null){won=Math.abs(result-betValue)<=margin;if(won){resolution_explanation=`¡Ganaste! Tu predicción de ${betValue} estaba dentro del margen de ±${margin} del valor real (${result}).`;}else{resolution_explanation=`Perdiste. Tu predicción de ${betValue} difería más de ±${margin} del valor real (${result}).`;}}}}const betIndex=updatedBets.findIndex(b=>b.id===bet.id);if(betIndex!==-1){updatedBets[betIndex]=Object.assign({},updatedBets[betIndex],{result,won,verified:true,status:won?'ganada':'perdida',resolution_explanation});}results.push({betId:bet.id,result,won,margin});}await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(updatedBets));return results;}catch(error){console.error('Error in evaluatePendingBets:',error);return[];}};export const isBettingAllowed=async betType=>{try{if(await isBetLocked()){console.log('Betting is locked (anti-spam protection)');return false;}if(betType==='temperature'||betType==='temp_min'||betType==='temp_max'){console.log('Temperature betting is always allowed');return true;}if(betType==='wind'){const remainingWindBets=await getRemainingWindBets();console.log('Wind betting check:',remainingWindBets>0);return remainingWindBets>0;}if(betType==='rain'||betType==='rain_yes'||betType==='rain_no'||betType==='rain_amount'){const remainingBets=await getRemainingRainBets();console.log('Rain betting allowed check in isBettingAllowed:',true,'Remaining bets:',remainingBets);return remainingBets>0;}console.log('General betting allowed check in isBettingAllowed:',true,'Bet type:',betType);return true;}catch(error){console.error('Error checking if betting is allowed:',error);return false;}};export const isTemperatureBettingAllowed=async(userId='anonymous')=>{try{if(await isBetLocked()){return false;}const count=await getDailyTemperatureBetCount();return count<2;}catch(error){console.error('Error in isTemperatureBettingAllowed:',error);return false;}};export const getRemainingTemperatureBets=async(userId='anonymous')=>{try{const count=await getDailyTemperatureBetCount();return Math.max(0,2-count);}catch(error){console.error('Error in getRemainingTemperatureBets:',error);return 0;}};export const canPlaceWindBetNow=async()=>{try{return(await getRemainingWindBets())>0;}catch(error){console.error('Error checking wind bet availability:',error);return false;}};export const getRemainingWindBets=async()=>{try{await checkAndResetWindBetCount();const countJson=await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);const countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};return Math.max(0,2-countData.count);}catch(error){console.error('Error getting remaining wind bets:',error);return 0;}};export const getRemainingRainBets=async()=>{try{await checkAndResetRainBetCount();const countJson=await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);const countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};console.log('Current rain bet count data:',countData);return Math.max(0,3-countData.count);}catch(error){console.error('Error getting remaining rain bets:',error);return 0;}};export const getTimeUntilNextWindBet=async()=>{try{const remainingBets=await getRemainingWindBets();if(remainingBets>0){return 0;}const countJson=await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);if(!countJson){return 0;}const countData=JSON.parse(countJson);const lastResetTime=new Date(countData.timestamp);const nextResetTime=new Date(lastResetTime);nextResetTime.setHours(nextResetTime.getHours()+12);const now=new Date();if(nextResetTime<=now){return 0;}return Math.ceil((nextResetTime.getTime()-now.getTime())/(1000*60));}catch(error){console.error('Error calculating time until next wind bet:',error);return 0;}};const getBetTypeFromOption=option=>{if(option==='rain_yes'||option==='rain_no'||option==='rain_amount'){return'rain';}else if(option==='temp_min'){return'temp_min';}else if(option==='temp_max'){return'temp_max';}else if(option==='temperature'){return'temperature';}else if(option==='wind_max'){return'wind';}else{return'rain';}};const getMarginFromLeverage=leverage=>{switch(leverage){case 2:return 5;case 5:return 4;case 10:return 3;case 20:return 2;case 50:return 1;case 100:return 0;default:return 5;}};export const resolveBets=async()=>{try{const now=new Date();const yesterday=new Date(now);yesterday.setDate(yesterday.getDate()-1);const betsJson=await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);const bets=betsJson?JSON.parse(betsJson):[];const pendingBets=bets.filter(bet=>bet.status==='pending'&&!bet.verified&&new Date(bet.verificationTime)<=now);if(pendingBets.length===0){return;}const currentRainAmount=await fetchCurrentRainData();const currentTemperature=await fetchCurrentTemperatureData();const currentWind=await fetchCurrentWindData();const updatedBets=[...bets];for(const bet of pendingBets){let won=false;let result=0;let resolution_explanation='';if(bet.option==='rain_amount'){result=currentRainAmount;const betValue=bet.rain_mm!==null?bet.rain_mm:bet.value;won=Math.abs((betValue||0)-result)<=0.5;if(won){resolution_explanation=`¡Ganaste! Tu predicción de ${betValue} mm de lluvia estaba dentro del margen de ±0.5 mm del valor real (${result} mm).`;}else{resolution_explanation=`Perdiste. Tu predicción de ${betValue} mm de lluvia difería más de ±0.5 mm del valor real (${result} mm).`;}}else if(bet.option==='rain_yes'){result=currentRainAmount;won=result>0;if(won){resolution_explanation=`¡Ganaste! Predijiste correctamente que llovería. La cantidad de lluvia registrada fue de ${result} mm.`;}else{resolution_explanation=`Perdiste. Predijiste que llovería, pero no se registró lluvia (0 mm).`;}}else if(bet.option==='rain_no'){result=currentRainAmount;won=result===0;if(won){resolution_explanation=`¡Ganaste! Predijiste correctamente que no llovería. No se registró lluvia (0 mm).`;}else{resolution_explanation=`Perdiste. Predijiste que no llovería, pero se registraron ${result} mm de lluvia.`;}}else if(bet.option==='temp_min'){result=currentTemperature.min;const betValue=bet.temp_min_c!==null?bet.temp_min_c:bet.value;won=Math.abs((betValue||0)-result)<=1.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de temperatura mínima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;}else{resolution_explanation=`Perdiste. Tu predicción de temperatura mínima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;}}else if(bet.option==='temp_max'){result=currentTemperature.max;const betValue=bet.temp_max_c!==null?bet.temp_max_c:bet.value;won=Math.abs((betValue||0)-result)<=1.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de temperatura máxima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;}else{resolution_explanation=`Perdiste. Tu predicción de temperatura máxima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;}}else if(bet.option==='temperature'){result=currentTemperature.current;const betValue=bet.temperature_c!==null?bet.temperature_c:bet.value;won=Math.abs((betValue||0)-result)<=1.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de temperatura actual de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;}else{resolution_explanation=`Perdiste. Tu predicción de temperatura actual de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;}}else if(bet.option==='wind_max'){result=currentWind.max;const betValue=bet.wind_kmh_max!==null?bet.wind_kmh_max:bet.value;won=Math.abs((betValue||0)-result)<=3.0;if(won){resolution_explanation=`¡Ganaste! Tu predicción de velocidad máxima del viento de ${betValue} km/h estaba dentro del margen de ±3.0 km/h del valor real (${result} km/h).`;}else{resolution_explanation=`Perdiste. Tu predicción de velocidad máxima del viento de ${betValue} km/h difería más de ±3.0 km/h del valor real (${result} km/h).`;}}const betIndex=updatedBets.findIndex(b=>b.id===bet.id);if(betIndex!==-1){updatedBets[betIndex]=Object.assign({},updatedBets[betIndex],{result,won,verified:true,status:won?'ganada':'perdida',resolution_explanation});}}await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(updatedBets));}catch(error){console.error('Error resolving bets:',error);}};const getDailyTemperatureBetCount=async()=>{try{const today=new Date().toISOString().split('T')[0];const countJson=await AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);const counts=countJson?JSON.parse(countJson):{};return counts[today]||0;}catch(error){console.error('Error getting daily temperature bet count:',error);return 0;}};const incrementDailyTemperatureBetCount=async()=>{try{const today=new Date().toISOString().split('T')[0];const countJson=await AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);const counts=countJson?JSON.parse(countJson):{};counts[today]=(counts[today]||0)+1;const sevenDaysAgo=new Date();sevenDaysAgo.setDate(sevenDaysAgo.getDate()-7);const cleanedCounts={};for(const[date,count]of Object.entries(counts)){if(new Date(date)>=sevenDaysAgo){cleanedCounts[date]=count;}}await AsyncStorage.setItem(TEMP_BETS_COUNT_KEY,JSON.stringify(cleanedCounts));}catch(error){console.error('Error incrementing daily temperature bet count:',error);}};const incrementWindBetCount=async()=>{try{await checkAndResetWindBetCount();const countJson=await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);const countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};countData.count+=1;await AsyncStorage.setItem(WIND_BETS_COUNT_KEY,JSON.stringify(countData));}catch(error){console.error('Error incrementing wind bet count:',error);}};const checkAndResetWindBetCount=async()=>{try{const countJson=await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);if(!countJson)return;const countData=JSON.parse(countJson);const lastTimestamp=new Date(countData.timestamp);const now=new Date();const hoursDiff=(now.getTime()-lastTimestamp.getTime())/(1000*60*60);if(hoursDiff>=12){await AsyncStorage.setItem(WIND_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:now.toISOString()}));}}catch(error){console.error('Error checking and resetting wind bet count:',error);}};const incrementRainBetCount=async()=>{try{await checkAndResetRainBetCount();const countJson=await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);const countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};countData.count+=1;console.log('Incrementing rain bet count to:',countData.count);await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY,JSON.stringify(countData));}catch(error){console.error('Error incrementing rain bet count:',error);}};const checkAndResetRainBetCount=async()=>{try{const countJson=await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);if(!countJson)return;const countData=JSON.parse(countJson);const lastTimestamp=new Date(countData.timestamp);const now=new Date();const lastDate=lastTimestamp.toISOString().split('T')[0];const currentDate=now.toISOString().split('T')[0];if(lastDate!==currentDate){console.log('Resetting rain bet count - new day');await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:now.toISOString()}));}}catch(error){console.error('Error checking and resetting rain bet count:',error);}};const lockBetting=async()=>{try{await AsyncStorage.setItem(BET_LOCK_KEY,'locked');await AsyncStorage.setItem('bet_lock_timestamp',new Date().toISOString());}catch(error){console.error('Error locking betting:',error);}};const unlockBetting=async()=>{try{await AsyncStorage.removeItem(BET_LOCK_KEY);await AsyncStorage.removeItem('bet_lock_timestamp');}catch(error){console.error('Error unlocking betting:',error);}};const isBetLocked=async()=>{try{const lockStatus=await AsyncStorage.getItem(BET_LOCK_KEY);return lockStatus==='locked';}catch(error){console.error('Error checking bet lock status:',error);return false;}};export const resetAllBetCounters=async()=>{try{console.log('Resetting all bet counters');const today=new Date().toISOString().split('T')[0];const tempCounts={[today]:0};await AsyncStorage.setItem(TEMP_BETS_COUNT_KEY,JSON.stringify(tempCounts));await AsyncStorage.setItem(WIND_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:new Date().toISOString()}));await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:new Date().toISOString()}));await unlockBetting();console.log('All bet counters have been reset');}catch(error){console.error('Error resetting bet counters:',error);}};export const getOdds=getRainOdds;export const getTemperatureOddsWrapper=(temp,isMin)=>{return getTemperatureOdds(temp);};export{getWindOdds};","map":{"version":3,"names":["AsyncStorage","fetchCurrentRainData","fetchCurrentTemperatureData","fetchCurrentWindData","getRainOdds","getTemperatureOdds","getWindOdds","LOCAL_BETS_STORAGE_KEY","TEMP_BETS_COUNT_KEY","WIND_BETS_TIMESTAMP_KEY","WIND_BETS_COUNT_KEY","RAIN_BETS_COUNT_KEY","LAST_BET_TIMESTAMP_KEY","BET_LOCK_KEY","addBet","bet","isBetLocked","console","log","lockTimestamp","getItem","lockTime","Date","getTime","now","unlockBetting","Error","lockBetting","isTemperatureBet","option","isWindBet","isRainBet","remainingBets","getRemainingTemperatureBets","user_id","remainingWindBets","getRemainingWindBets","calculatedLeverage","value","betData","Object","assign","id","Math","random","toString","substring","date","toISOString","split","coins","leverage","timestamp","result","won","city","mode","rain_mm","resolution_date","betTime","resolutionTime","setHours","getHours","status","verificationTime","resolutionHours","bet_resolution_hours","verified","bet_type","getBetTypeFromOption","temp_min_c","temp_max_c","wind_kmh_max","margin","getMarginFromLeverage","range_min","max","range_max","min","existingBetsJson","existingBets","JSON","parse","updatedBets","setItem","stringify","incrementDailyTemperatureBetCount","incrementWindBetCount","incrementRainBetCount","setTimeout","error","getBets","userId","betsJson","allBets","userBets","filter","sort","a","b","updateBetResult","betResult","bets","betIndex","findIndex","betId","evaluatePendingBets","betsToResolve","length","currentRainAmount","currentTemperature","currentWind","results","resolution_explanation","current","betValue","abs","temperature_c","push","isBettingAllowed","betType","getRemainingRainBets","isTemperatureBettingAllowed","count","getDailyTemperatureBetCount","canPlaceWindBetNow","checkAndResetWindBetCount","countJson","countData","checkAndResetRainBetCount","getTimeUntilNextWindBet","lastResetTime","nextResetTime","ceil","resolveBets","yesterday","setDate","getDate","pendingBets","today","counts","sevenDaysAgo","cleanedCounts","entries","lastTimestamp","hoursDiff","lastDate","currentDate","removeItem","lockStatus","resetAllBetCounters","tempCounts","getOdds","getTemperatureOddsWrapper","temp","isMin"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/localSupabaseService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Bet, BetResult, BetStatus, BetOption } from '../types/weather';\nimport { fetchCurrentRainData, fetchCurrentTemperatureData, fetchCurrentWindData, isWithinBettingWindow, isWithinBettingWindowSync } from './weatherService';\nimport { getRainOdds, getTemperatureOdds, getWindOdds } from './oddsService';\n\n// Constants\nconst LOCAL_BETS_STORAGE_KEY = 'local_bets';\nconst TEMP_BETS_COUNT_KEY = 'daily_temp_bets';\nconst WIND_BETS_TIMESTAMP_KEY = 'last_wind_bet_timestamp';\nconst WIND_BETS_COUNT_KEY = 'wind_bets_count';\nconst RAIN_BETS_COUNT_KEY = 'rain_bets_count';\nconst LAST_BET_TIMESTAMP_KEY = 'last_bet_timestamp';\nconst BET_LOCK_KEY = 'bet_lock';\n\n// Function to add a new bet (replaces addBetToSupabase)\nexport const addBet = async (bet: Bet): Promise<Bet | null> => {\n  try {\n    // Prevent rapid consecutive bets (anti-spam protection)\n    if (await isBetLocked()) {\n      console.log('Bet is locked. Waiting for unlock...');\n      // Force unlock if it's been locked for more than 10 seconds\n      const lockTimestamp = await AsyncStorage.getItem('bet_lock_timestamp');\n      if (lockTimestamp) {\n        const lockTime = new Date(lockTimestamp).getTime();\n        const now = new Date().getTime();\n        if (now - lockTime > 10000) { // 10 seconds\n          console.log('Force unlocking bet after 10 seconds');\n          await unlockBetting();\n        } else {\n          throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');\n        }\n      } else {\n        throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');\n      }\n    }\n    \n    // Lock betting temporarily to prevent rapid consecutive bets\n    await lockBetting();\n    \n    // Check if betting is allowed based on bet type\n    const isTemperatureBet = bet.option === 'temperature' || bet.option === 'temp_min' || bet.option === 'temp_max';\n    const isWindBet = bet.option === 'wind_max';\n    const isRainBet = bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount';\n    \n    console.log('Bet type check:', { isTemperatureBet, isWindBet, isRainBet, option: bet.option });\n    \n    // For temperature bets, check daily limit\n    if (isTemperatureBet) {\n      const remainingBets = await getRemainingTemperatureBets(bet.user_id || 'anonymous');\n      if (remainingBets <= 0) {\n        // Unlock betting before throwing error\n        await unlockBetting();\n        throw new Error('Has alcanzado el límite de 2 apuestas de temperatura para hoy');\n      }\n    }\n    \n    // For wind bets, check 12-hour limit\n    if (isWindBet) {\n      const remainingWindBets = await getRemainingWindBets();\n      if (remainingWindBets <= 0) {\n        // Unlock betting before throwing error\n        await unlockBetting();\n        throw new Error('Has alcanzado el límite de 2 apuestas de viento cada 12 horas');\n      }\n    }\n    \n    // Calculate appropriate odds based on bet type and value\n    let calculatedLeverage = 1;\n    if (isRainBet && bet.option === 'rain_amount' && bet.value !== null) {\n      calculatedLeverage = getRainOdds(bet.value);\n    } else if (isTemperatureBet && bet.value !== null) {\n      calculatedLeverage = getTemperatureOdds(bet.value);\n    } else if (isWindBet && bet.value !== null) {\n      calculatedLeverage = getWindOdds(bet.value);\n    } else if (bet.option === 'rain_yes') {\n      calculatedLeverage = 3.0; // Fixed odds for \"will rain\" bets\n    } else if (bet.option === 'rain_no') {\n      calculatedLeverage = 1.2; // Fixed odds for \"won't rain\" bets\n    }\n    \n    // Prepare the bet data\n    const betData: Bet = {\n      ...bet,\n      id: `bet_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n      date: bet.date || new Date().toISOString().split('T')[0],\n      option: bet.option,\n      value: bet.value,\n      coins: bet.coins,\n      leverage: calculatedLeverage, // Use calculated odds\n      timestamp: bet.timestamp || new Date().toISOString(),\n      result: bet.result || null,\n      won: bet.won || null,\n      city: bet.city || 'Málaga',\n      mode: bet.mode || 'Simple',\n      rain_mm: bet.rain_mm || null,\n      resolution_date: bet.resolution_date || (() => {\n        // If no resolution date, set to 24h after the bet timestamp\n        const betTime = new Date(bet.timestamp || new Date().toISOString());\n        const resolutionTime = new Date(betTime);\n        \n        // Set resolution time based on bet type\n        if (bet.option === 'wind_max') {\n          resolutionTime.setHours(resolutionTime.getHours() + 12);\n        } else {\n          resolutionTime.setHours(resolutionTime.getHours() + 24);\n        }\n        \n        return resolutionTime.toISOString().split('T')[0];\n      })(),\n      user_id: bet.user_id || 'anonymous',\n      status: bet.status || 'pending',\n      verificationTime: (() => {\n        // Create verification time (24 hours from now by default, 12 hours for temperature and wind bets)\n        const now = new Date();\n        const verificationTime = new Date(now);\n        \n        // Set verification time based on bet type\n        const isTemperatureBet = bet.option === 'temperature' || bet.option === 'temp_min' || bet.option === 'temp_max';\n        const isWindBet = bet.option === 'wind_max';\n        const resolutionHours = isTemperatureBet || isWindBet || bet.bet_resolution_hours === 12 ? 12 : 24;\n        \n        verificationTime.setHours(verificationTime.getHours() + resolutionHours);\n        return verificationTime.toISOString();\n      })(),\n      verified: false\n    };\n\n    // Set bet type\n    betData.bet_type = getBetTypeFromOption(bet.option);\n    \n    // Set temperature values if applicable\n    if (bet.option === 'temp_min') {\n      betData.temp_min_c = bet.value;\n    } else if (bet.option === 'temp_max') {\n      betData.temp_max_c = bet.value;\n    } else if (bet.option === 'wind_max') {\n      betData.wind_kmh_max = bet.value;\n    }\n    \n    // Set range values for Pro mode\n    if (bet.mode === 'Pro' && bet.value !== null) {\n      const margin = getMarginFromLeverage(bet.leverage);\n      betData.range_min = Math.max(-50, bet.value - margin);\n      betData.range_max = Math.min(999, bet.value + margin);\n    }\n\n    // Get existing bets\n    const existingBetsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const existingBets: Bet[] = existingBetsJson ? JSON.parse(existingBetsJson) : [];\n    \n    // Add new bet\n    const updatedBets = [...existingBets, betData];\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(updatedBets));\n\n    // If it's a temperature bet, update the daily count\n    if (bet.option === 'temp_min' || bet.option === 'temp_max') {\n      await incrementDailyTemperatureBetCount();\n    }\n    \n    // If it's a wind bet, update the count\n    if (bet.option === 'wind_max') {\n      await incrementWindBetCount();\n    }\n    \n    // If it's a rain bet, update the count\n    if (bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') {\n      await incrementRainBetCount();\n    }\n    \n    // Store last bet timestamp for rate limiting\n    await AsyncStorage.setItem(LAST_BET_TIMESTAMP_KEY, new Date().toISOString());\n    \n    // Unlock betting after successful bet\n    setTimeout(async () => {\n      await unlockBetting();\n    }, 2000);\n\n    return betData;\n  } catch (error) {\n    console.error('Error in addBet:', error);\n    // Make sure to unlock betting in case of error\n    await unlockBetting();\n    throw error;\n  }\n};\n\n// Function to get all bets (replaces getBetsFromSupabase)\nexport const getBets = async (userId: string = 'anonymous'): Promise<Bet[]> => {\n  try {\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const allBets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Filter by user ID\n    const userBets = allBets.filter(bet => bet.user_id === userId);\n    \n    // Sort by timestamp (newest first)\n    return userBets.sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n  } catch (error) {\n    console.error('Error in getBets:', error);\n    return [];\n  }\n};\n\n// Function to update bet result (replaces updateBetResultInSupabase)\nexport const updateBetResult = async (betResult: BetResult): Promise<boolean> => {\n  try {\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Find the bet to update\n    const betIndex = bets.findIndex(bet => bet.id === betResult.betId);\n    \n    if (betIndex === -1) {\n      return false;\n    }\n    \n    // Update the bet\n    bets[betIndex] = {\n      ...bets[betIndex],\n      result: betResult.result,\n      won: betResult.won,\n      status: betResult.won ? 'ganada' : 'perdida',\n      verified: true\n    };\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(bets));\n    \n    return true;\n  } catch (error) {\n    console.error('Error in updateBetResult:', error);\n    return false;\n  }\n};\n\n// Function to evaluate pending bets (replaces evaluatePendingBets)\nexport const evaluatePendingBets = async (userId: string = 'anonymous'): Promise<BetResult[]> => {\n  try {\n    // Get current date and time\n    const now = new Date();\n    \n    // Get all bets\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Filter pending bets for the user that should be resolved now\n    const betsToResolve = bets.filter(bet => \n      bet.status === 'pending' && \n      bet.user_id === userId && \n      !bet.verified && \n      new Date(bet.verificationTime) <= now\n    );\n    \n    if (betsToResolve.length === 0) {\n      return [];\n    }\n    \n    // Get current weather data\n    const currentRainAmount = await fetchCurrentRainData();\n    const currentTemperature = await fetchCurrentTemperatureData();\n    const currentWind = await fetchCurrentWindData();\n    \n    // Evaluate each bet\n    const results: BetResult[] = [];\n    const updatedBets = [...bets];\n    \n    for (const bet of betsToResolve) {\n      let result = 0;\n      let won = false;\n      let margin = 0;\n      let resolution_explanation = '';\n      \n      // Determine the actual result based on bet type\n      if (bet.bet_type === 'rain' || bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') {\n        result = currentRainAmount;\n      } else if (bet.bet_type === 'temp_min' || bet.option === 'temp_min') {\n        result = currentTemperature.min;\n      } else if (bet.bet_type === 'temp_max' || bet.option === 'temp_max') {\n        result = currentTemperature.max;\n      } else if (bet.option === 'temperature') {\n        result = currentTemperature.current;\n      } else if (bet.option === 'wind_max') {\n        result = currentWind.max;\n      }\n      \n      // Determine if bet is won based on bet type and mode\n      if (bet.mode === 'Simple') {\n        // Simple mode: exact match\n        if (bet.option === 'rain_yes') {\n          won = result > 0;\n          if (won) {\n            resolution_explanation = `¡Ganaste! Predijiste correctamente que llovería. La cantidad de lluvia registrada fue de ${result} mm.`;\n          } else {\n            resolution_explanation = `Perdiste. Predijiste que llovería, pero no se registró lluvia (0 mm).`;\n          }\n        } else if (bet.option === 'rain_no') {\n          won = result === 0;\n          if (won) {\n            resolution_explanation = `¡Ganaste! Predijiste correctamente que no llovería. No se registró lluvia (0 mm).`;\n          } else {\n            resolution_explanation = `Perdiste. Predijiste que no llovería, pero se registraron ${result} mm de lluvia.`;\n          }\n        } else if (bet.option === 'rain_amount') {\n          const betValue = bet.rain_mm !== null ? bet.rain_mm : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 0.5; // Win if within ±0.5mm\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de ${betValue} mm de lluvia estaba dentro del margen de ±0.5 mm del valor real (${result} mm).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de ${betValue} mm de lluvia difería más de ±0.5 mm del valor real (${result} mm).`;\n          }\n        } else if (bet.option === 'temp_min') {\n          const betValue = bet.temp_min_c !== null ? bet.temp_min_c : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de temperatura mínima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de temperatura mínima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n          }\n        } else if (bet.option === 'temp_max') {\n          const betValue = bet.temp_max_c !== null ? bet.temp_max_c : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de temperatura máxima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de temperatura máxima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n          }\n        } else if (bet.option === 'temperature') {\n          const betValue = bet.temperature_c !== null ? bet.temperature_c : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de temperatura actual de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de temperatura actual de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n          }\n        } else if (bet.option === 'wind_max') {\n          const betValue = bet.wind_kmh_max !== null ? bet.wind_kmh_max : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 3.0; // Win if within ±3.0 km/h\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de velocidad máxima del viento de ${betValue} km/h estaba dentro del margen de ±3.0 km/h del valor real (${result} km/h).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de velocidad máxima del viento de ${betValue} km/h difería más de ±3.0 km/h del valor real (${result} km/h).`;\n          }\n        }\n      } else if (bet.mode === 'Pro') {\n        // Pro mode: within margin based on leverage\n        margin = getMarginFromLeverage(bet.leverage);\n        \n        // Check if result is within range\n        if (bet.range_min !== null && bet.range_max !== null) {\n          won = result >= bet.range_min && result <= bet.range_max;\n          if (won) {\n            resolution_explanation = `¡Ganaste! El valor real (${result}) estaba dentro del rango que predijiste (${bet.range_min} - ${bet.range_max}).`;\n          } else {\n            resolution_explanation = `Perdiste. El valor real (${result}) estaba fuera del rango que predijiste (${bet.range_min} - ${bet.range_max}).`;\n          }\n        } else {\n          // Fallback to checking if the value is within margin of the target\n          let betValue = null;\n          \n          if (bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') {\n            betValue = bet.rain_mm !== null ? bet.rain_mm : bet.value;\n          } else if (bet.option === 'temp_min') {\n            betValue = bet.temp_min_c !== null ? bet.temp_min_c : bet.value;\n          } else if (bet.option === 'temp_max') {\n            betValue = bet.temp_max_c !== null ? bet.temp_max_c : bet.value;\n          } else if (bet.option === 'temperature') {\n            betValue = bet.temperature_c !== null ? bet.temperature_c : bet.value;\n          } else if (bet.option === 'wind_max') {\n            betValue = bet.wind_kmh_max !== null ? bet.wind_kmh_max : bet.value;\n          }\n          \n          if (betValue !== null) {\n            won = Math.abs(result - betValue) <= margin;\n            if (won) {\n              resolution_explanation = `¡Ganaste! Tu predicción de ${betValue} estaba dentro del margen de ±${margin} del valor real (${result}).`;\n            } else {\n              resolution_explanation = `Perdiste. Tu predicción de ${betValue} difería más de ±${margin} del valor real (${result}).`;\n            }\n          }\n        }\n      }\n      \n      // Find the bet in the array and update it\n      const betIndex = updatedBets.findIndex(b => b.id === bet.id);\n      if (betIndex !== -1) {\n        updatedBets[betIndex] = {\n          ...updatedBets[betIndex],\n          result,\n          won,\n          verified: true,\n          status: won ? 'ganada' : 'perdida',\n          resolution_explanation\n        };\n      }\n      \n      // Add to results\n      results.push({\n        betId: bet.id,\n        result,\n        won,\n        margin\n      });\n    }\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(updatedBets));\n    \n    return results;\n  } catch (error) {\n    console.error('Error in evaluatePendingBets:', error);\n    return [];\n  }\n};\n\n// Function to check if betting is allowed\nexport const isBettingAllowed = async (betType?: string): Promise<boolean> => {\n  try {\n    // Check if betting is locked (anti-spam protection)\n    if (await isBetLocked()) {\n      console.log('Betting is locked (anti-spam protection)');\n      return false;\n    }\n    \n    // Temperature bets are allowed at any time\n    if (betType === 'temperature' || betType === 'temp_min' || betType === 'temp_max') {\n      console.log('Temperature betting is always allowed');\n      return true;\n    }\n    \n    // Wind bets are allowed at any time but limited to twice per 12 hours\n    if (betType === 'wind') {\n      const remainingWindBets = await getRemainingWindBets();\n      console.log('Wind betting check:', remainingWindBets > 0);\n      return remainingWindBets > 0;\n    }\n    \n    // Rain bets are allowed at any time but limited to 3 bets per window\n    if (betType === 'rain' || betType === 'rain_yes' || betType === 'rain_no' || betType === 'rain_amount') {\n      const remainingBets = await getRemainingRainBets();\n      console.log('Rain betting allowed check in isBettingAllowed:', true, 'Remaining bets:', remainingBets);\n      return remainingBets > 0;\n    }\n    \n    // All other bet types are allowed\n    console.log('General betting allowed check in isBettingAllowed:', true, 'Bet type:', betType);\n    return true;\n  } catch (error) {\n    console.error('Error checking if betting is allowed:', error);\n    return false;\n  }\n};\n\n// Function to check if temperature betting is allowed (max 2 per day)\nexport const isTemperatureBettingAllowed = async (userId: string = 'anonymous'): Promise<boolean> => {\n  try {\n    // Check if betting is locked (anti-spam protection)\n    if (await isBetLocked()) {\n      return false;\n    }\n    \n    const count = await getDailyTemperatureBetCount();\n    return count < 2;\n  } catch (error) {\n    console.error('Error in isTemperatureBettingAllowed:', error);\n    return false;\n  }\n};\n\n// Function to get remaining temperature bets for today\nexport const getRemainingTemperatureBets = async (userId: string = 'anonymous'): Promise<number> => {\n  try {\n    const count = await getDailyTemperatureBetCount();\n    return Math.max(0, 2 - count);\n  } catch (error) {\n    console.error('Error in getRemainingTemperatureBets:', error);\n    return 0;\n  }\n};\n\n// Function to check if wind betting is allowed (twice per 12 hours)\nexport const canPlaceWindBetNow = async (): Promise<boolean> => {\n  try {\n    return await getRemainingWindBets() > 0;\n  } catch (error) {\n    console.error('Error checking wind bet availability:', error);\n    return false;\n  }\n};\n\n// Function to get remaining wind bets\nexport const getRemainingWindBets = async (): Promise<number> => {\n  try {\n    // Check if we need to reset the wind bet count\n    await checkAndResetWindBetCount();\n    \n    // Get current wind bet count\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    // Maximum 2 wind bets per 12 hours\n    return Math.max(0, 2 - countData.count);\n  } catch (error) {\n    console.error('Error getting remaining wind bets:', error);\n    return 0;\n  }\n};\n\n// Function to get remaining rain bets\nexport const getRemainingRainBets = async (): Promise<number> => {\n  try {\n    // Check if we need to reset the rain bet count\n    await checkAndResetRainBetCount();\n    \n    // Get current rain bet count\n    const countJson = await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    console.log('Current rain bet count data:', countData);\n    \n    // Maximum 3 rain bets per window\n    return Math.max(0, 3 - countData.count);\n  } catch (error) {\n    console.error('Error getting remaining rain bets:', error);\n    return 0;\n  }\n};\n\n// Function to get time until next wind bet is allowed\nexport const getTimeUntilNextWindBet = async (): Promise<number> => {\n  try {\n    // If there are remaining bets, return 0\n    const remainingBets = await getRemainingWindBets();\n    if (remainingBets > 0) {\n      return 0;\n    }\n    \n    // Get the timestamp of the last wind bet count reset\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    if (!countJson) {\n      return 0;\n    }\n    \n    const countData = JSON.parse(countJson);\n    const lastResetTime = new Date(countData.timestamp);\n    const nextResetTime = new Date(lastResetTime);\n    nextResetTime.setHours(nextResetTime.getHours() + 12);\n    \n    const now = new Date();\n    if (nextResetTime <= now) {\n      return 0;\n    }\n    \n    // Return minutes until next reset\n    return Math.ceil((nextResetTime.getTime() - now.getTime()) / (1000 * 60));\n  } catch (error) {\n    console.error('Error calculating time until next wind bet:', error);\n    return 0;\n  }\n};\n\n// Helper function to get bet type from option\nconst getBetTypeFromOption = (option: BetOption): string => {\n  if (option === 'rain_yes' || option === 'rain_no' || option === 'rain_amount') {\n    return 'rain';\n  } else if (option === 'temp_min') {\n    return 'temp_min';\n  } else if (option === 'temp_max') {\n    return 'temp_max';\n  } else if (option === 'temperature') {\n    return 'temperature';\n  } else if (option === 'wind_max') {\n    return 'wind';\n  } else {\n    return 'rain'; // Default\n  }\n};\n\n// Helper function to get margin from leverage\nconst getMarginFromLeverage = (leverage: number): number => {\n  switch (leverage) {\n    case 2: return 5;\n    case 5: return 4;\n    case 10: return 3;\n    case 20: return 2;\n    case 50: return 1;\n    case 100: return 0;\n    default: return 5;\n  }\n};\n\n// Function to resolve bets\nexport const resolveBets = async (): Promise<void> => {\n  try {\n    const now = new Date();\n    const yesterday = new Date(now);\n    yesterday.setDate(yesterday.getDate() - 1);\n    \n    // Get all bets\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Filter pending bets with resolution dates in the past\n    const pendingBets = bets.filter(bet => \n      bet.status === 'pending' && \n      !bet.verified &&\n      new Date(bet.verificationTime) <= now\n    );\n    \n    if (pendingBets.length === 0) {\n      return;\n    }\n    \n    // Get current weather data\n    const currentRainAmount = await fetchCurrentRainData();\n    const currentTemperature = await fetchCurrentTemperatureData();\n    const currentWind = await fetchCurrentWindData();\n    \n    // Process each bet\n    const updatedBets = [...bets];\n    \n    for (const bet of pendingBets) {\n      // Determine if bet is won\n      let won = false;\n      let result = 0;\n      let resolution_explanation = '';\n      \n      if (bet.option === 'rain_amount') {\n        result = currentRainAmount;\n        const betValue = bet.rain_mm !== null ? bet.rain_mm : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 0.5; // Win if within ±0.5mm\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de ${betValue} mm de lluvia estaba dentro del margen de ±0.5 mm del valor real (${result} mm).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de ${betValue} mm de lluvia difería más de ±0.5 mm del valor real (${result} mm).`;\n        }\n      } else if (bet.option === 'rain_yes') {\n        result = currentRainAmount;\n        won = result > 0;\n        if (won) {\n          resolution_explanation = `¡Ganaste! Predijiste correctamente que llovería. La cantidad de lluvia registrada fue de ${result} mm.`;\n        } else {\n          resolution_explanation = `Perdiste. Predijiste que llovería, pero no se registró lluvia (0 mm).`;\n        }\n      } else if (bet.option === 'rain_no') {\n        result = currentRainAmount;\n        won = result === 0;\n        if (won) {\n          resolution_explanation = `¡Ganaste! Predijiste correctamente que no llovería. No se registró lluvia (0 mm).`;\n        } else {\n          resolution_explanation = `Perdiste. Predijiste que no llovería, pero se registraron ${result} mm de lluvia.`;\n        }\n      } else if (bet.option === 'temp_min') {\n        result = currentTemperature.min;\n        const betValue = bet.temp_min_c !== null ? bet.temp_min_c : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de temperatura mínima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de temperatura mínima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n        }\n      } else if (bet.option === 'temp_max') {\n        result = currentTemperature.max;\n        const betValue = bet.temp_max_c !== null ? bet.temp_max_c : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de temperatura máxima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de temperatura máxima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n        }\n      } else if (bet.option === 'temperature') {\n        result = currentTemperature.current;\n        const betValue = bet.temperature_c !== null ? bet.temperature_c : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de temperatura actual de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de temperatura actual de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n        }\n      } else if (bet.option === 'wind_max') {\n        result = currentWind.max;\n        const betValue = bet.wind_kmh_max !== null ? bet.wind_kmh_max : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 3.0; // Win if within ±3.0 km/h\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de velocidad máxima del viento de ${betValue} km/h estaba dentro del margen de ±3.0 km/h del valor real (${result} km/h).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de velocidad máxima del viento de ${betValue} km/h difería más de ±3.0 km/h del valor real (${result} km/h).`;\n        }\n      }\n      \n      // Find the bet in the array and update it\n      const betIndex = updatedBets.findIndex(b => b.id === bet.id);\n      if (betIndex !== -1) {\n        updatedBets[betIndex] = {\n          ...updatedBets[betIndex],\n          result,\n          won,\n          verified: true,\n          status: won ? 'ganada' : 'perdida',\n          resolution_explanation\n        };\n      }\n    }\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(updatedBets));\n  } catch (error) {\n    console.error('Error resolving bets:', error);\n  }\n};\n\n// Helper functions for daily temperature bet count\nconst getDailyTemperatureBetCount = async (): Promise<number> => {\n  try {\n    const today = new Date().toISOString().split('T')[0];\n    const countJson = await AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);\n    const counts = countJson ? JSON.parse(countJson) : {};\n    \n    return counts[today] || 0;\n  } catch (error) {\n    console.error('Error getting daily temperature bet count:', error);\n    return 0;\n  }\n};\n\nconst incrementDailyTemperatureBetCount = async (): Promise<void> => {\n  try {\n    const today = new Date().toISOString().split('T')[0];\n    const countJson = await AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);\n    const counts = countJson ? JSON.parse(countJson) : {};\n    \n    counts[today] = (counts[today] || 0) + 1;\n    \n    // Clean up old entries (keep only last 7 days)\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n    \n    const cleanedCounts = {};\n    for (const [date, count] of Object.entries(counts)) {\n      if (new Date(date) >= sevenDaysAgo) {\n        cleanedCounts[date] = count;\n      }\n    }\n    \n    await AsyncStorage.setItem(TEMP_BETS_COUNT_KEY, JSON.stringify(cleanedCounts));\n  } catch (error) {\n    console.error('Error incrementing daily temperature bet count:', error);\n  }\n};\n\n// Helper functions for wind bet count\nconst incrementWindBetCount = async (): Promise<void> => {\n  try {\n    // Check if we need to reset the count first\n    await checkAndResetWindBetCount();\n    \n    // Get current count\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    // Increment count\n    countData.count += 1;\n    \n    // Save updated count\n    await AsyncStorage.setItem(WIND_BETS_COUNT_KEY, JSON.stringify(countData));\n  } catch (error) {\n    console.error('Error incrementing wind bet count:', error);\n  }\n};\n\nconst checkAndResetWindBetCount = async (): Promise<void> => {\n  try {\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    if (!countJson) return;\n    \n    const countData = JSON.parse(countJson);\n    const lastTimestamp = new Date(countData.timestamp);\n    const now = new Date();\n    \n    // Calculate hours difference\n    const hoursDiff = (now.getTime() - lastTimestamp.getTime()) / (1000 * 60 * 60);\n    \n    // Reset if 12 hours have passed\n    if (hoursDiff >= 12) {\n      await AsyncStorage.setItem(WIND_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: now.toISOString() }));\n    }\n  } catch (error) {\n    console.error('Error checking and resetting wind bet count:', error);\n  }\n};\n\n// Helper functions for rain bet count\nconst incrementRainBetCount = async (): Promise<void> => {\n  try {\n    // Check if we need to reset the count first\n    await checkAndResetRainBetCount();\n    \n    // Get current count\n    const countJson = await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    // Increment count\n    countData.count += 1;\n    \n    console.log('Incrementing rain bet count to:', countData.count);\n    \n    // Save updated count\n    await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY, JSON.stringify(countData));\n  } catch (error) {\n    console.error('Error incrementing rain bet count:', error);\n  }\n};\n\nconst checkAndResetRainBetCount = async (): Promise<void> => {\n  try {\n    const countJson = await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);\n    if (!countJson) return;\n    \n    const countData = JSON.parse(countJson);\n    const lastTimestamp = new Date(countData.timestamp);\n    const now = new Date();\n    \n    // Check if we're in a new betting window\n    const lastDate = lastTimestamp.toISOString().split('T')[0];\n    const currentDate = now.toISOString().split('T')[0];\n    \n    // Reset if date has changed\n    if (lastDate !== currentDate) {\n      console.log('Resetting rain bet count - new day');\n      await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: now.toISOString() }));\n    }\n  } catch (error) {\n    console.error('Error checking and resetting rain bet count:', error);\n  }\n};\n\n// Anti-spam protection functions\nconst lockBetting = async (): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(BET_LOCK_KEY, 'locked');\n    await AsyncStorage.setItem('bet_lock_timestamp', new Date().toISOString());\n  } catch (error) {\n    console.error('Error locking betting:', error);\n  }\n};\n\nconst unlockBetting = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem(BET_LOCK_KEY);\n    await AsyncStorage.removeItem('bet_lock_timestamp');\n  } catch (error) {\n    console.error('Error unlocking betting:', error);\n  }\n};\n\nconst isBetLocked = async (): Promise<boolean> => {\n  try {\n    const lockStatus = await AsyncStorage.getItem(BET_LOCK_KEY);\n    return lockStatus === 'locked';\n  } catch (error) {\n    console.error('Error checking bet lock status:', error);\n    return false;\n  }\n};\n\n// New function to reset all bet counters (for debugging)\nexport const resetAllBetCounters = async (): Promise<void> => {\n  try {\n    console.log('Resetting all bet counters');\n    \n    // Reset temperature bet count\n    const today = new Date().toISOString().split('T')[0];\n    const tempCounts = { [today]: 0 };\n    await AsyncStorage.setItem(TEMP_BETS_COUNT_KEY, JSON.stringify(tempCounts));\n    \n    // Reset wind bet count\n    await AsyncStorage.setItem(WIND_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: new Date().toISOString() }));\n    \n    // Reset rain bet count\n    await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: new Date().toISOString() }));\n    \n    // Unlock betting\n    await unlockBetting();\n    \n    console.log('All bet counters have been reset');\n  } catch (error) {\n    console.error('Error resetting bet counters:', error);\n  }\n};\n\n// Export the old odds functions for backward compatibility\nexport const getOdds = getRainOdds;\nexport const getTemperatureOddsWrapper: any = (temp: number, isMin: boolean): number => {\n  return getTemperatureOdds(temp);\n};\n// Export the getWindOdds function directly to maintain compatibility\nexport { getWindOdds };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}