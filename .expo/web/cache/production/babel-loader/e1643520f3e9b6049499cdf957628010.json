{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{CodedError}from'expo-modules-core';import{CryptoEncoding}from\"./Crypto.types\";export default{get name(){return'ExpoCrypto';},digestStringAsync:function(){var _digestStringAsync=_asyncToGenerator(function*(algorithm,data,options){if(!crypto.subtle){throw new CodedError('ERR_CRYPTO_UNAVAILABLE','Access to the WebCrypto API is restricted to secure origins (https).');}var encoder=new TextEncoder();var buffer=encoder.encode(data);var hashedData=yield crypto.subtle.digest(algorithm,buffer);if(options.encoding===CryptoEncoding.HEX){return hexString(hashedData);}else if(options.encoding===CryptoEncoding.BASE64){return btoa(String.fromCharCode.apply(String,_toConsumableArray(new Uint8Array(hashedData))));}throw new CodedError('ERR_CRYPTO_DIGEST','Invalid encoding type provided.');});function digestStringAsync(_x,_x2,_x3){return _digestStringAsync.apply(this,arguments);}return digestStringAsync;}()};function hexString(buffer){var byteArray=new Uint8Array(buffer);var hexCodes=_toConsumableArray(byteArray).map(function(value){var hexCode=value.toString(16);var paddedHexCode=hexCode.padStart(2,'0');return paddedHexCode;});return hexCodes.join('');}","map":{"version":3,"names":["CodedError","CryptoEncoding","name","digestStringAsync","_digestStringAsync","_asyncToGenerator","algorithm","data","options","crypto","subtle","encoder","TextEncoder","buffer","encode","hashedData","digest","encoding","HEX","hexString","BASE64","btoa","String","fromCharCode","apply","_toConsumableArray","Uint8Array","_x","_x2","_x3","arguments","byteArray","hexCodes","map","value","hexCode","toString","paddedHexCode","padStart","join"],"sources":["../src/ExpoCrypto.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions } from './Crypto.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoCrypto';\n  },\n  async digestStringAsync(\n    algorithm: CryptoDigestAlgorithm,\n    data: string,\n    options: CryptoDigestOptions\n  ): Promise<string> {\n    if (!crypto.subtle) {\n      throw new CodedError(\n        'ERR_CRYPTO_UNAVAILABLE',\n        'Access to the WebCrypto API is restricted to secure origins (https).'\n      );\n    }\n    const encoder = new TextEncoder();\n    const buffer = encoder.encode(data);\n    const hashedData = await crypto.subtle.digest(algorithm, buffer);\n    if (options.encoding === CryptoEncoding.HEX) {\n      return hexString(hashedData);\n    } else if (options.encoding === CryptoEncoding.BASE64) {\n      return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n    }\n    throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n  },\n};\n\nfunction hexString(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n\n  const hexCodes = [...byteArray].map((value) => {\n    const hexCode = value.toString(16);\n    const paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}\n"],"mappings":"gJAAA,OAASA,UAAU,KAAQ,mBAAmB,CAE9C,OAAgCC,cAAc,sBAE9C,cAAe,CACb,GAAI,CAAAC,IAAIA,CAAA,EACN,MAAO,YAAY,CACrB,CAAC,CACKC,iBAAiB,gBAAAC,kBAAA,CAAAC,iBAAA,WACrBC,SAAgC,CAChCC,IAAY,CACZC,OAA4B,EAE5B,GAAI,CAACC,MAAM,CAACC,MAAM,CAAE,CAClB,KAAM,IAAI,CAAAV,UAAU,CAClB,wBAAwB,CACxB,sEAAsE,CACvE,C,CAEH,GAAM,CAAAW,OAAO,CAAG,GAAI,CAAAC,WAAW,EAAE,CACjC,GAAM,CAAAC,MAAM,CAAGF,OAAO,CAACG,MAAM,CAACP,IAAI,CAAC,CACnC,GAAM,CAAAQ,UAAU,MAAS,CAAAN,MAAM,CAACC,MAAM,CAACM,MAAM,CAACV,SAAS,CAAEO,MAAM,CAAC,CAChE,GAAIL,OAAO,CAACS,QAAQ,GAAKhB,cAAc,CAACiB,GAAG,CAAE,CAC3C,MAAO,CAAAC,SAAS,CAACJ,UAAU,CAAC,C,CAC7B,IAAM,IAAIP,OAAO,CAACS,QAAQ,GAAKhB,cAAc,CAACmB,MAAM,CAAE,CACrD,MAAO,CAAAC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAAC,KAAA,CAAnBF,MAAM,CAAAG,kBAAA,CAAiB,GAAI,CAAAC,UAAU,CAACX,UAAU,CAAC,EAAC,CAAC,C,CAEjE,KAAM,IAAI,CAAAf,UAAU,CAAC,mBAAmB,CAAE,iCAAiC,CAAC,CAC9E,CAAC,UApBK,CAAAG,iBAAiBA,CAAAwB,EAAA,CAAAC,GAAA,CAAAC,GAAA,SAAAzB,kBAAA,CAAAoB,KAAA,MAAAM,SAAA,SAAjB,CAAA3B,iBAAiB,I,CAqBxB,CAED,QAAS,CAAAgB,SAASA,CAACN,MAAmB,EACpC,GAAM,CAAAkB,SAAS,CAAG,GAAI,CAAAL,UAAU,CAACb,MAAM,CAAC,CAExC,GAAM,CAAAmB,QAAQ,CAAGP,kBAAA,CAAIM,SAAS,EAAEE,GAAG,CAAC,SAACC,KAAK,CAAI,CAC5C,GAAM,CAAAC,OAAO,CAAGD,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC,CAClC,GAAM,CAAAC,aAAa,CAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAC9C,MAAO,CAAAD,aAAa,CACtB,CAAC,CAAC,CAEF,MAAO,CAAAL,QAAQ,CAACO,IAAI,CAAC,EAAE,CAAC,CAC1B","ignoreList":[]},"metadata":{},"sourceType":"module"}