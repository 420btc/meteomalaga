{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import AsyncStorage from'@react-native-async-storage/async-storage';import{fetchCurrentRainData,fetchCurrentTemperatureData,fetchCurrentWindData}from\"./weatherService\";import{getRainOdds,getTemperatureOdds,getWindOdds}from\"./oddsService\";var LOCAL_BETS_STORAGE_KEY='local_bets';var TEMP_BETS_COUNT_KEY='daily_temp_bets';var WIND_BETS_TIMESTAMP_KEY='last_wind_bet_timestamp';var WIND_BETS_COUNT_KEY='wind_bets_count';var RAIN_BETS_COUNT_KEY='rain_bets_count';var LAST_BET_TIMESTAMP_KEY='last_bet_timestamp';var BET_LOCK_KEY='bet_lock';export var addBet=function(){var _ref=_asyncToGenerator(function*(bet){try{if(yield isBetLocked()){console.log('Bet is locked. Waiting for unlock...');var lockTimestamp=yield AsyncStorage.getItem('bet_lock_timestamp');if(lockTimestamp){var lockTime=new Date(lockTimestamp).getTime();var now=new Date().getTime();if(now-lockTime>10000){console.log('Force unlocking bet after 10 seconds');yield unlockBetting();}else{throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');}}else{throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');}}yield lockBetting();var isTemperatureBet=bet.option==='temperature'||bet.option==='temp_min'||bet.option==='temp_max';var isWindBet=bet.option==='wind_max';var isRainBet=bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount';console.log('Bet type check:',{isTemperatureBet:isTemperatureBet,isWindBet:isWindBet,isRainBet:isRainBet,option:bet.option});if(isTemperatureBet){var remainingBets=yield getRemainingTemperatureBets(bet.user_id||'anonymous');if(remainingBets<=0){yield unlockBetting();throw new Error('Has alcanzado el límite de 2 apuestas de temperatura para hoy');}}if(isWindBet){var remainingWindBets=yield getRemainingWindBets();if(remainingWindBets<=0){yield unlockBetting();throw new Error('Has alcanzado el límite de 2 apuestas de viento cada 12 horas');}}var calculatedLeverage=1;if(isRainBet&&bet.option==='rain_amount'&&bet.value!==null){calculatedLeverage=getRainOdds(bet.value);}else if(isTemperatureBet&&bet.value!==null){calculatedLeverage=getTemperatureOdds(bet.value);}else if(isWindBet&&bet.value!==null){calculatedLeverage=getWindOdds(bet.value);}else if(bet.option==='rain_yes'){calculatedLeverage=3.0;}else if(bet.option==='rain_no'){calculatedLeverage=1.2;}var betData=_objectSpread(_objectSpread({},bet),{},{id:\"bet_\"+Date.now()+\"_\"+Math.random().toString(36).substring(2,9),date:bet.date||new Date().toISOString().split('T')[0],option:bet.option,value:bet.value,coins:bet.coins,leverage:calculatedLeverage,timestamp:bet.timestamp||new Date().toISOString(),result:bet.result||null,won:bet.won||null,city:bet.city||'Málaga',mode:bet.mode||'Simple',rain_mm:bet.rain_mm||null,resolution_date:bet.resolution_date||function(){var betTime=new Date(bet.timestamp||new Date().toISOString());var resolutionTime=new Date(betTime);if(bet.option==='wind_max'){resolutionTime.setHours(resolutionTime.getHours()+12);}else{resolutionTime.setHours(resolutionTime.getHours()+24);}return resolutionTime.toISOString().split('T')[0];}(),user_id:bet.user_id||'anonymous',status:bet.status||'pending',verificationTime:function(){var now=new Date();var verificationTime=new Date(now);var isTemperatureBet=bet.option==='temperature'||bet.option==='temp_min'||bet.option==='temp_max';var isWindBet=bet.option==='wind_max';var resolutionHours=isTemperatureBet||isWindBet||bet.bet_resolution_hours===12?12:24;verificationTime.setHours(verificationTime.getHours()+resolutionHours);return verificationTime.toISOString();}(),verified:false});betData.bet_type=getBetTypeFromOption(bet.option);if(bet.option==='temp_min'){betData.temp_min_c=bet.value;}else if(bet.option==='temp_max'){betData.temp_max_c=bet.value;}else if(bet.option==='wind_max'){betData.wind_kmh_max=bet.value;}if(bet.mode==='Pro'&&bet.value!==null){var margin=getMarginFromLeverage(bet.leverage);betData.range_min=Math.max(-50,bet.value-margin);betData.range_max=Math.min(999,bet.value+margin);}var existingBetsJson=yield AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);var existingBets=existingBetsJson?JSON.parse(existingBetsJson):[];var updatedBets=[].concat(_toConsumableArray(existingBets),[betData]);yield AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(updatedBets));if(bet.option==='temp_min'||bet.option==='temp_max'){yield incrementDailyTemperatureBetCount();}if(bet.option==='wind_max'){yield incrementWindBetCount();}if(bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount'){yield incrementRainBetCount();}yield AsyncStorage.setItem(LAST_BET_TIMESTAMP_KEY,new Date().toISOString());setTimeout(_asyncToGenerator(function*(){yield unlockBetting();}),2000);return betData;}catch(error){console.error('Error in addBet:',error);yield unlockBetting();throw error;}});return function addBet(_x){return _ref.apply(this,arguments);};}();export var getBets=function(){var _ref3=_asyncToGenerator(function*(){var userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'anonymous';try{var betsJson=yield AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);var allBets=betsJson?JSON.parse(betsJson):[];var userBets=allBets.filter(function(bet){return bet.user_id===userId;});return userBets.sort(function(a,b){return new Date(b.timestamp).getTime()-new Date(a.timestamp).getTime();});}catch(error){console.error('Error in getBets:',error);return[];}});return function getBets(){return _ref3.apply(this,arguments);};}();export var updateBetResult=function(){var _ref4=_asyncToGenerator(function*(betResult){try{var betsJson=yield AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);var bets=betsJson?JSON.parse(betsJson):[];var betIndex=bets.findIndex(function(bet){return bet.id===betResult.betId;});if(betIndex===-1){return false;}bets[betIndex]=_objectSpread(_objectSpread({},bets[betIndex]),{},{result:betResult.result,won:betResult.won,status:betResult.won?'ganada':'perdida',verified:true});yield AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(bets));return true;}catch(error){console.error('Error in updateBetResult:',error);return false;}});return function updateBetResult(_x2){return _ref4.apply(this,arguments);};}();export var evaluatePendingBets=function(){var _ref5=_asyncToGenerator(function*(){var userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'anonymous';try{var now=new Date();var betsJson=yield AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);var bets=betsJson?JSON.parse(betsJson):[];var betsToResolve=bets.filter(function(bet){return bet.status==='pending'&&bet.user_id===userId&&!bet.verified&&new Date(bet.verificationTime)<=now;});if(betsToResolve.length===0){return[];}var currentRainAmount=yield fetchCurrentRainData();var currentTemperature=yield fetchCurrentTemperatureData();var currentWind=yield fetchCurrentWindData();var results=[];var updatedBets=_toConsumableArray(bets);var _loop=function*_loop(bet){var result=0;var won=false;var margin=0;var resolution_explanation='';if(bet.bet_type==='rain'||bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount'){result=currentRainAmount;}else if(bet.bet_type==='temp_min'||bet.option==='temp_min'){result=currentTemperature.min;}else if(bet.bet_type==='temp_max'||bet.option==='temp_max'){result=currentTemperature.max;}else if(bet.option==='temperature'){result=currentTemperature.current;}else if(bet.option==='wind_max'){result=currentWind.max;}if(bet.mode==='Simple'){if(bet.option==='rain_yes'){won=result>0;if(won){resolution_explanation=\"\\xA1Ganaste! Predijiste correctamente que llover\\xEDa. La cantidad de lluvia registrada fue de \"+result+\" mm.\";}else{resolution_explanation=\"Perdiste. Predijiste que llover\\xEDa, pero no se registr\\xF3 lluvia (0 mm).\";}}else if(bet.option==='rain_no'){won=result===0;if(won){resolution_explanation=\"\\xA1Ganaste! Predijiste correctamente que no llover\\xEDa. No se registr\\xF3 lluvia (0 mm).\";}else{resolution_explanation=\"Perdiste. Predijiste que no llover\\xEDa, pero se registraron \"+result+\" mm de lluvia.\";}}else if(bet.option==='rain_amount'){var betValue=bet.rain_mm!==null?bet.rain_mm:bet.value;won=Math.abs((betValue||0)-result)<=0.5;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de \"+betValue+\" mm de lluvia estaba dentro del margen de \\xB10.5 mm del valor real (\"+result+\" mm).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de \"+betValue+\" mm de lluvia difer\\xEDa m\\xE1s de \\xB10.5 mm del valor real (\"+result+\" mm).\";}}else if(bet.option==='temp_min'){var _betValue=bet.temp_min_c!==null?bet.temp_min_c:bet.value;won=Math.abs((_betValue||0)-result)<=1.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura m\\xEDnima de \"+_betValue+\"\\xB0C estaba dentro del margen de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura m\\xEDnima de \"+_betValue+\"\\xB0C difer\\xEDa m\\xE1s de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}}else if(bet.option==='temp_max'){var _betValue2=bet.temp_max_c!==null?bet.temp_max_c:bet.value;won=Math.abs((_betValue2||0)-result)<=1.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura m\\xE1xima de \"+_betValue2+\"\\xB0C estaba dentro del margen de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura m\\xE1xima de \"+_betValue2+\"\\xB0C difer\\xEDa m\\xE1s de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}}else if(bet.option==='temperature'){var _betValue3=bet.temperature_c!==null?bet.temperature_c:bet.value;won=Math.abs((_betValue3||0)-result)<=1.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura actual de \"+_betValue3+\"\\xB0C estaba dentro del margen de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura actual de \"+_betValue3+\"\\xB0C difer\\xEDa m\\xE1s de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}}else if(bet.option==='wind_max'){var _betValue4=bet.wind_kmh_max!==null?bet.wind_kmh_max:bet.value;won=Math.abs((_betValue4||0)-result)<=3.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de velocidad m\\xE1xima del viento de \"+_betValue4+\" km/h estaba dentro del margen de \\xB13.0 km/h del valor real (\"+result+\" km/h).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de velocidad m\\xE1xima del viento de \"+_betValue4+\" km/h difer\\xEDa m\\xE1s de \\xB13.0 km/h del valor real (\"+result+\" km/h).\";}}}else if(bet.mode==='Pro'){margin=getMarginFromLeverage(bet.leverage);if(bet.range_min!==null&&bet.range_max!==null){won=result>=bet.range_min&&result<=bet.range_max;if(won){resolution_explanation=\"\\xA1Ganaste! El valor real (\"+result+\") estaba dentro del rango que predijiste (\"+bet.range_min+\" - \"+bet.range_max+\").\";}else{resolution_explanation=\"Perdiste. El valor real (\"+result+\") estaba fuera del rango que predijiste (\"+bet.range_min+\" - \"+bet.range_max+\").\";}}else{var _betValue5=null;if(bet.option==='rain_yes'||bet.option==='rain_no'||bet.option==='rain_amount'){_betValue5=bet.rain_mm!==null?bet.rain_mm:bet.value;}else if(bet.option==='temp_min'){_betValue5=bet.temp_min_c!==null?bet.temp_min_c:bet.value;}else if(bet.option==='temp_max'){_betValue5=bet.temp_max_c!==null?bet.temp_max_c:bet.value;}else if(bet.option==='temperature'){_betValue5=bet.temperature_c!==null?bet.temperature_c:bet.value;}else if(bet.option==='wind_max'){_betValue5=bet.wind_kmh_max!==null?bet.wind_kmh_max:bet.value;}if(_betValue5!==null){won=Math.abs(result-_betValue5)<=margin;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de \"+_betValue5+\" estaba dentro del margen de \\xB1\"+margin+\" del valor real (\"+result+\").\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de \"+_betValue5+\" difer\\xEDa m\\xE1s de \\xB1\"+margin+\" del valor real (\"+result+\").\";}}}}var betIndex=updatedBets.findIndex(function(b){return b.id===bet.id;});if(betIndex!==-1){updatedBets[betIndex]=_objectSpread(_objectSpread({},updatedBets[betIndex]),{},{result:result,won:won,verified:true,status:won?'ganada':'perdida',resolution_explanation:resolution_explanation});}results.push({betId:bet.id,result:result,won:won,margin:margin});};for(var bet of betsToResolve){yield*_loop(bet);}yield AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(updatedBets));return results;}catch(error){console.error('Error in evaluatePendingBets:',error);return[];}});return function evaluatePendingBets(){return _ref5.apply(this,arguments);};}();export var isBettingAllowed=function(){var _ref6=_asyncToGenerator(function*(betType){try{if(yield isBetLocked()){console.log('Betting is locked (anti-spam protection)');return false;}if(betType==='temperature'||betType==='temp_min'||betType==='temp_max'){console.log('Temperature betting is always allowed');return true;}if(betType==='wind'){var remainingWindBets=yield getRemainingWindBets();console.log('Wind betting check:',remainingWindBets>0);return remainingWindBets>0;}if(betType==='rain'||betType==='rain_yes'||betType==='rain_no'||betType==='rain_amount'){var remainingBets=yield getRemainingRainBets();console.log('Rain betting allowed check in isBettingAllowed:',true,'Remaining bets:',remainingBets);return remainingBets>0;}console.log('General betting allowed check in isBettingAllowed:',true,'Bet type:',betType);return true;}catch(error){console.error('Error checking if betting is allowed:',error);return false;}});return function isBettingAllowed(_x3){return _ref6.apply(this,arguments);};}();export var isTemperatureBettingAllowed=function(){var _ref7=_asyncToGenerator(function*(){var userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'anonymous';try{if(yield isBetLocked()){return false;}var count=yield getDailyTemperatureBetCount();return count<2;}catch(error){console.error('Error in isTemperatureBettingAllowed:',error);return false;}});return function isTemperatureBettingAllowed(){return _ref7.apply(this,arguments);};}();export var getRemainingTemperatureBets=function(){var _ref8=_asyncToGenerator(function*(){var userId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'anonymous';try{var count=yield getDailyTemperatureBetCount();return Math.max(0,2-count);}catch(error){console.error('Error in getRemainingTemperatureBets:',error);return 0;}});return function getRemainingTemperatureBets(){return _ref8.apply(this,arguments);};}();export var canPlaceWindBetNow=function(){var _ref9=_asyncToGenerator(function*(){try{return(yield getRemainingWindBets())>0;}catch(error){console.error('Error checking wind bet availability:',error);return false;}});return function canPlaceWindBetNow(){return _ref9.apply(this,arguments);};}();export var getRemainingWindBets=function(){var _ref10=_asyncToGenerator(function*(){try{yield checkAndResetWindBetCount();var countJson=yield AsyncStorage.getItem(WIND_BETS_COUNT_KEY);var countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};return Math.max(0,2-countData.count);}catch(error){console.error('Error getting remaining wind bets:',error);return 0;}});return function getRemainingWindBets(){return _ref10.apply(this,arguments);};}();export var getRemainingRainBets=function(){var _ref11=_asyncToGenerator(function*(){try{yield checkAndResetRainBetCount();var countJson=yield AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);var countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};console.log('Current rain bet count data:',countData);return Math.max(0,3-countData.count);}catch(error){console.error('Error getting remaining rain bets:',error);return 0;}});return function getRemainingRainBets(){return _ref11.apply(this,arguments);};}();export var getTimeUntilNextWindBet=function(){var _ref12=_asyncToGenerator(function*(){try{var remainingBets=yield getRemainingWindBets();if(remainingBets>0){return 0;}var countJson=yield AsyncStorage.getItem(WIND_BETS_COUNT_KEY);if(!countJson){return 0;}var countData=JSON.parse(countJson);var lastResetTime=new Date(countData.timestamp);var nextResetTime=new Date(lastResetTime);nextResetTime.setHours(nextResetTime.getHours()+12);var now=new Date();if(nextResetTime<=now){return 0;}return Math.ceil((nextResetTime.getTime()-now.getTime())/(1000*60));}catch(error){console.error('Error calculating time until next wind bet:',error);return 0;}});return function getTimeUntilNextWindBet(){return _ref12.apply(this,arguments);};}();var getBetTypeFromOption=function getBetTypeFromOption(option){if(option==='rain_yes'||option==='rain_no'||option==='rain_amount'){return'rain';}else if(option==='temp_min'){return'temp_min';}else if(option==='temp_max'){return'temp_max';}else if(option==='temperature'){return'temperature';}else if(option==='wind_max'){return'wind';}else{return'rain';}};var getMarginFromLeverage=function getMarginFromLeverage(leverage){switch(leverage){case 2:return 5;case 5:return 4;case 10:return 3;case 20:return 2;case 50:return 1;case 100:return 0;default:return 5;}};export var resolveBets=function(){var _ref13=_asyncToGenerator(function*(){try{var now=new Date();var yesterday=new Date(now);yesterday.setDate(yesterday.getDate()-1);var betsJson=yield AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);var bets=betsJson?JSON.parse(betsJson):[];var pendingBets=bets.filter(function(bet){return bet.status==='pending'&&!bet.verified&&new Date(bet.verificationTime)<=now;});if(pendingBets.length===0){return;}var currentRainAmount=yield fetchCurrentRainData();var currentTemperature=yield fetchCurrentTemperatureData();var currentWind=yield fetchCurrentWindData();var updatedBets=_toConsumableArray(bets);var _loop2=function*_loop2(bet){var won=false;var result=0;var resolution_explanation='';if(bet.option==='rain_amount'){result=currentRainAmount;var betValue=bet.rain_mm!==null?bet.rain_mm:bet.value;won=Math.abs((betValue||0)-result)<=0.5;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de \"+betValue+\" mm de lluvia estaba dentro del margen de \\xB10.5 mm del valor real (\"+result+\" mm).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de \"+betValue+\" mm de lluvia difer\\xEDa m\\xE1s de \\xB10.5 mm del valor real (\"+result+\" mm).\";}}else if(bet.option==='rain_yes'){result=currentRainAmount;won=result>0;if(won){resolution_explanation=\"\\xA1Ganaste! Predijiste correctamente que llover\\xEDa. La cantidad de lluvia registrada fue de \"+result+\" mm.\";}else{resolution_explanation=\"Perdiste. Predijiste que llover\\xEDa, pero no se registr\\xF3 lluvia (0 mm).\";}}else if(bet.option==='rain_no'){result=currentRainAmount;won=result===0;if(won){resolution_explanation=\"\\xA1Ganaste! Predijiste correctamente que no llover\\xEDa. No se registr\\xF3 lluvia (0 mm).\";}else{resolution_explanation=\"Perdiste. Predijiste que no llover\\xEDa, pero se registraron \"+result+\" mm de lluvia.\";}}else if(bet.option==='temp_min'){result=currentTemperature.min;var _betValue6=bet.temp_min_c!==null?bet.temp_min_c:bet.value;won=Math.abs((_betValue6||0)-result)<=1.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura m\\xEDnima de \"+_betValue6+\"\\xB0C estaba dentro del margen de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura m\\xEDnima de \"+_betValue6+\"\\xB0C difer\\xEDa m\\xE1s de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}}else if(bet.option==='temp_max'){result=currentTemperature.max;var _betValue7=bet.temp_max_c!==null?bet.temp_max_c:bet.value;won=Math.abs((_betValue7||0)-result)<=1.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura m\\xE1xima de \"+_betValue7+\"\\xB0C estaba dentro del margen de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura m\\xE1xima de \"+_betValue7+\"\\xB0C difer\\xEDa m\\xE1s de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}}else if(bet.option==='temperature'){result=currentTemperature.current;var _betValue8=bet.temperature_c!==null?bet.temperature_c:bet.value;won=Math.abs((_betValue8||0)-result)<=1.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de temperatura actual de \"+_betValue8+\"\\xB0C estaba dentro del margen de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de temperatura actual de \"+_betValue8+\"\\xB0C difer\\xEDa m\\xE1s de \\xB11.0\\xB0C del valor real (\"+result+\"\\xB0C).\";}}else if(bet.option==='wind_max'){result=currentWind.max;var _betValue9=bet.wind_kmh_max!==null?bet.wind_kmh_max:bet.value;won=Math.abs((_betValue9||0)-result)<=3.0;if(won){resolution_explanation=\"\\xA1Ganaste! Tu predicci\\xF3n de velocidad m\\xE1xima del viento de \"+_betValue9+\" km/h estaba dentro del margen de \\xB13.0 km/h del valor real (\"+result+\" km/h).\";}else{resolution_explanation=\"Perdiste. Tu predicci\\xF3n de velocidad m\\xE1xima del viento de \"+_betValue9+\" km/h difer\\xEDa m\\xE1s de \\xB13.0 km/h del valor real (\"+result+\" km/h).\";}}var betIndex=updatedBets.findIndex(function(b){return b.id===bet.id;});if(betIndex!==-1){updatedBets[betIndex]=_objectSpread(_objectSpread({},updatedBets[betIndex]),{},{result:result,won:won,verified:true,status:won?'ganada':'perdida',resolution_explanation:resolution_explanation});}};for(var bet of pendingBets){yield*_loop2(bet);}yield AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY,JSON.stringify(updatedBets));}catch(error){console.error('Error resolving bets:',error);}});return function resolveBets(){return _ref13.apply(this,arguments);};}();var getDailyTemperatureBetCount=function(){var _ref14=_asyncToGenerator(function*(){try{var today=new Date().toISOString().split('T')[0];var countJson=yield AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);var counts=countJson?JSON.parse(countJson):{};return counts[today]||0;}catch(error){console.error('Error getting daily temperature bet count:',error);return 0;}});return function getDailyTemperatureBetCount(){return _ref14.apply(this,arguments);};}();var incrementDailyTemperatureBetCount=function(){var _ref15=_asyncToGenerator(function*(){try{var today=new Date().toISOString().split('T')[0];var countJson=yield AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);var counts=countJson?JSON.parse(countJson):{};counts[today]=(counts[today]||0)+1;var sevenDaysAgo=new Date();sevenDaysAgo.setDate(sevenDaysAgo.getDate()-7);var cleanedCounts={};for(var _ref16 of Object.entries(counts)){var _ref17=_slicedToArray(_ref16,2);var date=_ref17[0];var count=_ref17[1];if(new Date(date)>=sevenDaysAgo){cleanedCounts[date]=count;}}yield AsyncStorage.setItem(TEMP_BETS_COUNT_KEY,JSON.stringify(cleanedCounts));}catch(error){console.error('Error incrementing daily temperature bet count:',error);}});return function incrementDailyTemperatureBetCount(){return _ref15.apply(this,arguments);};}();var incrementWindBetCount=function(){var _ref18=_asyncToGenerator(function*(){try{yield checkAndResetWindBetCount();var countJson=yield AsyncStorage.getItem(WIND_BETS_COUNT_KEY);var countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};countData.count+=1;yield AsyncStorage.setItem(WIND_BETS_COUNT_KEY,JSON.stringify(countData));}catch(error){console.error('Error incrementing wind bet count:',error);}});return function incrementWindBetCount(){return _ref18.apply(this,arguments);};}();var checkAndResetWindBetCount=function(){var _ref19=_asyncToGenerator(function*(){try{var countJson=yield AsyncStorage.getItem(WIND_BETS_COUNT_KEY);if(!countJson)return;var countData=JSON.parse(countJson);var lastTimestamp=new Date(countData.timestamp);var now=new Date();var hoursDiff=(now.getTime()-lastTimestamp.getTime())/(1000*60*60);if(hoursDiff>=12){yield AsyncStorage.setItem(WIND_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:now.toISOString()}));}}catch(error){console.error('Error checking and resetting wind bet count:',error);}});return function checkAndResetWindBetCount(){return _ref19.apply(this,arguments);};}();var incrementRainBetCount=function(){var _ref20=_asyncToGenerator(function*(){try{yield checkAndResetRainBetCount();var countJson=yield AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);var countData=countJson?JSON.parse(countJson):{count:0,timestamp:new Date().toISOString()};countData.count+=1;console.log('Incrementing rain bet count to:',countData.count);yield AsyncStorage.setItem(RAIN_BETS_COUNT_KEY,JSON.stringify(countData));}catch(error){console.error('Error incrementing rain bet count:',error);}});return function incrementRainBetCount(){return _ref20.apply(this,arguments);};}();var checkAndResetRainBetCount=function(){var _ref21=_asyncToGenerator(function*(){try{var countJson=yield AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);if(!countJson)return;var countData=JSON.parse(countJson);var lastTimestamp=new Date(countData.timestamp);var now=new Date();var lastDate=lastTimestamp.toISOString().split('T')[0];var currentDate=now.toISOString().split('T')[0];if(lastDate!==currentDate){console.log('Resetting rain bet count - new day');yield AsyncStorage.setItem(RAIN_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:now.toISOString()}));}}catch(error){console.error('Error checking and resetting rain bet count:',error);}});return function checkAndResetRainBetCount(){return _ref21.apply(this,arguments);};}();var lockBetting=function(){var _ref22=_asyncToGenerator(function*(){try{yield AsyncStorage.setItem(BET_LOCK_KEY,'locked');yield AsyncStorage.setItem('bet_lock_timestamp',new Date().toISOString());}catch(error){console.error('Error locking betting:',error);}});return function lockBetting(){return _ref22.apply(this,arguments);};}();var unlockBetting=function(){var _ref23=_asyncToGenerator(function*(){try{yield AsyncStorage.removeItem(BET_LOCK_KEY);yield AsyncStorage.removeItem('bet_lock_timestamp');}catch(error){console.error('Error unlocking betting:',error);}});return function unlockBetting(){return _ref23.apply(this,arguments);};}();var isBetLocked=function(){var _ref24=_asyncToGenerator(function*(){try{var lockStatus=yield AsyncStorage.getItem(BET_LOCK_KEY);return lockStatus==='locked';}catch(error){console.error('Error checking bet lock status:',error);return false;}});return function isBetLocked(){return _ref24.apply(this,arguments);};}();export var resetAllBetCounters=function(){var _ref25=_asyncToGenerator(function*(){try{console.log('Resetting all bet counters');var today=new Date().toISOString().split('T')[0];var tempCounts=_defineProperty({},today,0);yield AsyncStorage.setItem(TEMP_BETS_COUNT_KEY,JSON.stringify(tempCounts));yield AsyncStorage.setItem(WIND_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:new Date().toISOString()}));yield AsyncStorage.setItem(RAIN_BETS_COUNT_KEY,JSON.stringify({count:0,timestamp:new Date().toISOString()}));yield unlockBetting();console.log('All bet counters have been reset');}catch(error){console.error('Error resetting bet counters:',error);}});return function resetAllBetCounters(){return _ref25.apply(this,arguments);};}();export var getOdds=getRainOdds;export var getTemperatureOddsWrapper=function getTemperatureOddsWrapper(temp,isMin){return getTemperatureOdds(temp);};export{getWindOdds};","map":{"version":3,"names":["AsyncStorage","fetchCurrentRainData","fetchCurrentTemperatureData","fetchCurrentWindData","getRainOdds","getTemperatureOdds","getWindOdds","LOCAL_BETS_STORAGE_KEY","TEMP_BETS_COUNT_KEY","WIND_BETS_TIMESTAMP_KEY","WIND_BETS_COUNT_KEY","RAIN_BETS_COUNT_KEY","LAST_BET_TIMESTAMP_KEY","BET_LOCK_KEY","addBet","_ref","_asyncToGenerator","bet","isBetLocked","console","log","lockTimestamp","getItem","lockTime","Date","getTime","now","unlockBetting","Error","lockBetting","isTemperatureBet","option","isWindBet","isRainBet","remainingBets","getRemainingTemperatureBets","user_id","remainingWindBets","getRemainingWindBets","calculatedLeverage","value","betData","_objectSpread","id","Math","random","toString","substring","date","toISOString","split","coins","leverage","timestamp","result","won","city","mode","rain_mm","resolution_date","betTime","resolutionTime","setHours","getHours","status","verificationTime","resolutionHours","bet_resolution_hours","verified","bet_type","getBetTypeFromOption","temp_min_c","temp_max_c","wind_kmh_max","margin","getMarginFromLeverage","range_min","max","range_max","min","existingBetsJson","existingBets","JSON","parse","updatedBets","concat","_toConsumableArray","setItem","stringify","incrementDailyTemperatureBetCount","incrementWindBetCount","incrementRainBetCount","setTimeout","error","_x","apply","arguments","getBets","_ref3","userId","length","undefined","betsJson","allBets","userBets","filter","sort","a","b","updateBetResult","_ref4","betResult","bets","betIndex","findIndex","betId","_x2","evaluatePendingBets","_ref5","betsToResolve","currentRainAmount","currentTemperature","currentWind","results","_loop","resolution_explanation","current","betValue","abs","temperature_c","push","isBettingAllowed","_ref6","betType","getRemainingRainBets","_x3","isTemperatureBettingAllowed","_ref7","count","getDailyTemperatureBetCount","_ref8","canPlaceWindBetNow","_ref9","_ref10","checkAndResetWindBetCount","countJson","countData","_ref11","checkAndResetRainBetCount","getTimeUntilNextWindBet","_ref12","lastResetTime","nextResetTime","ceil","resolveBets","_ref13","yesterday","setDate","getDate","pendingBets","_loop2","_ref14","today","counts","_ref15","sevenDaysAgo","cleanedCounts","_ref16","Object","entries","_ref17","_slicedToArray","_ref18","_ref19","lastTimestamp","hoursDiff","_ref20","_ref21","lastDate","currentDate","_ref22","_ref23","removeItem","_ref24","lockStatus","resetAllBetCounters","_ref25","tempCounts","_defineProperty","getOdds","getTemperatureOddsWrapper","temp","isMin"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/localSupabaseService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Bet, BetResult, BetStatus, BetOption } from '../types/weather';\nimport { fetchCurrentRainData, fetchCurrentTemperatureData, fetchCurrentWindData, isWithinBettingWindow, isWithinBettingWindowSync } from './weatherService';\nimport { getRainOdds, getTemperatureOdds, getWindOdds } from './oddsService';\n\n// Constants\nconst LOCAL_BETS_STORAGE_KEY = 'local_bets';\nconst TEMP_BETS_COUNT_KEY = 'daily_temp_bets';\nconst WIND_BETS_TIMESTAMP_KEY = 'last_wind_bet_timestamp';\nconst WIND_BETS_COUNT_KEY = 'wind_bets_count';\nconst RAIN_BETS_COUNT_KEY = 'rain_bets_count';\nconst LAST_BET_TIMESTAMP_KEY = 'last_bet_timestamp';\nconst BET_LOCK_KEY = 'bet_lock';\n\n// Function to add a new bet (replaces addBetToSupabase)\nexport const addBet = async (bet: Bet): Promise<Bet | null> => {\n  try {\n    // Prevent rapid consecutive bets (anti-spam protection)\n    if (await isBetLocked()) {\n      console.log('Bet is locked. Waiting for unlock...');\n      // Force unlock if it's been locked for more than 10 seconds\n      const lockTimestamp = await AsyncStorage.getItem('bet_lock_timestamp');\n      if (lockTimestamp) {\n        const lockTime = new Date(lockTimestamp).getTime();\n        const now = new Date().getTime();\n        if (now - lockTime > 10000) { // 10 seconds\n          console.log('Force unlocking bet after 10 seconds');\n          await unlockBetting();\n        } else {\n          throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');\n        }\n      } else {\n        throw new Error('Por favor, espera unos segundos antes de realizar otra apuesta');\n      }\n    }\n    \n    // Lock betting temporarily to prevent rapid consecutive bets\n    await lockBetting();\n    \n    // Check if betting is allowed based on bet type\n    const isTemperatureBet = bet.option === 'temperature' || bet.option === 'temp_min' || bet.option === 'temp_max';\n    const isWindBet = bet.option === 'wind_max';\n    const isRainBet = bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount';\n    \n    console.log('Bet type check:', { isTemperatureBet, isWindBet, isRainBet, option: bet.option });\n    \n    // For temperature bets, check daily limit\n    if (isTemperatureBet) {\n      const remainingBets = await getRemainingTemperatureBets(bet.user_id || 'anonymous');\n      if (remainingBets <= 0) {\n        // Unlock betting before throwing error\n        await unlockBetting();\n        throw new Error('Has alcanzado el límite de 2 apuestas de temperatura para hoy');\n      }\n    }\n    \n    // For wind bets, check 12-hour limit\n    if (isWindBet) {\n      const remainingWindBets = await getRemainingWindBets();\n      if (remainingWindBets <= 0) {\n        // Unlock betting before throwing error\n        await unlockBetting();\n        throw new Error('Has alcanzado el límite de 2 apuestas de viento cada 12 horas');\n      }\n    }\n    \n    // Calculate appropriate odds based on bet type and value\n    let calculatedLeverage = 1;\n    if (isRainBet && bet.option === 'rain_amount' && bet.value !== null) {\n      calculatedLeverage = getRainOdds(bet.value);\n    } else if (isTemperatureBet && bet.value !== null) {\n      calculatedLeverage = getTemperatureOdds(bet.value);\n    } else if (isWindBet && bet.value !== null) {\n      calculatedLeverage = getWindOdds(bet.value);\n    } else if (bet.option === 'rain_yes') {\n      calculatedLeverage = 3.0; // Fixed odds for \"will rain\" bets\n    } else if (bet.option === 'rain_no') {\n      calculatedLeverage = 1.2; // Fixed odds for \"won't rain\" bets\n    }\n    \n    // Prepare the bet data\n    const betData: Bet = {\n      ...bet,\n      id: `bet_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n      date: bet.date || new Date().toISOString().split('T')[0],\n      option: bet.option,\n      value: bet.value,\n      coins: bet.coins,\n      leverage: calculatedLeverage, // Use calculated odds\n      timestamp: bet.timestamp || new Date().toISOString(),\n      result: bet.result || null,\n      won: bet.won || null,\n      city: bet.city || 'Málaga',\n      mode: bet.mode || 'Simple',\n      rain_mm: bet.rain_mm || null,\n      resolution_date: bet.resolution_date || (() => {\n        // If no resolution date, set to 24h after the bet timestamp\n        const betTime = new Date(bet.timestamp || new Date().toISOString());\n        const resolutionTime = new Date(betTime);\n        \n        // Set resolution time based on bet type\n        if (bet.option === 'wind_max') {\n          resolutionTime.setHours(resolutionTime.getHours() + 12);\n        } else {\n          resolutionTime.setHours(resolutionTime.getHours() + 24);\n        }\n        \n        return resolutionTime.toISOString().split('T')[0];\n      })(),\n      user_id: bet.user_id || 'anonymous',\n      status: bet.status || 'pending',\n      verificationTime: (() => {\n        // Create verification time (24 hours from now by default, 12 hours for temperature and wind bets)\n        const now = new Date();\n        const verificationTime = new Date(now);\n        \n        // Set verification time based on bet type\n        const isTemperatureBet = bet.option === 'temperature' || bet.option === 'temp_min' || bet.option === 'temp_max';\n        const isWindBet = bet.option === 'wind_max';\n        const resolutionHours = isTemperatureBet || isWindBet || bet.bet_resolution_hours === 12 ? 12 : 24;\n        \n        verificationTime.setHours(verificationTime.getHours() + resolutionHours);\n        return verificationTime.toISOString();\n      })(),\n      verified: false\n    };\n\n    // Set bet type\n    betData.bet_type = getBetTypeFromOption(bet.option);\n    \n    // Set temperature values if applicable\n    if (bet.option === 'temp_min') {\n      betData.temp_min_c = bet.value;\n    } else if (bet.option === 'temp_max') {\n      betData.temp_max_c = bet.value;\n    } else if (bet.option === 'wind_max') {\n      betData.wind_kmh_max = bet.value;\n    }\n    \n    // Set range values for Pro mode\n    if (bet.mode === 'Pro' && bet.value !== null) {\n      const margin = getMarginFromLeverage(bet.leverage);\n      betData.range_min = Math.max(-50, bet.value - margin);\n      betData.range_max = Math.min(999, bet.value + margin);\n    }\n\n    // Get existing bets\n    const existingBetsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const existingBets: Bet[] = existingBetsJson ? JSON.parse(existingBetsJson) : [];\n    \n    // Add new bet\n    const updatedBets = [...existingBets, betData];\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(updatedBets));\n\n    // If it's a temperature bet, update the daily count\n    if (bet.option === 'temp_min' || bet.option === 'temp_max') {\n      await incrementDailyTemperatureBetCount();\n    }\n    \n    // If it's a wind bet, update the count\n    if (bet.option === 'wind_max') {\n      await incrementWindBetCount();\n    }\n    \n    // If it's a rain bet, update the count\n    if (bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') {\n      await incrementRainBetCount();\n    }\n    \n    // Store last bet timestamp for rate limiting\n    await AsyncStorage.setItem(LAST_BET_TIMESTAMP_KEY, new Date().toISOString());\n    \n    // Unlock betting after successful bet\n    setTimeout(async () => {\n      await unlockBetting();\n    }, 2000);\n\n    return betData;\n  } catch (error) {\n    console.error('Error in addBet:', error);\n    // Make sure to unlock betting in case of error\n    await unlockBetting();\n    throw error;\n  }\n};\n\n// Function to get all bets (replaces getBetsFromSupabase)\nexport const getBets = async (userId: string = 'anonymous'): Promise<Bet[]> => {\n  try {\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const allBets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Filter by user ID\n    const userBets = allBets.filter(bet => bet.user_id === userId);\n    \n    // Sort by timestamp (newest first)\n    return userBets.sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n  } catch (error) {\n    console.error('Error in getBets:', error);\n    return [];\n  }\n};\n\n// Function to update bet result (replaces updateBetResultInSupabase)\nexport const updateBetResult = async (betResult: BetResult): Promise<boolean> => {\n  try {\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Find the bet to update\n    const betIndex = bets.findIndex(bet => bet.id === betResult.betId);\n    \n    if (betIndex === -1) {\n      return false;\n    }\n    \n    // Update the bet\n    bets[betIndex] = {\n      ...bets[betIndex],\n      result: betResult.result,\n      won: betResult.won,\n      status: betResult.won ? 'ganada' : 'perdida',\n      verified: true\n    };\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(bets));\n    \n    return true;\n  } catch (error) {\n    console.error('Error in updateBetResult:', error);\n    return false;\n  }\n};\n\n// Function to evaluate pending bets (replaces evaluatePendingBets)\nexport const evaluatePendingBets = async (userId: string = 'anonymous'): Promise<BetResult[]> => {\n  try {\n    // Get current date and time\n    const now = new Date();\n    \n    // Get all bets\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Filter pending bets for the user that should be resolved now\n    const betsToResolve = bets.filter(bet => \n      bet.status === 'pending' && \n      bet.user_id === userId && \n      !bet.verified && \n      new Date(bet.verificationTime) <= now\n    );\n    \n    if (betsToResolve.length === 0) {\n      return [];\n    }\n    \n    // Get current weather data\n    const currentRainAmount = await fetchCurrentRainData();\n    const currentTemperature = await fetchCurrentTemperatureData();\n    const currentWind = await fetchCurrentWindData();\n    \n    // Evaluate each bet\n    const results: BetResult[] = [];\n    const updatedBets = [...bets];\n    \n    for (const bet of betsToResolve) {\n      let result = 0;\n      let won = false;\n      let margin = 0;\n      let resolution_explanation = '';\n      \n      // Determine the actual result based on bet type\n      if (bet.bet_type === 'rain' || bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') {\n        result = currentRainAmount;\n      } else if (bet.bet_type === 'temp_min' || bet.option === 'temp_min') {\n        result = currentTemperature.min;\n      } else if (bet.bet_type === 'temp_max' || bet.option === 'temp_max') {\n        result = currentTemperature.max;\n      } else if (bet.option === 'temperature') {\n        result = currentTemperature.current;\n      } else if (bet.option === 'wind_max') {\n        result = currentWind.max;\n      }\n      \n      // Determine if bet is won based on bet type and mode\n      if (bet.mode === 'Simple') {\n        // Simple mode: exact match\n        if (bet.option === 'rain_yes') {\n          won = result > 0;\n          if (won) {\n            resolution_explanation = `¡Ganaste! Predijiste correctamente que llovería. La cantidad de lluvia registrada fue de ${result} mm.`;\n          } else {\n            resolution_explanation = `Perdiste. Predijiste que llovería, pero no se registró lluvia (0 mm).`;\n          }\n        } else if (bet.option === 'rain_no') {\n          won = result === 0;\n          if (won) {\n            resolution_explanation = `¡Ganaste! Predijiste correctamente que no llovería. No se registró lluvia (0 mm).`;\n          } else {\n            resolution_explanation = `Perdiste. Predijiste que no llovería, pero se registraron ${result} mm de lluvia.`;\n          }\n        } else if (bet.option === 'rain_amount') {\n          const betValue = bet.rain_mm !== null ? bet.rain_mm : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 0.5; // Win if within ±0.5mm\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de ${betValue} mm de lluvia estaba dentro del margen de ±0.5 mm del valor real (${result} mm).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de ${betValue} mm de lluvia difería más de ±0.5 mm del valor real (${result} mm).`;\n          }\n        } else if (bet.option === 'temp_min') {\n          const betValue = bet.temp_min_c !== null ? bet.temp_min_c : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de temperatura mínima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de temperatura mínima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n          }\n        } else if (bet.option === 'temp_max') {\n          const betValue = bet.temp_max_c !== null ? bet.temp_max_c : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de temperatura máxima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de temperatura máxima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n          }\n        } else if (bet.option === 'temperature') {\n          const betValue = bet.temperature_c !== null ? bet.temperature_c : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de temperatura actual de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de temperatura actual de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n          }\n        } else if (bet.option === 'wind_max') {\n          const betValue = bet.wind_kmh_max !== null ? bet.wind_kmh_max : bet.value;\n          won = Math.abs((betValue || 0) - result) <= 3.0; // Win if within ±3.0 km/h\n          if (won) {\n            resolution_explanation = `¡Ganaste! Tu predicción de velocidad máxima del viento de ${betValue} km/h estaba dentro del margen de ±3.0 km/h del valor real (${result} km/h).`;\n          } else {\n            resolution_explanation = `Perdiste. Tu predicción de velocidad máxima del viento de ${betValue} km/h difería más de ±3.0 km/h del valor real (${result} km/h).`;\n          }\n        }\n      } else if (bet.mode === 'Pro') {\n        // Pro mode: within margin based on leverage\n        margin = getMarginFromLeverage(bet.leverage);\n        \n        // Check if result is within range\n        if (bet.range_min !== null && bet.range_max !== null) {\n          won = result >= bet.range_min && result <= bet.range_max;\n          if (won) {\n            resolution_explanation = `¡Ganaste! El valor real (${result}) estaba dentro del rango que predijiste (${bet.range_min} - ${bet.range_max}).`;\n          } else {\n            resolution_explanation = `Perdiste. El valor real (${result}) estaba fuera del rango que predijiste (${bet.range_min} - ${bet.range_max}).`;\n          }\n        } else {\n          // Fallback to checking if the value is within margin of the target\n          let betValue = null;\n          \n          if (bet.option === 'rain_yes' || bet.option === 'rain_no' || bet.option === 'rain_amount') {\n            betValue = bet.rain_mm !== null ? bet.rain_mm : bet.value;\n          } else if (bet.option === 'temp_min') {\n            betValue = bet.temp_min_c !== null ? bet.temp_min_c : bet.value;\n          } else if (bet.option === 'temp_max') {\n            betValue = bet.temp_max_c !== null ? bet.temp_max_c : bet.value;\n          } else if (bet.option === 'temperature') {\n            betValue = bet.temperature_c !== null ? bet.temperature_c : bet.value;\n          } else if (bet.option === 'wind_max') {\n            betValue = bet.wind_kmh_max !== null ? bet.wind_kmh_max : bet.value;\n          }\n          \n          if (betValue !== null) {\n            won = Math.abs(result - betValue) <= margin;\n            if (won) {\n              resolution_explanation = `¡Ganaste! Tu predicción de ${betValue} estaba dentro del margen de ±${margin} del valor real (${result}).`;\n            } else {\n              resolution_explanation = `Perdiste. Tu predicción de ${betValue} difería más de ±${margin} del valor real (${result}).`;\n            }\n          }\n        }\n      }\n      \n      // Find the bet in the array and update it\n      const betIndex = updatedBets.findIndex(b => b.id === bet.id);\n      if (betIndex !== -1) {\n        updatedBets[betIndex] = {\n          ...updatedBets[betIndex],\n          result,\n          won,\n          verified: true,\n          status: won ? 'ganada' : 'perdida',\n          resolution_explanation\n        };\n      }\n      \n      // Add to results\n      results.push({\n        betId: bet.id,\n        result,\n        won,\n        margin\n      });\n    }\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(updatedBets));\n    \n    return results;\n  } catch (error) {\n    console.error('Error in evaluatePendingBets:', error);\n    return [];\n  }\n};\n\n// Function to check if betting is allowed\nexport const isBettingAllowed = async (betType?: string): Promise<boolean> => {\n  try {\n    // Check if betting is locked (anti-spam protection)\n    if (await isBetLocked()) {\n      console.log('Betting is locked (anti-spam protection)');\n      return false;\n    }\n    \n    // Temperature bets are allowed at any time\n    if (betType === 'temperature' || betType === 'temp_min' || betType === 'temp_max') {\n      console.log('Temperature betting is always allowed');\n      return true;\n    }\n    \n    // Wind bets are allowed at any time but limited to twice per 12 hours\n    if (betType === 'wind') {\n      const remainingWindBets = await getRemainingWindBets();\n      console.log('Wind betting check:', remainingWindBets > 0);\n      return remainingWindBets > 0;\n    }\n    \n    // Rain bets are allowed at any time but limited to 3 bets per window\n    if (betType === 'rain' || betType === 'rain_yes' || betType === 'rain_no' || betType === 'rain_amount') {\n      const remainingBets = await getRemainingRainBets();\n      console.log('Rain betting allowed check in isBettingAllowed:', true, 'Remaining bets:', remainingBets);\n      return remainingBets > 0;\n    }\n    \n    // All other bet types are allowed\n    console.log('General betting allowed check in isBettingAllowed:', true, 'Bet type:', betType);\n    return true;\n  } catch (error) {\n    console.error('Error checking if betting is allowed:', error);\n    return false;\n  }\n};\n\n// Function to check if temperature betting is allowed (max 2 per day)\nexport const isTemperatureBettingAllowed = async (userId: string = 'anonymous'): Promise<boolean> => {\n  try {\n    // Check if betting is locked (anti-spam protection)\n    if (await isBetLocked()) {\n      return false;\n    }\n    \n    const count = await getDailyTemperatureBetCount();\n    return count < 2;\n  } catch (error) {\n    console.error('Error in isTemperatureBettingAllowed:', error);\n    return false;\n  }\n};\n\n// Function to get remaining temperature bets for today\nexport const getRemainingTemperatureBets = async (userId: string = 'anonymous'): Promise<number> => {\n  try {\n    const count = await getDailyTemperatureBetCount();\n    return Math.max(0, 2 - count);\n  } catch (error) {\n    console.error('Error in getRemainingTemperatureBets:', error);\n    return 0;\n  }\n};\n\n// Function to check if wind betting is allowed (twice per 12 hours)\nexport const canPlaceWindBetNow = async (): Promise<boolean> => {\n  try {\n    return await getRemainingWindBets() > 0;\n  } catch (error) {\n    console.error('Error checking wind bet availability:', error);\n    return false;\n  }\n};\n\n// Function to get remaining wind bets\nexport const getRemainingWindBets = async (): Promise<number> => {\n  try {\n    // Check if we need to reset the wind bet count\n    await checkAndResetWindBetCount();\n    \n    // Get current wind bet count\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    // Maximum 2 wind bets per 12 hours\n    return Math.max(0, 2 - countData.count);\n  } catch (error) {\n    console.error('Error getting remaining wind bets:', error);\n    return 0;\n  }\n};\n\n// Function to get remaining rain bets\nexport const getRemainingRainBets = async (): Promise<number> => {\n  try {\n    // Check if we need to reset the rain bet count\n    await checkAndResetRainBetCount();\n    \n    // Get current rain bet count\n    const countJson = await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    console.log('Current rain bet count data:', countData);\n    \n    // Maximum 3 rain bets per window\n    return Math.max(0, 3 - countData.count);\n  } catch (error) {\n    console.error('Error getting remaining rain bets:', error);\n    return 0;\n  }\n};\n\n// Function to get time until next wind bet is allowed\nexport const getTimeUntilNextWindBet = async (): Promise<number> => {\n  try {\n    // If there are remaining bets, return 0\n    const remainingBets = await getRemainingWindBets();\n    if (remainingBets > 0) {\n      return 0;\n    }\n    \n    // Get the timestamp of the last wind bet count reset\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    if (!countJson) {\n      return 0;\n    }\n    \n    const countData = JSON.parse(countJson);\n    const lastResetTime = new Date(countData.timestamp);\n    const nextResetTime = new Date(lastResetTime);\n    nextResetTime.setHours(nextResetTime.getHours() + 12);\n    \n    const now = new Date();\n    if (nextResetTime <= now) {\n      return 0;\n    }\n    \n    // Return minutes until next reset\n    return Math.ceil((nextResetTime.getTime() - now.getTime()) / (1000 * 60));\n  } catch (error) {\n    console.error('Error calculating time until next wind bet:', error);\n    return 0;\n  }\n};\n\n// Helper function to get bet type from option\nconst getBetTypeFromOption = (option: BetOption): string => {\n  if (option === 'rain_yes' || option === 'rain_no' || option === 'rain_amount') {\n    return 'rain';\n  } else if (option === 'temp_min') {\n    return 'temp_min';\n  } else if (option === 'temp_max') {\n    return 'temp_max';\n  } else if (option === 'temperature') {\n    return 'temperature';\n  } else if (option === 'wind_max') {\n    return 'wind';\n  } else {\n    return 'rain'; // Default\n  }\n};\n\n// Helper function to get margin from leverage\nconst getMarginFromLeverage = (leverage: number): number => {\n  switch (leverage) {\n    case 2: return 5;\n    case 5: return 4;\n    case 10: return 3;\n    case 20: return 2;\n    case 50: return 1;\n    case 100: return 0;\n    default: return 5;\n  }\n};\n\n// Function to resolve bets\nexport const resolveBets = async (): Promise<void> => {\n  try {\n    const now = new Date();\n    const yesterday = new Date(now);\n    yesterday.setDate(yesterday.getDate() - 1);\n    \n    // Get all bets\n    const betsJson = await AsyncStorage.getItem(LOCAL_BETS_STORAGE_KEY);\n    const bets: Bet[] = betsJson ? JSON.parse(betsJson) : [];\n    \n    // Filter pending bets with resolution dates in the past\n    const pendingBets = bets.filter(bet => \n      bet.status === 'pending' && \n      !bet.verified &&\n      new Date(bet.verificationTime) <= now\n    );\n    \n    if (pendingBets.length === 0) {\n      return;\n    }\n    \n    // Get current weather data\n    const currentRainAmount = await fetchCurrentRainData();\n    const currentTemperature = await fetchCurrentTemperatureData();\n    const currentWind = await fetchCurrentWindData();\n    \n    // Process each bet\n    const updatedBets = [...bets];\n    \n    for (const bet of pendingBets) {\n      // Determine if bet is won\n      let won = false;\n      let result = 0;\n      let resolution_explanation = '';\n      \n      if (bet.option === 'rain_amount') {\n        result = currentRainAmount;\n        const betValue = bet.rain_mm !== null ? bet.rain_mm : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 0.5; // Win if within ±0.5mm\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de ${betValue} mm de lluvia estaba dentro del margen de ±0.5 mm del valor real (${result} mm).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de ${betValue} mm de lluvia difería más de ±0.5 mm del valor real (${result} mm).`;\n        }\n      } else if (bet.option === 'rain_yes') {\n        result = currentRainAmount;\n        won = result > 0;\n        if (won) {\n          resolution_explanation = `¡Ganaste! Predijiste correctamente que llovería. La cantidad de lluvia registrada fue de ${result} mm.`;\n        } else {\n          resolution_explanation = `Perdiste. Predijiste que llovería, pero no se registró lluvia (0 mm).`;\n        }\n      } else if (bet.option === 'rain_no') {\n        result = currentRainAmount;\n        won = result === 0;\n        if (won) {\n          resolution_explanation = `¡Ganaste! Predijiste correctamente que no llovería. No se registró lluvia (0 mm).`;\n        } else {\n          resolution_explanation = `Perdiste. Predijiste que no llovería, pero se registraron ${result} mm de lluvia.`;\n        }\n      } else if (bet.option === 'temp_min') {\n        result = currentTemperature.min;\n        const betValue = bet.temp_min_c !== null ? bet.temp_min_c : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de temperatura mínima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de temperatura mínima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n        }\n      } else if (bet.option === 'temp_max') {\n        result = currentTemperature.max;\n        const betValue = bet.temp_max_c !== null ? bet.temp_max_c : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de temperatura máxima de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de temperatura máxima de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n        }\n      } else if (bet.option === 'temperature') {\n        result = currentTemperature.current;\n        const betValue = bet.temperature_c !== null ? bet.temperature_c : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 1.0; // Win if within ±1.0°C\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de temperatura actual de ${betValue}°C estaba dentro del margen de ±1.0°C del valor real (${result}°C).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de temperatura actual de ${betValue}°C difería más de ±1.0°C del valor real (${result}°C).`;\n        }\n      } else if (bet.option === 'wind_max') {\n        result = currentWind.max;\n        const betValue = bet.wind_kmh_max !== null ? bet.wind_kmh_max : bet.value;\n        won = Math.abs((betValue || 0) - result) <= 3.0; // Win if within ±3.0 km/h\n        if (won) {\n          resolution_explanation = `¡Ganaste! Tu predicción de velocidad máxima del viento de ${betValue} km/h estaba dentro del margen de ±3.0 km/h del valor real (${result} km/h).`;\n        } else {\n          resolution_explanation = `Perdiste. Tu predicción de velocidad máxima del viento de ${betValue} km/h difería más de ±3.0 km/h del valor real (${result} km/h).`;\n        }\n      }\n      \n      // Find the bet in the array and update it\n      const betIndex = updatedBets.findIndex(b => b.id === bet.id);\n      if (betIndex !== -1) {\n        updatedBets[betIndex] = {\n          ...updatedBets[betIndex],\n          result,\n          won,\n          verified: true,\n          status: won ? 'ganada' : 'perdida',\n          resolution_explanation\n        };\n      }\n    }\n    \n    // Save updated bets\n    await AsyncStorage.setItem(LOCAL_BETS_STORAGE_KEY, JSON.stringify(updatedBets));\n  } catch (error) {\n    console.error('Error resolving bets:', error);\n  }\n};\n\n// Helper functions for daily temperature bet count\nconst getDailyTemperatureBetCount = async (): Promise<number> => {\n  try {\n    const today = new Date().toISOString().split('T')[0];\n    const countJson = await AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);\n    const counts = countJson ? JSON.parse(countJson) : {};\n    \n    return counts[today] || 0;\n  } catch (error) {\n    console.error('Error getting daily temperature bet count:', error);\n    return 0;\n  }\n};\n\nconst incrementDailyTemperatureBetCount = async (): Promise<void> => {\n  try {\n    const today = new Date().toISOString().split('T')[0];\n    const countJson = await AsyncStorage.getItem(TEMP_BETS_COUNT_KEY);\n    const counts = countJson ? JSON.parse(countJson) : {};\n    \n    counts[today] = (counts[today] || 0) + 1;\n    \n    // Clean up old entries (keep only last 7 days)\n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n    \n    const cleanedCounts = {};\n    for (const [date, count] of Object.entries(counts)) {\n      if (new Date(date) >= sevenDaysAgo) {\n        cleanedCounts[date] = count;\n      }\n    }\n    \n    await AsyncStorage.setItem(TEMP_BETS_COUNT_KEY, JSON.stringify(cleanedCounts));\n  } catch (error) {\n    console.error('Error incrementing daily temperature bet count:', error);\n  }\n};\n\n// Helper functions for wind bet count\nconst incrementWindBetCount = async (): Promise<void> => {\n  try {\n    // Check if we need to reset the count first\n    await checkAndResetWindBetCount();\n    \n    // Get current count\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    // Increment count\n    countData.count += 1;\n    \n    // Save updated count\n    await AsyncStorage.setItem(WIND_BETS_COUNT_KEY, JSON.stringify(countData));\n  } catch (error) {\n    console.error('Error incrementing wind bet count:', error);\n  }\n};\n\nconst checkAndResetWindBetCount = async (): Promise<void> => {\n  try {\n    const countJson = await AsyncStorage.getItem(WIND_BETS_COUNT_KEY);\n    if (!countJson) return;\n    \n    const countData = JSON.parse(countJson);\n    const lastTimestamp = new Date(countData.timestamp);\n    const now = new Date();\n    \n    // Calculate hours difference\n    const hoursDiff = (now.getTime() - lastTimestamp.getTime()) / (1000 * 60 * 60);\n    \n    // Reset if 12 hours have passed\n    if (hoursDiff >= 12) {\n      await AsyncStorage.setItem(WIND_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: now.toISOString() }));\n    }\n  } catch (error) {\n    console.error('Error checking and resetting wind bet count:', error);\n  }\n};\n\n// Helper functions for rain bet count\nconst incrementRainBetCount = async (): Promise<void> => {\n  try {\n    // Check if we need to reset the count first\n    await checkAndResetRainBetCount();\n    \n    // Get current count\n    const countJson = await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);\n    const countData = countJson ? JSON.parse(countJson) : { count: 0, timestamp: new Date().toISOString() };\n    \n    // Increment count\n    countData.count += 1;\n    \n    console.log('Incrementing rain bet count to:', countData.count);\n    \n    // Save updated count\n    await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY, JSON.stringify(countData));\n  } catch (error) {\n    console.error('Error incrementing rain bet count:', error);\n  }\n};\n\nconst checkAndResetRainBetCount = async (): Promise<void> => {\n  try {\n    const countJson = await AsyncStorage.getItem(RAIN_BETS_COUNT_KEY);\n    if (!countJson) return;\n    \n    const countData = JSON.parse(countJson);\n    const lastTimestamp = new Date(countData.timestamp);\n    const now = new Date();\n    \n    // Check if we're in a new betting window\n    const lastDate = lastTimestamp.toISOString().split('T')[0];\n    const currentDate = now.toISOString().split('T')[0];\n    \n    // Reset if date has changed\n    if (lastDate !== currentDate) {\n      console.log('Resetting rain bet count - new day');\n      await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: now.toISOString() }));\n    }\n  } catch (error) {\n    console.error('Error checking and resetting rain bet count:', error);\n  }\n};\n\n// Anti-spam protection functions\nconst lockBetting = async (): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(BET_LOCK_KEY, 'locked');\n    await AsyncStorage.setItem('bet_lock_timestamp', new Date().toISOString());\n  } catch (error) {\n    console.error('Error locking betting:', error);\n  }\n};\n\nconst unlockBetting = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem(BET_LOCK_KEY);\n    await AsyncStorage.removeItem('bet_lock_timestamp');\n  } catch (error) {\n    console.error('Error unlocking betting:', error);\n  }\n};\n\nconst isBetLocked = async (): Promise<boolean> => {\n  try {\n    const lockStatus = await AsyncStorage.getItem(BET_LOCK_KEY);\n    return lockStatus === 'locked';\n  } catch (error) {\n    console.error('Error checking bet lock status:', error);\n    return false;\n  }\n};\n\n// New function to reset all bet counters (for debugging)\nexport const resetAllBetCounters = async (): Promise<void> => {\n  try {\n    console.log('Resetting all bet counters');\n    \n    // Reset temperature bet count\n    const today = new Date().toISOString().split('T')[0];\n    const tempCounts = { [today]: 0 };\n    await AsyncStorage.setItem(TEMP_BETS_COUNT_KEY, JSON.stringify(tempCounts));\n    \n    // Reset wind bet count\n    await AsyncStorage.setItem(WIND_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: new Date().toISOString() }));\n    \n    // Reset rain bet count\n    await AsyncStorage.setItem(RAIN_BETS_COUNT_KEY, JSON.stringify({ count: 0, timestamp: new Date().toISOString() }));\n    \n    // Unlock betting\n    await unlockBetting();\n    \n    console.log('All bet counters have been reset');\n  } catch (error) {\n    console.error('Error resetting bet counters:', error);\n  }\n};\n\n// Export the old odds functions for backward compatibility\nexport const getOdds = getRainOdds;\nexport const getTemperatureOddsWrapper: any = (temp: number, isMin: boolean): number => {\n  return getTemperatureOdds(temp);\n};\n// Export the getWindOdds function directly to maintain compatibility\nexport { getWindOdds };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}