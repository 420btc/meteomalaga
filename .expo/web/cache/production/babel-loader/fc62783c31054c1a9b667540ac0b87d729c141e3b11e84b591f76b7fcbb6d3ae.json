{"ast":null,"code":"import AsyncStorage from'@react-native-async-storage/async-storage';const RAIN_DATA_CACHE_KEY='rain_data_cache';const TEMP_DATA_CACHE_KEY='temp_data_cache';const WIND_DATA_CACHE_KEY='wind_data_cache';const HISTORICAL_DATA_CACHE_KEY='historical_data_cache';const CACHE_EXPIRY_KEY='weather_cache_expiry';const CACHE_DURATION=5*60*1000;const OPENWEATHER_API_KEY='5ae0c9a3137234e18e032e3d6024629e';const MALAGA_LAT=36.7213;const MALAGA_LON=-4.4213;export const isWithinBettingWindow=()=>{return true;};export const getTimeUntilNextBettingWindow=()=>{try{const now=new Date();const currentHour=now.getHours();const currentMinute=now.getMinutes();const currentSecond=now.getSeconds();if(currentHour===23||currentHour===0){if(currentHour===23){const minutesLeft=59-currentMinute;const secondsLeft=59-currentSecond;return{hours:0,minutes:minutesLeft,seconds:secondsLeft};}else{const minutesLeft=59-currentMinute;const secondsLeft=59-currentSecond;return{hours:0,minutes:minutesLeft,seconds:secondsLeft};}}else{let hoursLeft;if(currentHour<23){hoursLeft=23-currentHour-1;}else{hoursLeft=23+(24-currentHour)-1;}const minutesLeft=59-currentMinute;const secondsLeft=59-currentSecond;return{hours:hoursLeft,minutes:minutesLeft,seconds:secondsLeft};}}catch(error){console.error('Error calculating time until next betting window:',error);return{hours:0,minutes:0,seconds:0};}};export const isWithinBettingWindowSync=()=>{return isWithinBettingWindow();};export const getTimeUntilNextBettingWindowSync=()=>{try{return getTimeUntilNextBettingWindow();}catch(error){console.error('Error in getTimeUntilNextBettingWindowSync:',error);return{hours:0,minutes:0,seconds:0};}};export const getCurrentSpainHour=()=>{try{const now=new Date();return now.getHours();}catch(error){console.error('Error getting current Spain hour:',error);return 0;}};export const isDaylightSavingTime=()=>{try{const now=new Date();const jan=new Date(now.getFullYear(),0,1);const jul=new Date(now.getFullYear(),6,1);return jan.getTimezoneOffset()!==jul.getTimezoneOffset();}catch(error){console.error('Error checking daylight saving time:',error);return false;}};export const getWeatherForDate=async date=>{try{const cachedData=await getCachedWeatherData();if(cachedData){return cachedData;}const response=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(!response.ok){throw new Error('Error fetching weather data');}const data=await response.json();const weatherData={temperature:data.main.temp,tempMin:data.main.temp_min,tempMax:data.main.temp_max,humidity:data.main.humidity,windSpeed:data.wind.speed*3.6,windDirection:data.wind.deg,description:data.weather[0].description,icon:data.weather[0].icon,rainAmount:data.rain&&data.rain['1h']?data.rain['1h']:0,date:date,timestamp:new Date().toISOString()};await cacheWeatherData(weatherData);return weatherData;}catch(error){console.error('Error fetching weather data:',error);const expiredCache=await getCachedWeatherData(true);if(expiredCache){return expiredCache;}return getSimulatedWeatherData(date);}};export const fetchWeatherData=getWeatherForDate;export const fetchCurrentRainData=async()=>{try{const response=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(!response.ok){throw new Error('Error fetching rain data');}const data=await response.json();let rainAmount=0;if(data.rain&&data.rain['1h']){rainAmount=data.rain['1h'];}const rainData={amount:rainAmount,timestamp:new Date().toISOString()};await AsyncStorage.setItem(RAIN_DATA_CACHE_KEY,JSON.stringify(rainData));await AsyncStorage.setItem(CACHE_EXPIRY_KEY,(new Date().getTime()+CACHE_DURATION).toString());return rainAmount;}catch(error){console.error('Error fetching rain data:',error);const cachedData=await AsyncStorage.getItem(RAIN_DATA_CACHE_KEY);if(cachedData){const rainData=JSON.parse(cachedData);return rainData.amount;}return Math.random()>0.7?Math.random()*5:0;}};export const fetchCurrentTemperatureData=async()=>{try{const response=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(!response.ok){throw new Error('Error fetching temperature data');}const data=await response.json();const tempData={current:data.main.temp,min:data.main.temp_min,max:data.main.temp_max,timestamp:new Date().toISOString()};await AsyncStorage.setItem(TEMP_DATA_CACHE_KEY,JSON.stringify(tempData));await AsyncStorage.setItem(CACHE_EXPIRY_KEY,(new Date().getTime()+CACHE_DURATION).toString());return tempData;}catch(error){console.error('Error fetching temperature data:',error);const cachedData=await AsyncStorage.getItem(TEMP_DATA_CACHE_KEY);if(cachedData){return JSON.parse(cachedData);}const currentTemp=15+Math.random()*15;return{current:currentTemp,min:currentTemp-(2+Math.random()*3),max:currentTemp+(2+Math.random()*3),timestamp:new Date().toISOString()};}};export const fetchCurrentWindData=async()=>{try{const response=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(!response.ok){throw new Error('Error fetching wind data');}const data=await response.json();const windSpeedMps=data.wind.speed;const windSpeedKmh=windSpeedMps*3.6;const maxWindSpeedKmh=windSpeedKmh*(1+Math.random()*0.3);const windData={current:Math.round(windSpeedKmh*10)/10,max:Math.round(maxWindSpeedKmh*10)/10,direction:data.wind.deg,timestamp:new Date().toISOString()};await AsyncStorage.setItem(WIND_DATA_CACHE_KEY,JSON.stringify(windData));await AsyncStorage.setItem(CACHE_EXPIRY_KEY,(new Date().getTime()+CACHE_DURATION).toString());return windData;}catch(error){console.error('Error fetching wind data:',error);const cachedData=await AsyncStorage.getItem(WIND_DATA_CACHE_KEY);if(cachedData){return JSON.parse(cachedData);}const currentWind=5+Math.random()*20;return{current:Math.round(currentWind*10)/10,max:Math.round(currentWind*(1+Math.random()*0.3)*10)/10,direction:Math.floor(Math.random()*360),timestamp:new Date().toISOString()};}};export const fetchForecastData=async()=>{try{const response=await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(!response.ok){throw new Error('Error fetching forecast data');}const data=await response.json();return data.list.map(item=>({date:new Date(item.dt*1000).toISOString(),temperature:item.main.temp,tempMin:item.main.temp_min,tempMax:item.main.temp_max,humidity:item.main.humidity,windSpeed:item.wind.speed*3.6,windDirection:item.wind.deg,description:item.weather[0].description,icon:item.weather[0].icon,rainAmount:item.rain&&item.rain['3h']?item.rain['3h']:0}));}catch(error){console.error('Error fetching forecast data:',error);return[];}};export const fetchHourlyHistoricalData=async(hours=24)=>{try{const cachedData=await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);const cacheExpiry=await AsyncStorage.getItem(CACHE_EXPIRY_KEY);if(cachedData&&cacheExpiry&&new Date().getTime()<parseInt(cacheExpiry)){const parsedData=JSON.parse(cachedData);if(parsedData.rainData.length>=hours&&parsedData.tempData.length>=hours&&parsedData.windData.length>=hours&&parsedData.labels.length>=hours){return{rainData:parsedData.rainData.slice(0,hours),tempData:parsedData.tempData.slice(0,hours),windData:parsedData.windData.slice(0,hours),labels:parsedData.labels.slice(0,hours)};}}const currentResponse=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(!currentResponse.ok){throw new Error('Error fetching current weather data');}const currentData=await currentResponse.json();const forecastResponse=await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(!forecastResponse.ok){throw new Error('Error fetching forecast data');}const forecastData=await forecastResponse.json();const rainData=[];const tempData=[];const windData=[];const labels=[];const timestamps=[];const now=new Date();rainData.push(currentData.rain&&currentData.rain['1h']?currentData.rain['1h']:0);tempData.push(currentData.main.temp);windData.push(currentData.wind.speed*3.6);labels.push(now.getHours().toString()+'h');timestamps.push(now.getTime());const forecastList=forecastData.list;forecastList.sort((a,b)=>b.dt-a.dt);for(const item of forecastList){const itemDate=new Date(item.dt*1000);const hoursDiff=(now.getTime()-itemDate.getTime())/(1000*60*60);if(hoursDiff>0&&hoursDiff<=hours){const itemHour=itemDate.getHours();if(!labels.includes(itemHour.toString()+'h')){rainData.push(item.rain&&item.rain['3h']?item.rain['3h']/3:0);tempData.push(item.main.temp);windData.push(item.wind.speed*3.6);labels.push(itemHour.toString()+'h');timestamps.push(itemDate.getTime());}}}if(rainData.length<hours){try{const airPollutionResponse=await fetch(`https://api.openweathermap.org/data/2.5/air_pollution/history?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&start=${Math.floor(now.getTime()/1000-hours*3600)}&end=${Math.floor(now.getTime()/1000)}&appid=${OPENWEATHER_API_KEY}`);if(airPollutionResponse.ok){const airPollutionData=await airPollutionResponse.json();airPollutionData.list.sort((a,b)=>b.dt-a.dt);for(const item of airPollutionData.list){const itemDate=new Date(item.dt*1000);const itemHour=itemDate.getHours();if(!labels.includes(itemHour.toString()+'h')){let tempVariation=0;if(itemHour>=0&&itemHour<6){tempVariation=-2;}else if(itemHour>=6&&itemHour<12){tempVariation=0;}else if(itemHour>=12&&itemHour<18){tempVariation=2;}else{tempVariation=0;}rainData.push(0);tempData.push(currentData.main.temp+tempVariation);windData.push(currentData.wind.speed*3.6*(0.7+Math.random()*0.6));labels.push(itemHour.toString()+'h');timestamps.push(itemDate.getTime());}}}}catch(error){console.error('Error fetching air pollution data:',error);}}while(rainData.length<hours){const missingHour=(now.getHours()-rainData.length+24)%24;let tempVariation=0;if(missingHour>=0&&missingHour<6){tempVariation=-2-Math.random();}else if(missingHour>=6&&missingHour<12){tempVariation=-1+missingHour*0.2;}else if(missingHour>=12&&missingHour<18){tempVariation=2-(missingHour-12)*0.2;}else{tempVariation=0-(missingHour-18)*0.3;}let windVariation=1.0;if(missingHour>=10&&missingHour<16){windVariation=1.2+Math.random()*0.3;}else if(missingHour>=16&&missingHour<22){windVariation=1.0+Math.random()*0.2;}else{windVariation=0.7+Math.random()*0.3;}let rainAmount=0;if(currentData.rain&&currentData.rain['1h']){if(missingHour>=6&&missingHour<10||missingHour>=16&&missingHour<20){rainAmount=currentData.rain['1h']*(0.5+Math.random());}else{rainAmount=currentData.rain['1h']*(0.2+Math.random()*0.5);}}rainData.push(Math.round(rainAmount*10)/10);tempData.push(Math.round((currentData.main.temp+tempVariation)*10)/10);windData.push(Math.round(currentData.wind.speed*3.6*windVariation*10)/10);labels.push(missingHour.toString()+'h');const missingDate=new Date(now);missingDate.setHours(missingHour);timestamps.push(missingDate.getTime());}const sortedIndices=timestamps.map((timestamp,index)=>({timestamp,index})).sort((a,b)=>a.timestamp-b.timestamp).map(item=>item.index);const sortedRainData=sortedIndices.map(index=>rainData[index]);const sortedTempData=sortedIndices.map(index=>tempData[index]);const sortedWindData=sortedIndices.map(index=>windData[index]);const sortedLabels=sortedIndices.map(index=>labels[index]);const result={rainData:sortedRainData.slice(-hours),tempData:sortedTempData.slice(-hours),windData:sortedWindData.slice(-hours),labels:sortedLabels.slice(-hours)};await AsyncStorage.setItem(HISTORICAL_DATA_CACHE_KEY,JSON.stringify(result));await AsyncStorage.setItem(CACHE_EXPIRY_KEY,(new Date().getTime()+CACHE_DURATION).toString());return result;}catch(error){console.error('Error fetching hourly historical data:',error);const cachedData=await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);if(cachedData){const parsedData=JSON.parse(cachedData);return{rainData:parsedData.rainData.slice(0,hours),tempData:parsedData.tempData.slice(0,hours),windData:parsedData.windData.slice(0,hours),labels:parsedData.labels.slice(0,hours)};}const rainData=[];const tempData=[];const windData=[];const labels=[];const now=new Date();const currentHour=now.getHours();let currentTemp=20;let currentWind=10;let isRaining=false;try{const currentResponse=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`);if(currentResponse.ok){const currentData=await currentResponse.json();currentTemp=currentData.main.temp;currentWind=currentData.wind.speed*3.6;isRaining=currentData.rain&&currentData.rain['1h']>0;}}catch(e){}for(let i=hours-1;i>=0;i--){const hourOfDay=(currentHour-i+24)%24;let tempVariation=0;if(hourOfDay>=0&&hourOfDay<6){tempVariation=-2-Math.random();}else if(hourOfDay>=6&&hourOfDay<12){tempVariation=-1+hourOfDay*0.2;}else if(hourOfDay>=12&&hourOfDay<18){tempVariation=2-(hourOfDay-12)*0.2;}else{tempVariation=0-(hourOfDay-18)*0.3;}let windVariation=1.0;if(hourOfDay>=10&&hourOfDay<16){windVariation=1.2+Math.random()*0.3;}else if(hourOfDay>=16&&hourOfDay<22){windVariation=1.0+Math.random()*0.2;}else{windVariation=0.7+Math.random()*0.3;}let rainAmount=0;if(isRaining){if(hourOfDay>=6&&hourOfDay<10||hourOfDay>=16&&hourOfDay<20){rainAmount=1+Math.random()*2;}else{rainAmount=Math.random()*1.5;}}else if(Math.random()>0.8){rainAmount=Math.random()*0.5;}tempData.push(Math.round((currentTemp+tempVariation)*10)/10);windData.push(Math.round(currentWind*windVariation*10)/10);rainData.push(Math.round(rainAmount*10)/10);labels.push(hourOfDay.toString()+'h');}return{rainData,tempData,windData,labels};}};const cacheWeatherData=async data=>{try{await AsyncStorage.setItem('weather_data_cache',JSON.stringify(data));await AsyncStorage.setItem(CACHE_EXPIRY_KEY,(new Date().getTime()+CACHE_DURATION).toString());}catch(error){console.error('Error caching weather data:',error);}};const getCachedWeatherData=async(ignoreExpiry=false)=>{try{const cachedData=await AsyncStorage.getItem('weather_data_cache');const cacheExpiry=await AsyncStorage.getItem(CACHE_EXPIRY_KEY);if(!cachedData){return null;}if(!ignoreExpiry&&cacheExpiry&&new Date().getTime()>parseInt(cacheExpiry)){return null;}return JSON.parse(cachedData);}catch(error){console.error('Error getting cached weather data:',error);return null;}};const getSimulatedWeatherData=date=>{const dateObj=new Date(date);const month=dateObj.getMonth();let baseTemp=15;if(month>=5&&month<=8){baseTemp=25;}else if(month>=9||month<=2){baseTemp=12;}const temp=baseTemp+(Math.random()*10-5);const tempMin=temp-(2+Math.random()*3);const tempMax=temp+(2+Math.random()*3);let rainProbability=0.2;if(month>=9&&month<=11){rainProbability=0.4;}else if(month>=0&&month<=2){rainProbability=0.5;}else if(month>=3&&month<=5){rainProbability=0.3;}const isRaining=Math.random()<rainProbability;const rainAmount=isRaining?Math.random()*10:0;const windSpeed=5+Math.random()*20;return{temperature:Math.round(temp*10)/10,tempMin:Math.round(tempMin*10)/10,tempMax:Math.round(tempMax*10)/10,humidity:Math.floor(40+Math.random()*40),windSpeed:Math.round(windSpeed*10)/10,windDirection:Math.floor(Math.random()*360),description:isRaining?'lluvia':Math.random()>0.7?'parcialmente nublado':'despejado',icon:isRaining?'10d':Math.random()>0.7?'03d':'01d',rainAmount:Math.round(rainAmount*100)/100,date:date,timestamp:new Date().toISOString(),simulated:true};};export const clearWeatherCache=async()=>{try{await AsyncStorage.removeItem('weather_data_cache');await AsyncStorage.removeItem(RAIN_DATA_CACHE_KEY);await AsyncStorage.removeItem(TEMP_DATA_CACHE_KEY);await AsyncStorage.removeItem(WIND_DATA_CACHE_KEY);await AsyncStorage.removeItem(HISTORICAL_DATA_CACHE_KEY);await AsyncStorage.removeItem(CACHE_EXPIRY_KEY);}catch(error){console.error('Error clearing weather cache:',error);}};export const fetchRainViewerData=async()=>{try{const response=await fetch('https://api.rainviewer.com/public/weather-maps.json');if(!response.ok){throw new Error('Error fetching RainViewer data');}const data=await response.json();return data;}catch(error){console.error('Error fetching RainViewer data:',error);return null;}};","map":{"version":3,"names":["AsyncStorage","RAIN_DATA_CACHE_KEY","TEMP_DATA_CACHE_KEY","WIND_DATA_CACHE_KEY","HISTORICAL_DATA_CACHE_KEY","CACHE_EXPIRY_KEY","CACHE_DURATION","OPENWEATHER_API_KEY","MALAGA_LAT","MALAGA_LON","isWithinBettingWindow","getTimeUntilNextBettingWindow","now","Date","currentHour","getHours","currentMinute","getMinutes","currentSecond","getSeconds","minutesLeft","secondsLeft","hours","minutes","seconds","hoursLeft","error","console","isWithinBettingWindowSync","getTimeUntilNextBettingWindowSync","getCurrentSpainHour","isDaylightSavingTime","jan","getFullYear","jul","getTimezoneOffset","getWeatherForDate","date","cachedData","getCachedWeatherData","response","fetch","ok","Error","data","json","weatherData","temperature","main","temp","tempMin","temp_min","tempMax","temp_max","humidity","windSpeed","wind","speed","windDirection","deg","description","weather","icon","rainAmount","rain","timestamp","toISOString","cacheWeatherData","expiredCache","getSimulatedWeatherData","fetchWeatherData","fetchCurrentRainData","rainData","amount","setItem","JSON","stringify","getTime","toString","getItem","parse","Math","random","fetchCurrentTemperatureData","tempData","current","min","max","currentTemp","fetchCurrentWindData","windSpeedMps","windSpeedKmh","maxWindSpeedKmh","windData","round","direction","currentWind","floor","fetchForecastData","list","map","item","dt","fetchHourlyHistoricalData","cacheExpiry","parseInt","parsedData","length","labels","slice","currentResponse","currentData","forecastResponse","forecastData","timestamps","push","forecastList","sort","a","b","itemDate","hoursDiff","itemHour","includes","airPollutionResponse","airPollutionData","tempVariation","missingHour","windVariation","missingDate","setHours","sortedIndices","index","sortedRainData","sortedTempData","sortedWindData","sortedLabels","result","isRaining","e","i","hourOfDay","ignoreExpiry","dateObj","month","getMonth","baseTemp","rainProbability","simulated","clearWeatherCache","removeItem","fetchRainViewerData"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/src/services/weatherService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Claves para almacenamiento en caché\nconst RAIN_DATA_CACHE_KEY = 'rain_data_cache';\nconst TEMP_DATA_CACHE_KEY = 'temp_data_cache';\nconst WIND_DATA_CACHE_KEY = 'wind_data_cache';\nconst HISTORICAL_DATA_CACHE_KEY = 'historical_data_cache';\nconst CACHE_EXPIRY_KEY = 'weather_cache_expiry';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutos en milisegundos (reducido de 30 minutos)\n\n// API key para OpenWeatherMap\nconst OPENWEATHER_API_KEY = '5ae0c9a3137234e18e032e3d6024629e';\n\n// Coordenadas de Málaga\nconst MALAGA_LAT = 36.7213;\nconst MALAGA_LON = -4.4213;\n\n// Función para verificar si estamos dentro de la ventana de apuestas (23:00-00:00 CET/CEST)\nexport const isWithinBettingWindow = (): boolean => {\n  // Permitir apuestas en cualquier momento\n  return true;\n};\n\n// Función para calcular el tiempo hasta la próxima ventana de apuestas o hasta que se cierre la ventana actual\nexport const getTimeUntilNextBettingWindow = (): { hours: number; minutes: number; seconds: number } => {\n  try {\n    const now = new Date();\n    const currentHour = now.getHours();\n    const currentMinute = now.getMinutes();\n    const currentSecond = now.getSeconds();\n    \n    // Si estamos dentro de la ventana de apuestas (23:00-00:00)\n    if (currentHour === 23 || currentHour === 0) {\n      // Si estamos a las 23, calcular tiempo hasta las 00:00\n      if (currentHour === 23) {\n        const minutesLeft = 59 - currentMinute;\n        const secondsLeft = 59 - currentSecond;\n        \n        return {\n          hours: 0,\n          minutes: minutesLeft,\n          seconds: secondsLeft\n        };\n      } \n      // Si estamos a las 00, calcular tiempo hasta las 01:00 (fin de la ventana)\n      else {\n        const minutesLeft = 59 - currentMinute;\n        const secondsLeft = 59 - currentSecond;\n        \n        return {\n          hours: 0,\n          minutes: minutesLeft,\n          seconds: secondsLeft\n        };\n      }\n    } else {\n      // Calcular tiempo hasta las 23:00 (apertura de la ventana)\n      let hoursLeft;\n      if (currentHour < 23) {\n        // Hoy, antes de las 23:00\n        hoursLeft = 23 - currentHour - 1; // -1 porque contamos minutos restantes\n      } else {\n        // Después de medianoche, esperar hasta las 23:00 del día siguiente\n        hoursLeft = 23 + (24 - currentHour) - 1; // -1 porque contamos minutos restantes\n      }\n      \n      const minutesLeft = 59 - currentMinute;\n      const secondsLeft = 59 - currentSecond;\n      \n      return {\n        hours: hoursLeft,\n        minutes: minutesLeft,\n        seconds: secondsLeft\n      };\n    }\n  } catch (error) {\n    console.error('Error calculating time until next betting window:', error);\n    return { hours: 0, minutes: 0, seconds: 0 };\n  }\n};\n\n// Versión sincrónica para componentes de UI (mantenida por compatibilidad)\nexport const isWithinBettingWindowSync = (): boolean => {\n  return isWithinBettingWindow();\n};\n\n// Versión sincrónica para componentes de UI\nexport const getTimeUntilNextBettingWindowSync = (): { hours?: number; minutes?: number; seconds?: number } => {\n  try {\n    return getTimeUntilNextBettingWindow();\n  } catch (error) {\n    console.error('Error in getTimeUntilNextBettingWindowSync:', error);\n    return { hours: 0, minutes: 0, seconds: 0 };\n  }\n};\n\n// Función para obtener la hora actual en España (CET/CEST)\nexport const getCurrentSpainHour = (): number => {\n  try {\n    const now = new Date();\n    return now.getHours();\n  } catch (error) {\n    console.error('Error getting current Spain hour:', error);\n    return 0;\n  }\n};\n\n// Función para verificar si estamos en horario de verano\nexport const isDaylightSavingTime = (): boolean => {\n  try {\n    const now = new Date();\n    const jan = new Date(now.getFullYear(), 0, 1);\n    const jul = new Date(now.getFullYear(), 6, 1);\n    \n    // Si la diferencia de offset entre enero y julio es 0, no hay cambio de horario\n    return jan.getTimezoneOffset() !== jul.getTimezoneOffset();\n  } catch (error) {\n    console.error('Error checking daylight saving time:', error);\n    return false;\n  }\n};\n\n// Función para obtener datos meteorológicos para una fecha específica\nexport const getWeatherForDate = async (date: string): Promise<any> => {\n  try {\n    // Verificar si tenemos datos en caché\n    const cachedData = await getCachedWeatherData();\n    if (cachedData) {\n      return cachedData;\n    }\n    \n    // Si no hay caché o está expirada, obtener datos nuevos\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching weather data');\n    }\n    \n    const data = await response.json();\n    \n    // Procesar y almacenar los datos\n    const weatherData = {\n      temperature: data.main.temp,\n      tempMin: data.main.temp_min,\n      tempMax: data.main.temp_max,\n      humidity: data.main.humidity,\n      windSpeed: data.wind.speed * 3.6, // Convertir de m/s a km/h\n      windDirection: data.wind.deg,\n      description: data.weather[0].description,\n      icon: data.weather[0].icon,\n      rainAmount: data.rain && data.rain['1h'] ? data.rain['1h'] : 0,\n      date: date,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Guardar en caché\n    await cacheWeatherData(weatherData);\n    \n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const expiredCache = await getCachedWeatherData(true);\n    if (expiredCache) {\n      return expiredCache;\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    return getSimulatedWeatherData(date);\n  }\n};\n\n// Exportar getWeatherForDate como fetchWeatherData para compatibilidad con AppContext\nexport const fetchWeatherData = getWeatherForDate;\n\n// Función para obtener datos actuales de lluvia\nexport const fetchCurrentRainData = async (): Promise<number> => {\n  try {\n    // Forzar actualización de datos en tiempo real\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching rain data');\n    }\n    \n    const data = await response.json();\n    \n    // Extraer datos de lluvia (mm en la última hora)\n    let rainAmount = 0;\n    if (data.rain && data.rain['1h']) {\n      rainAmount = data.rain['1h'];\n    }\n    \n    // Guardar en caché\n    const rainData = { amount: rainAmount, timestamp: new Date().toISOString() };\n    await AsyncStorage.setItem(RAIN_DATA_CACHE_KEY, JSON.stringify(rainData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return rainAmount;\n  } catch (error) {\n    console.error('Error fetching rain data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(RAIN_DATA_CACHE_KEY);\n    if (cachedData) {\n      const rainData = JSON.parse(cachedData);\n      return rainData.amount;\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    return Math.random() > 0.7 ? Math.random() * 5 : 0;\n  }\n};\n\n// Función para obtener datos actuales de temperatura\nexport const fetchCurrentTemperatureData = async (): Promise<{ current: number, min: number, max: number }> => {\n  try {\n    // Forzar actualización de datos en tiempo real\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching temperature data');\n    }\n    \n    const data = await response.json();\n    \n    // Extraer datos de temperatura\n    const tempData = {\n      current: data.main.temp,\n      min: data.main.temp_min,\n      max: data.main.temp_max,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Guardar en caché\n    await AsyncStorage.setItem(TEMP_DATA_CACHE_KEY, JSON.stringify(tempData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return tempData;\n  } catch (error) {\n    console.error('Error fetching temperature data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(TEMP_DATA_CACHE_KEY);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    const currentTemp = 15 + Math.random() * 15; // Entre 15 y 30 grados\n    return {\n      current: currentTemp,\n      min: currentTemp - (2 + Math.random() * 3),\n      max: currentTemp + (2 + Math.random() * 3),\n      timestamp: new Date().toISOString()\n    };\n  }\n};\n\n// Función para obtener datos actuales de viento\nexport const fetchCurrentWindData = async (): Promise<{ current: number, max: number, direction: number }> => {\n  try {\n    // Forzar actualización de datos en tiempo real\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching wind data');\n    }\n    \n    const data = await response.json();\n    \n    // Extraer datos de viento (convertir de m/s a km/h)\n    const windSpeedMps = data.wind.speed;\n    const windSpeedKmh = windSpeedMps * 3.6;\n    \n    // Para la velocidad máxima, usamos un valor ligeramente mayor\n    // En datos reales, esto vendría de una API que proporcione máximos históricos\n    const maxWindSpeedKmh = windSpeedKmh * (1 + Math.random() * 0.3);\n    \n    const windData = {\n      current: Math.round(windSpeedKmh * 10) / 10,\n      max: Math.round(maxWindSpeedKmh * 10) / 10,\n      direction: data.wind.deg,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Guardar en caché\n    await AsyncStorage.setItem(WIND_DATA_CACHE_KEY, JSON.stringify(windData));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return windData;\n  } catch (error) {\n    console.error('Error fetching wind data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(WIND_DATA_CACHE_KEY);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n    \n    // Si no hay caché, devolver datos simulados\n    const currentWind = 5 + Math.random() * 20; // Entre 5 y 25 km/h\n    return {\n      current: Math.round(currentWind * 10) / 10,\n      max: Math.round((currentWind * (1 + Math.random() * 0.3)) * 10) / 10,\n      direction: Math.floor(Math.random() * 360),\n      timestamp: new Date().toISOString()\n    };\n  }\n};\n\n// Función para obtener datos de pronóstico\nexport const fetchForecastData = async (): Promise<any[]> => {\n  try {\n    // Obtener datos de pronóstico para 5 días\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Error fetching forecast data');\n    }\n    \n    const data = await response.json();\n    \n    // Procesar datos de pronóstico\n    return data.list.map((item: any) => ({\n      date: new Date(item.dt * 1000).toISOString(),\n      temperature: item.main.temp,\n      tempMin: item.main.temp_min,\n      tempMax: item.main.temp_max,\n      humidity: item.main.humidity,\n      windSpeed: item.wind.speed * 3.6, // Convertir de m/s a km/h\n      windDirection: item.wind.deg,\n      description: item.weather[0].description,\n      icon: item.weather[0].icon,\n      rainAmount: item.rain && item.rain['3h'] ? item.rain['3h'] : 0,\n    }));\n  } catch (error) {\n    console.error('Error fetching forecast data:', error);\n    return [];\n  }\n};\n\n// Función para obtener datos históricos por hora (lluvia, temperatura, viento)\nexport const fetchHourlyHistoricalData = async (hours: number = 24): Promise<{\n  rainData: number[];\n  tempData: number[];\n  windData: number[];\n  labels: string[];\n}> => {\n  try {\n    // Verificar si tenemos datos en caché\n    const cachedData = await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);\n    const cacheExpiry = await AsyncStorage.getItem(CACHE_EXPIRY_KEY);\n    \n    if (cachedData && cacheExpiry && new Date().getTime() < parseInt(cacheExpiry)) {\n      const parsedData = JSON.parse(cachedData);\n      \n      // Asegurarse de que tenemos suficientes datos para el período solicitado\n      if (parsedData.rainData.length >= hours && \n          parsedData.tempData.length >= hours && \n          parsedData.windData.length >= hours && \n          parsedData.labels.length >= hours) {\n        \n        // Devolver solo la cantidad de horas solicitadas\n        return {\n          rainData: parsedData.rainData.slice(0, hours),\n          tempData: parsedData.tempData.slice(0, hours),\n          windData: parsedData.windData.slice(0, hours),\n          labels: parsedData.labels.slice(0, hours)\n        };\n      }\n    }\n    \n    // Si no hay caché o está expirada, obtener datos nuevos\n    \n    // 1. Obtener datos actuales\n    const currentResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!currentResponse.ok) {\n      throw new Error('Error fetching current weather data');\n    }\n    \n    const currentData = await currentResponse.json();\n    \n    // 2. Obtener datos de pronóstico (que incluyen datos de las últimas horas)\n    const forecastResponse = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n    );\n    \n    if (!forecastResponse.ok) {\n      throw new Error('Error fetching forecast data');\n    }\n    \n    const forecastData = await forecastResponse.json();\n    \n    // 3. Crear arrays para almacenar los datos\n    const rainData: number[] = [];\n    const tempData: number[] = [];\n    const windData: number[] = [];\n    const labels: string[] = [];\n    const timestamps: number[] = [];\n    \n    // 4. Obtener hora actual\n    const now = new Date();\n    \n    // 5. Añadir datos actuales\n    rainData.push(currentData.rain && currentData.rain['1h'] ? currentData.rain['1h'] : 0);\n    tempData.push(currentData.main.temp);\n    windData.push(currentData.wind.speed * 3.6); // Convertir de m/s a km/h\n    labels.push(now.getHours().toString() + 'h');\n    timestamps.push(now.getTime());\n    \n    // 6. Añadir datos de pronóstico (que incluyen datos recientes)\n    const forecastList = forecastData.list;\n    \n    // Ordenar por timestamp (más reciente primero)\n    forecastList.sort((a: any, b: any) => b.dt - a.dt);\n    \n    // Filtrar para obtener solo datos de las últimas 'hours' horas\n    for (const item of forecastList) {\n      const itemDate = new Date(item.dt * 1000);\n      const hoursDiff = (now.getTime() - itemDate.getTime()) / (1000 * 60 * 60);\n      \n      // Solo incluir datos que estén dentro del rango de horas solicitado\n      // y que no sean duplicados (basados en la hora)\n      if (hoursDiff > 0 && hoursDiff <= hours) {\n        const itemHour = itemDate.getHours();\n        \n        // Verificar si ya tenemos datos para esta hora\n        if (!labels.includes(itemHour.toString() + 'h')) {\n          rainData.push(item.rain && item.rain['3h'] ? item.rain['3h'] / 3 : 0); // Convertir de 3h a 1h\n          tempData.push(item.main.temp);\n          windData.push(item.wind.speed * 3.6); // Convertir de m/s a km/h\n          labels.push(itemHour.toString() + 'h');\n          timestamps.push(itemDate.getTime());\n        }\n      }\n    }\n    \n    // 7. Si no tenemos suficientes datos, completar con datos de la API de contaminación del aire\n    // que proporciona datos históricos de las últimas 24 horas\n    if (rainData.length < hours) {\n      try {\n        const airPollutionResponse = await fetch(\n          `https://api.openweathermap.org/data/2.5/air_pollution/history?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&start=${Math.floor(now.getTime()/1000 - hours*3600)}&end=${Math.floor(now.getTime()/1000)}&appid=${OPENWEATHER_API_KEY}`\n        );\n        \n        if (airPollutionResponse.ok) {\n          const airPollutionData = await airPollutionResponse.json();\n          \n          // Ordenar por timestamp (más reciente primero)\n          airPollutionData.list.sort((a: any, b: any) => b.dt - a.dt);\n          \n          for (const item of airPollutionData.list) {\n            const itemDate = new Date(item.dt * 1000);\n            const itemHour = itemDate.getHours();\n            \n            // Verificar si ya tenemos datos para esta hora\n            if (!labels.includes(itemHour.toString() + 'h')) {\n              // La API de contaminación no proporciona datos de lluvia, temperatura o viento\n              // pero podemos usar los datos actuales con pequeñas variaciones\n              \n              // Variación de temperatura basada en la hora del día\n              let tempVariation = 0;\n              if (itemHour >= 0 && itemHour < 6) {\n                tempVariation = -2;\n              } else if (itemHour >= 6 && itemHour < 12) {\n                tempVariation = 0;\n              } else if (itemHour >= 12 && itemHour < 18) {\n                tempVariation = 2;\n              } else {\n                tempVariation = 0;\n              }\n              \n              // Usar datos actuales con variaciones basadas en la hora\n              rainData.push(0); // No tenemos datos históricos de lluvia\n              tempData.push(currentData.main.temp + tempVariation);\n              windData.push(currentData.wind.speed * 3.6 * (0.7 + Math.random() * 0.6)); // Variación del 70-130%\n              labels.push(itemHour.toString() + 'h');\n              timestamps.push(itemDate.getTime());\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching air pollution data:', error);\n      }\n    }\n    \n    // 8. Si aún no tenemos suficientes datos, completar con datos generados\n    // basados en los datos actuales y patrones realistas\n    while (rainData.length < hours) {\n      const missingHour = (now.getHours() - rainData.length + 24) % 24;\n      \n      // Variación de temperatura basada en la hora del día\n      let tempVariation = 0;\n      if (missingHour >= 0 && missingHour < 6) {\n        tempVariation = -2 - Math.random();\n      } else if (missingHour >= 6 && missingHour < 12) {\n        tempVariation = -1 + missingHour * 0.2;\n      } else if (missingHour >= 12 && missingHour < 18) {\n        tempVariation = 2 - (missingHour - 12) * 0.2;\n      } else {\n        tempVariation = 0 - (missingHour - 18) * 0.3;\n      }\n      \n      // Variación de viento basada en la hora del día\n      let windVariation = 1.0; // Factor multiplicador\n      if (missingHour >= 10 && missingHour < 16) {\n        windVariation = 1.2 + Math.random() * 0.3; // 120-150%\n      } else if (missingHour >= 16 && missingHour < 22) {\n        windVariation = 1.0 + Math.random() * 0.2; // 100-120%\n      } else {\n        windVariation = 0.7 + Math.random() * 0.3; // 70-100%\n      }\n      \n      // Probabilidad de lluvia basada en la hora del día\n      let rainAmount = 0;\n      if (currentData.rain && currentData.rain['1h']) {\n        // Si está lloviendo ahora, generar datos históricos con lluvia\n        if (missingHour >= 6 && missingHour < 10 || missingHour >= 16 && missingHour < 20) {\n          rainAmount = currentData.rain['1h'] * (0.5 + Math.random());\n        } else {\n          rainAmount = currentData.rain['1h'] * (0.2 + Math.random() * 0.5);\n        }\n      }\n      \n      rainData.push(Math.round(rainAmount * 10) / 10);\n      tempData.push(Math.round((currentData.main.temp + tempVariation) * 10) / 10);\n      windData.push(Math.round((currentData.wind.speed * 3.6 * windVariation) * 10) / 10);\n      labels.push(missingHour.toString() + 'h');\n      \n      const missingDate = new Date(now);\n      missingDate.setHours(missingHour);\n      timestamps.push(missingDate.getTime());\n    }\n    \n    // 9. Ordenar todos los datos por timestamp (más antiguo primero)\n    const sortedIndices = timestamps\n      .map((timestamp, index) => ({ timestamp, index }))\n      .sort((a, b) => a.timestamp - b.timestamp)\n      .map(item => item.index);\n    \n    const sortedRainData = sortedIndices.map(index => rainData[index]);\n    const sortedTempData = sortedIndices.map(index => tempData[index]);\n    const sortedWindData = sortedIndices.map(index => windData[index]);\n    const sortedLabels = sortedIndices.map(index => labels[index]);\n    \n    // 10. Limitar a las horas solicitadas\n    const result = {\n      rainData: sortedRainData.slice(-hours),\n      tempData: sortedTempData.slice(-hours),\n      windData: sortedWindData.slice(-hours),\n      labels: sortedLabels.slice(-hours)\n    };\n    \n    // 11. Guardar en caché\n    await AsyncStorage.setItem(HISTORICAL_DATA_CACHE_KEY, JSON.stringify(result));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n    \n    return result;\n  } catch (error) {\n    console.error('Error fetching hourly historical data:', error);\n    \n    // Si hay un error, intentar usar datos en caché aunque estén expirados\n    const cachedData = await AsyncStorage.getItem(HISTORICAL_DATA_CACHE_KEY);\n    if (cachedData) {\n      const parsedData = JSON.parse(cachedData);\n      \n      // Devolver solo la cantidad de horas solicitadas\n      return {\n        rainData: parsedData.rainData.slice(0, hours),\n        tempData: parsedData.tempData.slice(0, hours),\n        windData: parsedData.windData.slice(0, hours),\n        labels: parsedData.labels.slice(0, hours)\n      };\n    }\n    \n    // Si no hay caché, crear datos basados en patrones realistas\n    const rainData: number[] = [];\n    const tempData: number[] = [];\n    const windData: number[] = [];\n    const labels: string[] = [];\n    \n    const now = new Date();\n    const currentHour = now.getHours();\n    \n    // Obtener datos actuales para usarlos como base\n    let currentTemp = 20;\n    let currentWind = 10;\n    let isRaining = false;\n    \n    try {\n      const currentResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${MALAGA_LAT}&lon=${MALAGA_LON}&units=metric&appid=${OPENWEATHER_API_KEY}`\n      );\n      \n      if (currentResponse.ok) {\n        const currentData = await currentResponse.json();\n        currentTemp = currentData.main.temp;\n        currentWind = currentData.wind.speed * 3.6;\n        isRaining = currentData.rain && currentData.rain['1h'] > 0;\n      }\n    } catch (e) {\n      // Ignorar errores y usar valores predeterminados\n    }\n    \n    // Generar datos para las horas solicitadas\n    for (let i = hours - 1; i >= 0; i--) {\n      const hourOfDay = (currentHour - i + 24) % 24;\n      \n      // Variación de temperatura basada en la hora del día\n      let tempVariation = 0;\n      if (hourOfDay >= 0 && hourOfDay < 6) {\n        tempVariation = -2 - Math.random();\n      } else if (hourOfDay >= 6 && hourOfDay < 12) {\n        tempVariation = -1 + hourOfDay * 0.2;\n      } else if (hourOfDay >= 12 && hourOfDay < 18) {\n        tempVariation = 2 - (hourOfDay - 12) * 0.2;\n      } else {\n        tempVariation = 0 - (hourOfDay - 18) * 0.3;\n      }\n      \n      // Variación de viento basada en la hora del día\n      let windVariation = 1.0; // Factor multiplicador\n      if (hourOfDay >= 10 && hourOfDay < 16) {\n        windVariation = 1.2 + Math.random() * 0.3; // 120-150%\n      } else if (hourOfDay >= 16 && hourOfDay < 22) {\n        windVariation = 1.0 + Math.random() * 0.2; // 100-120%\n      } else {\n        windVariation = 0.7 + Math.random() * 0.3; // 70-100%\n      }\n      \n      // Probabilidad de lluvia basada en la hora del día\n      let rainAmount = 0;\n      if (isRaining) {\n        if (hourOfDay >= 6 && hourOfDay < 10 || hourOfDay >= 16 && hourOfDay < 20) {\n          rainAmount = 1 + Math.random() * 2;\n        } else {\n          rainAmount = Math.random() * 1.5;\n        }\n      } else if (Math.random() > 0.8) {\n        rainAmount = Math.random() * 0.5;\n      }\n      \n      tempData.push(Math.round((currentTemp + tempVariation) * 10) / 10);\n      windData.push(Math.round((currentWind * windVariation) * 10) / 10);\n      rainData.push(Math.round(rainAmount * 10) / 10);\n      labels.push(hourOfDay.toString() + 'h');\n    }\n    \n    return { rainData, tempData, windData, labels };\n  }\n};\n\n// Función para almacenar datos meteorológicos en caché\nconst cacheWeatherData = async (data: any): Promise<void> => {\n  try {\n    await AsyncStorage.setItem('weather_data_cache', JSON.stringify(data));\n    await AsyncStorage.setItem(CACHE_EXPIRY_KEY, (new Date().getTime() + CACHE_DURATION).toString());\n  } catch (error) {\n    console.error('Error caching weather data:', error);\n  }\n};\n\n// Función para obtener datos meteorológicos de la caché\nconst getCachedWeatherData = async (ignoreExpiry: boolean = false): Promise<any | null> => {\n  try {\n    const cachedData = await AsyncStorage.getItem('weather_data_cache');\n    const cacheExpiry = await AsyncStorage.getItem(CACHE_EXPIRY_KEY);\n    \n    if (!cachedData) {\n      return null;\n    }\n    \n    // Verificar si la caché ha expirado\n    if (!ignoreExpiry && cacheExpiry && new Date().getTime() > parseInt(cacheExpiry)) {\n      return null;\n    }\n    \n    return JSON.parse(cachedData);\n  } catch (error) {\n    console.error('Error getting cached weather data:', error);\n    return null;\n  }\n};\n\n// Función para generar datos meteorológicos simulados (solo como fallback)\nconst getSimulatedWeatherData = (date: string): any => {\n  // Generar datos aleatorios basados en la fecha\n  const dateObj = new Date(date);\n  const month = dateObj.getMonth(); // 0-11\n  \n  // Ajustar temperatura según el mes (más cálido en verano, más frío en invierno)\n  let baseTemp = 15;\n  if (month >= 5 && month <= 8) { // Verano (junio-septiembre)\n    baseTemp = 25;\n  } else if (month >= 9 || month <= 2) { // Otoño-Invierno (octubre-marzo)\n    baseTemp = 12;\n  }\n  \n  // Añadir variación aleatoria\n  const temp = baseTemp + (Math.random() * 10 - 5);\n  const tempMin = temp - (2 + Math.random() * 3);\n  const tempMax = temp + (2 + Math.random() * 3);\n  \n  // Probabilidad de lluvia según el mes\n  let rainProbability = 0.2;\n  if (month >= 9 && month <= 11) { // Otoño\n    rainProbability = 0.4;\n  } else if (month >= 0 && month <= 2) { // Invierno\n    rainProbability = 0.5;\n  } else if (month >= 3 && month <= 5) { // Primavera\n    rainProbability = 0.3;\n  }\n  \n  // Determinar si llueve y cuánto\n  const isRaining = Math.random() < rainProbability;\n  const rainAmount = isRaining ? Math.random() * 10 : 0;\n  \n  // Velocidad del viento\n  const windSpeed = 5 + Math.random() * 20; // Entre 5 y 25 km/h\n  \n  return {\n    temperature: Math.round(temp * 10) / 10,\n    tempMin: Math.round(tempMin * 10) / 10,\n    tempMax: Math.round(tempMax * 10) / 10,\n    humidity: Math.floor(40 + Math.random() * 40), // Entre 40% y 80%\n    windSpeed: Math.round(windSpeed * 10) / 10,\n    windDirection: Math.floor(Math.random() * 360),\n    description: isRaining ? 'lluvia' : Math.random() > 0.7 ? 'parcialmente nublado' : 'despejado',\n    icon: isRaining ? '10d' : Math.random() > 0.7 ? '03d' : '01d',\n    rainAmount: Math.round(rainAmount * 100) / 100,\n    date: date,\n    timestamp: new Date().toISOString(),\n    simulated: true\n  };\n};\n\n// Función para limpiar la caché meteorológica\nexport const clearWeatherCache = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem('weather_data_cache');\n    await AsyncStorage.removeItem(RAIN_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(TEMP_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(WIND_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(HISTORICAL_DATA_CACHE_KEY);\n    await AsyncStorage.removeItem(CACHE_EXPIRY_KEY);\n  } catch (error) {\n    console.error('Error clearing weather cache:', error);\n  }\n};\n\n// Función para obtener datos de radar de lluvia de RainViewer\nexport const fetchRainViewerData = async () => {\n  try {\n    // RainViewer API endpoint\n    const response = await fetch('https://api.rainviewer.com/public/weather-maps.json');\n    \n    if (!response.ok) {\n      throw new Error('Error fetching RainViewer data');\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching RainViewer data:', error);\n    return null;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}