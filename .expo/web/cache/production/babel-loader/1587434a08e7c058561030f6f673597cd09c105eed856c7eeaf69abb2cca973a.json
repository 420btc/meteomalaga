{"ast":null,"code":"import{CodedError}from'expo-modules-core';import{CryptoEncoding}from\"./Crypto.types\";const getCrypto=()=>window.crypto??window.msCrypto;export default{async digestStringAsync(algorithm,data,options){if(!crypto.subtle){throw new CodedError('ERR_CRYPTO_UNAVAILABLE','Access to the WebCrypto API is restricted to secure origins (localhost/https).');}const encoder=new TextEncoder();const buffer=encoder.encode(data);const hashedData=await crypto.subtle.digest(algorithm,buffer);if(options.encoding===CryptoEncoding.HEX){return hexString(hashedData);}else if(options.encoding===CryptoEncoding.BASE64){return btoa(String.fromCharCode(...new Uint8Array(hashedData)));}throw new CodedError('ERR_CRYPTO_DIGEST','Invalid encoding type provided.');},getRandomBytes(length){const array=new Uint8Array(length);return getCrypto().getRandomValues(array);},async getRandomBytesAsync(length){const array=new Uint8Array(length);return getCrypto().getRandomValues(array);},getRandomValues(typedArray){return getCrypto().getRandomValues(typedArray);},randomUUID(){return getCrypto().randomUUID();},digestAsync(algorithm,data){return getCrypto().subtle.digest(algorithm,data);}};function hexString(buffer){const byteArray=new Uint8Array(buffer);const hexCodes=[...byteArray].map(value=>{const hexCode=value.toString(16);const paddedHexCode=hexCode.padStart(2,'0');return paddedHexCode;});return hexCodes.join('');}","map":{"version":3,"names":["CodedError","CryptoEncoding","getCrypto","window","crypto","msCrypto","digestStringAsync","algorithm","data","options","subtle","encoder","TextEncoder","buffer","encode","hashedData","digest","encoding","HEX","hexString","BASE64","btoa","String","fromCharCode","Uint8Array","getRandomBytes","length","array","getRandomValues","getRandomBytesAsync","typedArray","randomUUID","digestAsync","byteArray","hexCodes","map","value","hexCode","toString","paddedHexCode","padStart","join"],"sources":["/Users/atemjohnatem/Downloads/meteo-malaga/node_modules/expo-crypto/src/ExpoCrypto.web.ts"],"sourcesContent":["import { CodedError, TypedArray } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions } from './Crypto.types';\n\nconst getCrypto = (): Crypto => window.crypto ?? (window as any).msCrypto;\n\nexport default {\n  async digestStringAsync(\n    algorithm: CryptoDigestAlgorithm,\n    data: string,\n    options: CryptoDigestOptions\n  ): Promise<string> {\n    if (!crypto.subtle) {\n      throw new CodedError(\n        'ERR_CRYPTO_UNAVAILABLE',\n        'Access to the WebCrypto API is restricted to secure origins (localhost/https).'\n      );\n    }\n    const encoder = new TextEncoder();\n    const buffer = encoder.encode(data);\n    const hashedData = await crypto.subtle.digest(algorithm, buffer);\n    if (options.encoding === CryptoEncoding.HEX) {\n      return hexString(hashedData);\n    } else if (options.encoding === CryptoEncoding.BASE64) {\n      return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n    }\n    throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n  },\n  getRandomBytes(length: number): Uint8Array {\n    const array = new Uint8Array(length);\n    return getCrypto().getRandomValues(array);\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    return getCrypto().getRandomValues(array);\n  },\n  getRandomValues(typedArray: TypedArray) {\n    return getCrypto().getRandomValues(typedArray);\n  },\n  randomUUID() {\n    return getCrypto().randomUUID();\n  },\n  digestAsync(algorithm: AlgorithmIdentifier, data: ArrayBuffer): Promise<ArrayBuffer> {\n    return getCrypto().subtle.digest(algorithm, data);\n  },\n};\n\nfunction hexString(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n\n  const hexCodes = [...byteArray].map((value) => {\n    const hexCode = value.toString(16);\n    const paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAoB,mBAAmB,CAE1D,OAAgCC,cAAc,sBAE9C,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAcC,MAAM,CAACC,MAAM,EAAKD,MAAc,CAACE,QAAQ,CAEzE,cAAe,CACb,KAAM,CAAAC,iBAAiBA,CACrBC,SAAgC,CAChCC,IAAY,CACZC,OAA4B,EAE5B,GAAI,CAACL,MAAM,CAACM,MAAM,CAAE,CAClB,KAAM,IAAI,CAAAV,UAAU,CAClB,wBAAwB,CACxB,gFAAgF,CACjF,C,CAEH,KAAM,CAAAW,OAAO,CAAG,GAAI,CAAAC,WAAW,EAAE,CACjC,KAAM,CAAAC,MAAM,CAAGF,OAAO,CAACG,MAAM,CAACN,IAAI,CAAC,CACnC,KAAM,CAAAO,UAAU,CAAG,KAAM,CAAAX,MAAM,CAACM,MAAM,CAACM,MAAM,CAACT,SAAS,CAAEM,MAAM,CAAC,CAChE,GAAIJ,OAAO,CAACQ,QAAQ,GAAKhB,cAAc,CAACiB,GAAG,CAAE,CAC3C,MAAO,CAAAC,SAAS,CAACJ,UAAU,CAAC,C,CAC7B,IAAM,IAAIN,OAAO,CAACQ,QAAQ,GAAKhB,cAAc,CAACmB,MAAM,CAAE,CACrD,MAAO,CAAAC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,GAAG,GAAI,CAAAC,UAAU,CAACT,UAAU,CAAC,CAAC,CAAC,C,CAEjE,KAAM,IAAI,CAAAf,UAAU,CAAC,mBAAmB,CAAE,iCAAiC,CAAC,CAC9E,CAAC,CACDyB,cAAcA,CAACC,MAAc,EAC3B,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAH,UAAU,CAACE,MAAM,CAAC,CACpC,MAAO,CAAAxB,SAAS,EAAE,CAAC0B,eAAe,CAACD,KAAK,CAAC,CAC3C,CAAC,CACD,KAAM,CAAAE,mBAAmBA,CAACH,MAAc,EACtC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAH,UAAU,CAACE,MAAM,CAAC,CACpC,MAAO,CAAAxB,SAAS,EAAE,CAAC0B,eAAe,CAACD,KAAK,CAAC,CAC3C,CAAC,CACDC,eAAeA,CAACE,UAAsB,EACpC,MAAO,CAAA5B,SAAS,EAAE,CAAC0B,eAAe,CAACE,UAAU,CAAC,CAChD,CAAC,CACDC,UAAUA,CAAA,EACR,MAAO,CAAA7B,SAAS,EAAE,CAAC6B,UAAU,EAAE,CACjC,CAAC,CACDC,WAAWA,CAACzB,SAA8B,CAAEC,IAAiB,EAC3D,MAAO,CAAAN,SAAS,EAAE,CAACQ,MAAM,CAACM,MAAM,CAACT,SAAS,CAAEC,IAAI,CAAC,CACnD,C,CACD,CAED,QAAS,CAAAW,SAASA,CAACN,MAAmB,EACpC,KAAM,CAAAoB,SAAS,CAAG,GAAI,CAAAT,UAAU,CAACX,MAAM,CAAC,CAExC,KAAM,CAAAqB,QAAQ,CAAG,CAAC,GAAGD,SAAS,CAAC,CAACE,GAAG,CAAEC,KAAK,EAAI,CAC5C,KAAM,CAAAC,OAAO,CAAGD,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC,CAClC,KAAM,CAAAC,aAAa,CAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAC9C,MAAO,CAAAD,aAAa,CACtB,CAAC,CAAC,CAEF,MAAO,CAAAL,QAAQ,CAACO,IAAI,CAAC,EAAE,CAAC,CAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}